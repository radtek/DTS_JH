// Reminder: Modify typemap.dat to customize the header file generated by wsdl2h
/* MESService.h
   Generated by wsdl2h 2.8.64 from MESService.wsdl and typemap.dat
   2018-03-07 08:26:38 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

/** @page page_notes Notes

@note HINTS:
 - Run soapcpp2 on MESService.h to generate the SOAP/XML processing logic.
   Use soapcpp2 -I to specify paths for #import
   Use soapcpp2 -j to generate improved proxy and server classes.
   Use soapcpp2 -r to generate a report.
 - Use wsdl2h -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Run Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -R to generate REST operations.
 - Use wsdl2h -Onum to optimize output by removing unused schema components.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Use wsdl2h -d to enable DOM support for xsd:anyType.
 - Use wsdl2h -g to auto-generate readers and writers for root elements.
 - Use wsdl2h -b to auto-generate bi-directional operations (duplex ops).
 - Use wsdl2h -U to map XML names to C++ Unicode identifiers instead of _xNNNN.
 - Use wsdl2h -u to disable the generation of unions.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The wsdl2h tool and its generated software are released under the GPL.
This software is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt c++,w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

tempuri = "http://tempuri.org/"

*/

#define SOAP_NAMESPACE_OF_tempuri	"http://tempuri.org/"
//gsoap tempuri schema namespace:	http://tempuri.org/
//gsoap tempuri schema elementForm:	qualified
//gsoap tempuri schema attributeForm:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


//  Forward declaration of class _tempuri__GetDate.
class _tempuri__GetDate;

//  Forward declaration of class _tempuri__GetDateResponse.
class _tempuri__GetDateResponse;

//  Forward declaration of class _tempuri__GetDocCode.
class _tempuri__GetDocCode;

//  Forward declaration of class _tempuri__GetDocCodeResponse.
class _tempuri__GetDocCodeResponse;

//  Forward declaration of class _tempuri__ToolingTimes.
class _tempuri__ToolingTimes;

//  Forward declaration of class _tempuri__ToolingTimesResponse.
class _tempuri__ToolingTimesResponse;

//  Forward declaration of class _tempuri__WorkOrder.
class _tempuri__WorkOrder;

//  Forward declaration of class _tempuri__WorkOrderResponse.
class _tempuri__WorkOrderResponse;

//  Forward declaration of class _tempuri__LineInventory.
class _tempuri__LineInventory;

//  Forward declaration of class _tempuri__LineInventoryResponse.
class _tempuri__LineInventoryResponse;

//  Forward declaration of class _tempuri__LineInventoryUpdate.
class _tempuri__LineInventoryUpdate;

//  Forward declaration of class _tempuri__LineInventoryUpdateResponse.
class _tempuri__LineInventoryUpdateResponse;

//  Forward declaration of class _tempuri__LineInventoryReturn.
class _tempuri__LineInventoryReturn;

//  Forward declaration of class _tempuri__LineInventoryReturnResponse.
class _tempuri__LineInventoryReturnResponse;

//  Forward declaration of class _tempuri__AnDon.
class _tempuri__AnDon;

//  Forward declaration of class _tempuri__AnDonResponse.
class _tempuri__AnDonResponse;

//  Forward declaration of class _tempuri__AnDonCall.
class _tempuri__AnDonCall;

//  Forward declaration of class _tempuri__AnDonCallResponse.
class _tempuri__AnDonCallResponse;

//  Forward declaration of class _tempuri__AnDonTest.
class _tempuri__AnDonTest;

//  Forward declaration of class _tempuri__AnDonTestResponse.
class _tempuri__AnDonTestResponse;

//  Forward declaration of class _tempuri__ItemsAdd.
class _tempuri__ItemsAdd;

//  Forward declaration of class _tempuri__ItemsAddResponse.
class _tempuri__ItemsAddResponse;

//  Forward declaration of class _tempuri__DocAdd.
class _tempuri__DocAdd;

//  Forward declaration of class _tempuri__DocAddResponse.
class _tempuri__DocAddResponse;

//  Forward declaration of class _tempuri__SetExMail.
class _tempuri__SetExMail;

//  Forward declaration of class _tempuri__SetExMailResponse.
class _tempuri__SetExMailResponse;

//  Forward declaration of class _tempuri__GetDept.
class _tempuri__GetDept;

//  Forward declaration of class _tempuri__GetDeptResponse.
class _tempuri__GetDeptResponse;

//  Forward declaration of class _tempuri__GetPower.
class _tempuri__GetPower;

//  Forward declaration of class _tempuri__GetPowerResponse.
class _tempuri__GetPowerResponse;

//  Forward declaration of class _tempuri__Login.
class _tempuri__Login;

//  Forward declaration of class _tempuri__LoginResponse.
class _tempuri__LoginResponse;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://tempuri.org/":GetDate
/// @brief "http://tempuri.org/":GetDate is a complexType.
///
/// class _tempuri__GetDate operations:
/// - _tempuri__GetDate* soap_new__tempuri__GetDate(soap*) allocate and default initialize
/// - _tempuri__GetDate* soap_new__tempuri__GetDate(soap*, int num) allocate array and default initialize values
/// - _tempuri__GetDate* soap_new_req__tempuri__GetDate(soap*, ...) allocate, set required members
/// - _tempuri__GetDate* soap_new_set__tempuri__GetDate(soap*, ...) allocate, set all public members
/// - _tempuri__GetDate::soap_default(soap*) default initialize members
/// - int soap_read__tempuri__GetDate(soap*, _tempuri__GetDate*) deserialize from a stream
/// - int soap_write__tempuri__GetDate(soap*, _tempuri__GetDate*) serialize to a stream
/// - _tempuri__GetDate* _tempuri__GetDate::soap_dup(soap*) returns deep copy of _tempuri__GetDate, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tempuri__GetDate::soap_del() deep deletes _tempuri__GetDate data members, use only after _tempuri__GetDate::soap_dup(NULL) (use soapcpp2 -Ed)
class _tempuri__GetDate
{ public:
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":GetDateResponse
/// @brief "http://tempuri.org/":GetDateResponse is a complexType.
///
/// class _tempuri__GetDateResponse operations:
/// - _tempuri__GetDateResponse* soap_new__tempuri__GetDateResponse(soap*) allocate and default initialize
/// - _tempuri__GetDateResponse* soap_new__tempuri__GetDateResponse(soap*, int num) allocate array and default initialize values
/// - _tempuri__GetDateResponse* soap_new_req__tempuri__GetDateResponse(soap*, ...) allocate, set required members
/// - _tempuri__GetDateResponse* soap_new_set__tempuri__GetDateResponse(soap*, ...) allocate, set all public members
/// - _tempuri__GetDateResponse::soap_default(soap*) default initialize members
/// - int soap_read__tempuri__GetDateResponse(soap*, _tempuri__GetDateResponse*) deserialize from a stream
/// - int soap_write__tempuri__GetDateResponse(soap*, _tempuri__GetDateResponse*) serialize to a stream
/// - _tempuri__GetDateResponse* _tempuri__GetDateResponse::soap_dup(soap*) returns deep copy of _tempuri__GetDateResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tempuri__GetDateResponse::soap_del() deep deletes _tempuri__GetDateResponse data members, use only after _tempuri__GetDateResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _tempuri__GetDateResponse
{ public:
/// Element "GetDateResult" of XSD type xs:string.
    char*                                GetDateResult                  0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":GetDocCode
/// @brief "http://tempuri.org/":GetDocCode is a complexType.
///
/// class _tempuri__GetDocCode operations:
/// - _tempuri__GetDocCode* soap_new__tempuri__GetDocCode(soap*) allocate and default initialize
/// - _tempuri__GetDocCode* soap_new__tempuri__GetDocCode(soap*, int num) allocate array and default initialize values
/// - _tempuri__GetDocCode* soap_new_req__tempuri__GetDocCode(soap*, ...) allocate, set required members
/// - _tempuri__GetDocCode* soap_new_set__tempuri__GetDocCode(soap*, ...) allocate, set all public members
/// - _tempuri__GetDocCode::soap_default(soap*) default initialize members
/// - int soap_read__tempuri__GetDocCode(soap*, _tempuri__GetDocCode*) deserialize from a stream
/// - int soap_write__tempuri__GetDocCode(soap*, _tempuri__GetDocCode*) serialize to a stream
/// - _tempuri__GetDocCode* _tempuri__GetDocCode::soap_dup(soap*) returns deep copy of _tempuri__GetDocCode, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tempuri__GetDocCode::soap_del() deep deletes _tempuri__GetDocCode data members, use only after _tempuri__GetDocCode::soap_dup(NULL) (use soapcpp2 -Ed)
class _tempuri__GetDocCode
{ public:
/// Element "DocValue" of XSD type xs:int.
    int                                  DocValue                       1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":GetDocCodeResponse
/// @brief "http://tempuri.org/":GetDocCodeResponse is a complexType.
///
/// class _tempuri__GetDocCodeResponse operations:
/// - _tempuri__GetDocCodeResponse* soap_new__tempuri__GetDocCodeResponse(soap*) allocate and default initialize
/// - _tempuri__GetDocCodeResponse* soap_new__tempuri__GetDocCodeResponse(soap*, int num) allocate array and default initialize values
/// - _tempuri__GetDocCodeResponse* soap_new_req__tempuri__GetDocCodeResponse(soap*, ...) allocate, set required members
/// - _tempuri__GetDocCodeResponse* soap_new_set__tempuri__GetDocCodeResponse(soap*, ...) allocate, set all public members
/// - _tempuri__GetDocCodeResponse::soap_default(soap*) default initialize members
/// - int soap_read__tempuri__GetDocCodeResponse(soap*, _tempuri__GetDocCodeResponse*) deserialize from a stream
/// - int soap_write__tempuri__GetDocCodeResponse(soap*, _tempuri__GetDocCodeResponse*) serialize to a stream
/// - _tempuri__GetDocCodeResponse* _tempuri__GetDocCodeResponse::soap_dup(soap*) returns deep copy of _tempuri__GetDocCodeResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tempuri__GetDocCodeResponse::soap_del() deep deletes _tempuri__GetDocCodeResponse data members, use only after _tempuri__GetDocCodeResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _tempuri__GetDocCodeResponse
{ public:
/// Element "GetDocCodeResult" of XSD type xs:string.
    char*                                GetDocCodeResult               0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":ToolingTimes
/// @brief "http://tempuri.org/":ToolingTimes is a complexType.
///
/// class _tempuri__ToolingTimes operations:
/// - _tempuri__ToolingTimes* soap_new__tempuri__ToolingTimes(soap*) allocate and default initialize
/// - _tempuri__ToolingTimes* soap_new__tempuri__ToolingTimes(soap*, int num) allocate array and default initialize values
/// - _tempuri__ToolingTimes* soap_new_req__tempuri__ToolingTimes(soap*, ...) allocate, set required members
/// - _tempuri__ToolingTimes* soap_new_set__tempuri__ToolingTimes(soap*, ...) allocate, set all public members
/// - _tempuri__ToolingTimes::soap_default(soap*) default initialize members
/// - int soap_read__tempuri__ToolingTimes(soap*, _tempuri__ToolingTimes*) deserialize from a stream
/// - int soap_write__tempuri__ToolingTimes(soap*, _tempuri__ToolingTimes*) serialize to a stream
/// - _tempuri__ToolingTimes* _tempuri__ToolingTimes::soap_dup(soap*) returns deep copy of _tempuri__ToolingTimes, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tempuri__ToolingTimes::soap_del() deep deletes _tempuri__ToolingTimes data members, use only after _tempuri__ToolingTimes::soap_dup(NULL) (use soapcpp2 -Ed)
class _tempuri__ToolingTimes
{ public:
/// Element "BillCode" of XSD type xs:string.
    char*                                BillCode                       0;	///< Optional element.
/// Element "DeviceCode" of XSD type xs:string.
    char*                                DeviceCode                     0;	///< Optional element.
/// Element "Times" of XSD type xs:int.
    int                                  Times                          1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":ToolingTimesResponse
/// @brief "http://tempuri.org/":ToolingTimesResponse is a complexType.
///
/// class _tempuri__ToolingTimesResponse operations:
/// - _tempuri__ToolingTimesResponse* soap_new__tempuri__ToolingTimesResponse(soap*) allocate and default initialize
/// - _tempuri__ToolingTimesResponse* soap_new__tempuri__ToolingTimesResponse(soap*, int num) allocate array and default initialize values
/// - _tempuri__ToolingTimesResponse* soap_new_req__tempuri__ToolingTimesResponse(soap*, ...) allocate, set required members
/// - _tempuri__ToolingTimesResponse* soap_new_set__tempuri__ToolingTimesResponse(soap*, ...) allocate, set all public members
/// - _tempuri__ToolingTimesResponse::soap_default(soap*) default initialize members
/// - int soap_read__tempuri__ToolingTimesResponse(soap*, _tempuri__ToolingTimesResponse*) deserialize from a stream
/// - int soap_write__tempuri__ToolingTimesResponse(soap*, _tempuri__ToolingTimesResponse*) serialize to a stream
/// - _tempuri__ToolingTimesResponse* _tempuri__ToolingTimesResponse::soap_dup(soap*) returns deep copy of _tempuri__ToolingTimesResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tempuri__ToolingTimesResponse::soap_del() deep deletes _tempuri__ToolingTimesResponse data members, use only after _tempuri__ToolingTimesResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _tempuri__ToolingTimesResponse
{ public:
/// Element "ToolingTimesResult" of XSD type xs:string.
    char*                                ToolingTimesResult             0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":WorkOrder
/// @brief "http://tempuri.org/":WorkOrder is a complexType.
///
/// class _tempuri__WorkOrder operations:
/// - _tempuri__WorkOrder* soap_new__tempuri__WorkOrder(soap*) allocate and default initialize
/// - _tempuri__WorkOrder* soap_new__tempuri__WorkOrder(soap*, int num) allocate array and default initialize values
/// - _tempuri__WorkOrder* soap_new_req__tempuri__WorkOrder(soap*, ...) allocate, set required members
/// - _tempuri__WorkOrder* soap_new_set__tempuri__WorkOrder(soap*, ...) allocate, set all public members
/// - _tempuri__WorkOrder::soap_default(soap*) default initialize members
/// - int soap_read__tempuri__WorkOrder(soap*, _tempuri__WorkOrder*) deserialize from a stream
/// - int soap_write__tempuri__WorkOrder(soap*, _tempuri__WorkOrder*) serialize to a stream
/// - _tempuri__WorkOrder* _tempuri__WorkOrder::soap_dup(soap*) returns deep copy of _tempuri__WorkOrder, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tempuri__WorkOrder::soap_del() deep deletes _tempuri__WorkOrder data members, use only after _tempuri__WorkOrder::soap_dup(NULL) (use soapcpp2 -Ed)
class _tempuri__WorkOrder
{ public:
/// Element "WorkOrderXml" of XSD type xs:string.
    char*                                WorkOrderXml                   0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":WorkOrderResponse
/// @brief "http://tempuri.org/":WorkOrderResponse is a complexType.
///
/// class _tempuri__WorkOrderResponse operations:
/// - _tempuri__WorkOrderResponse* soap_new__tempuri__WorkOrderResponse(soap*) allocate and default initialize
/// - _tempuri__WorkOrderResponse* soap_new__tempuri__WorkOrderResponse(soap*, int num) allocate array and default initialize values
/// - _tempuri__WorkOrderResponse* soap_new_req__tempuri__WorkOrderResponse(soap*, ...) allocate, set required members
/// - _tempuri__WorkOrderResponse* soap_new_set__tempuri__WorkOrderResponse(soap*, ...) allocate, set all public members
/// - _tempuri__WorkOrderResponse::soap_default(soap*) default initialize members
/// - int soap_read__tempuri__WorkOrderResponse(soap*, _tempuri__WorkOrderResponse*) deserialize from a stream
/// - int soap_write__tempuri__WorkOrderResponse(soap*, _tempuri__WorkOrderResponse*) serialize to a stream
/// - _tempuri__WorkOrderResponse* _tempuri__WorkOrderResponse::soap_dup(soap*) returns deep copy of _tempuri__WorkOrderResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tempuri__WorkOrderResponse::soap_del() deep deletes _tempuri__WorkOrderResponse data members, use only after _tempuri__WorkOrderResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _tempuri__WorkOrderResponse
{ public:
/// Element "WorkOrderResult" of XSD type xs:string.
    char*                                WorkOrderResult                0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":LineInventory
/// @brief "http://tempuri.org/":LineInventory is a complexType.
///
/// class _tempuri__LineInventory operations:
/// - _tempuri__LineInventory* soap_new__tempuri__LineInventory(soap*) allocate and default initialize
/// - _tempuri__LineInventory* soap_new__tempuri__LineInventory(soap*, int num) allocate array and default initialize values
/// - _tempuri__LineInventory* soap_new_req__tempuri__LineInventory(soap*, ...) allocate, set required members
/// - _tempuri__LineInventory* soap_new_set__tempuri__LineInventory(soap*, ...) allocate, set all public members
/// - _tempuri__LineInventory::soap_default(soap*) default initialize members
/// - int soap_read__tempuri__LineInventory(soap*, _tempuri__LineInventory*) deserialize from a stream
/// - int soap_write__tempuri__LineInventory(soap*, _tempuri__LineInventory*) serialize to a stream
/// - _tempuri__LineInventory* _tempuri__LineInventory::soap_dup(soap*) returns deep copy of _tempuri__LineInventory, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tempuri__LineInventory::soap_del() deep deletes _tempuri__LineInventory data members, use only after _tempuri__LineInventory::soap_dup(NULL) (use soapcpp2 -Ed)
class _tempuri__LineInventory
{ public:
/// Element "WorkLineCode" of XSD type xs:string.
    char*                                WorkLineCode                   0;	///< Optional element.
/// Element "MCode" of XSD type xs:string.
    char*                                MCode                          0;	///< Optional element.
/// Element "BatchNo" of XSD type xs:string.
    char*                                BatchNo                        0;	///< Optional element.
/// Element "BarCode" of XSD type xs:string.
    char*                                BarCode                        0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":LineInventoryResponse
/// @brief "http://tempuri.org/":LineInventoryResponse is a complexType.
///
/// class _tempuri__LineInventoryResponse operations:
/// - _tempuri__LineInventoryResponse* soap_new__tempuri__LineInventoryResponse(soap*) allocate and default initialize
/// - _tempuri__LineInventoryResponse* soap_new__tempuri__LineInventoryResponse(soap*, int num) allocate array and default initialize values
/// - _tempuri__LineInventoryResponse* soap_new_req__tempuri__LineInventoryResponse(soap*, ...) allocate, set required members
/// - _tempuri__LineInventoryResponse* soap_new_set__tempuri__LineInventoryResponse(soap*, ...) allocate, set all public members
/// - _tempuri__LineInventoryResponse::soap_default(soap*) default initialize members
/// - int soap_read__tempuri__LineInventoryResponse(soap*, _tempuri__LineInventoryResponse*) deserialize from a stream
/// - int soap_write__tempuri__LineInventoryResponse(soap*, _tempuri__LineInventoryResponse*) serialize to a stream
/// - _tempuri__LineInventoryResponse* _tempuri__LineInventoryResponse::soap_dup(soap*) returns deep copy of _tempuri__LineInventoryResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tempuri__LineInventoryResponse::soap_del() deep deletes _tempuri__LineInventoryResponse data members, use only after _tempuri__LineInventoryResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _tempuri__LineInventoryResponse
{ public:
/// Element "LineInventoryResult" of XSD type xs:string.
    char*                                LineInventoryResult            0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":LineInventoryUpdate
/// @brief "http://tempuri.org/":LineInventoryUpdate is a complexType.
///
/// class _tempuri__LineInventoryUpdate operations:
/// - _tempuri__LineInventoryUpdate* soap_new__tempuri__LineInventoryUpdate(soap*) allocate and default initialize
/// - _tempuri__LineInventoryUpdate* soap_new__tempuri__LineInventoryUpdate(soap*, int num) allocate array and default initialize values
/// - _tempuri__LineInventoryUpdate* soap_new_req__tempuri__LineInventoryUpdate(soap*, ...) allocate, set required members
/// - _tempuri__LineInventoryUpdate* soap_new_set__tempuri__LineInventoryUpdate(soap*, ...) allocate, set all public members
/// - _tempuri__LineInventoryUpdate::soap_default(soap*) default initialize members
/// - int soap_read__tempuri__LineInventoryUpdate(soap*, _tempuri__LineInventoryUpdate*) deserialize from a stream
/// - int soap_write__tempuri__LineInventoryUpdate(soap*, _tempuri__LineInventoryUpdate*) serialize to a stream
/// - _tempuri__LineInventoryUpdate* _tempuri__LineInventoryUpdate::soap_dup(soap*) returns deep copy of _tempuri__LineInventoryUpdate, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tempuri__LineInventoryUpdate::soap_del() deep deletes _tempuri__LineInventoryUpdate data members, use only after _tempuri__LineInventoryUpdate::soap_dup(NULL) (use soapcpp2 -Ed)
class _tempuri__LineInventoryUpdate
{ public:
/// Element "LIXml" of XSD type xs:string.
    char*                                LIXml                          0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":LineInventoryUpdateResponse
/// @brief "http://tempuri.org/":LineInventoryUpdateResponse is a complexType.
///
/// class _tempuri__LineInventoryUpdateResponse operations:
/// - _tempuri__LineInventoryUpdateResponse* soap_new__tempuri__LineInventoryUpdateResponse(soap*) allocate and default initialize
/// - _tempuri__LineInventoryUpdateResponse* soap_new__tempuri__LineInventoryUpdateResponse(soap*, int num) allocate array and default initialize values
/// - _tempuri__LineInventoryUpdateResponse* soap_new_req__tempuri__LineInventoryUpdateResponse(soap*, ...) allocate, set required members
/// - _tempuri__LineInventoryUpdateResponse* soap_new_set__tempuri__LineInventoryUpdateResponse(soap*, ...) allocate, set all public members
/// - _tempuri__LineInventoryUpdateResponse::soap_default(soap*) default initialize members
/// - int soap_read__tempuri__LineInventoryUpdateResponse(soap*, _tempuri__LineInventoryUpdateResponse*) deserialize from a stream
/// - int soap_write__tempuri__LineInventoryUpdateResponse(soap*, _tempuri__LineInventoryUpdateResponse*) serialize to a stream
/// - _tempuri__LineInventoryUpdateResponse* _tempuri__LineInventoryUpdateResponse::soap_dup(soap*) returns deep copy of _tempuri__LineInventoryUpdateResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tempuri__LineInventoryUpdateResponse::soap_del() deep deletes _tempuri__LineInventoryUpdateResponse data members, use only after _tempuri__LineInventoryUpdateResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _tempuri__LineInventoryUpdateResponse
{ public:
/// Element "LineInventoryUpdateResult" of XSD type xs:string.
    char*                                LineInventoryUpdateResult      0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":LineInventoryReturn
/// @brief "http://tempuri.org/":LineInventoryReturn is a complexType.
///
/// class _tempuri__LineInventoryReturn operations:
/// - _tempuri__LineInventoryReturn* soap_new__tempuri__LineInventoryReturn(soap*) allocate and default initialize
/// - _tempuri__LineInventoryReturn* soap_new__tempuri__LineInventoryReturn(soap*, int num) allocate array and default initialize values
/// - _tempuri__LineInventoryReturn* soap_new_req__tempuri__LineInventoryReturn(soap*, ...) allocate, set required members
/// - _tempuri__LineInventoryReturn* soap_new_set__tempuri__LineInventoryReturn(soap*, ...) allocate, set all public members
/// - _tempuri__LineInventoryReturn::soap_default(soap*) default initialize members
/// - int soap_read__tempuri__LineInventoryReturn(soap*, _tempuri__LineInventoryReturn*) deserialize from a stream
/// - int soap_write__tempuri__LineInventoryReturn(soap*, _tempuri__LineInventoryReturn*) serialize to a stream
/// - _tempuri__LineInventoryReturn* _tempuri__LineInventoryReturn::soap_dup(soap*) returns deep copy of _tempuri__LineInventoryReturn, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tempuri__LineInventoryReturn::soap_del() deep deletes _tempuri__LineInventoryReturn data members, use only after _tempuri__LineInventoryReturn::soap_dup(NULL) (use soapcpp2 -Ed)
class _tempuri__LineInventoryReturn
{ public:
/// Element "LRXml" of XSD type xs:string.
    char*                                LRXml                          0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":LineInventoryReturnResponse
/// @brief "http://tempuri.org/":LineInventoryReturnResponse is a complexType.
///
/// class _tempuri__LineInventoryReturnResponse operations:
/// - _tempuri__LineInventoryReturnResponse* soap_new__tempuri__LineInventoryReturnResponse(soap*) allocate and default initialize
/// - _tempuri__LineInventoryReturnResponse* soap_new__tempuri__LineInventoryReturnResponse(soap*, int num) allocate array and default initialize values
/// - _tempuri__LineInventoryReturnResponse* soap_new_req__tempuri__LineInventoryReturnResponse(soap*, ...) allocate, set required members
/// - _tempuri__LineInventoryReturnResponse* soap_new_set__tempuri__LineInventoryReturnResponse(soap*, ...) allocate, set all public members
/// - _tempuri__LineInventoryReturnResponse::soap_default(soap*) default initialize members
/// - int soap_read__tempuri__LineInventoryReturnResponse(soap*, _tempuri__LineInventoryReturnResponse*) deserialize from a stream
/// - int soap_write__tempuri__LineInventoryReturnResponse(soap*, _tempuri__LineInventoryReturnResponse*) serialize to a stream
/// - _tempuri__LineInventoryReturnResponse* _tempuri__LineInventoryReturnResponse::soap_dup(soap*) returns deep copy of _tempuri__LineInventoryReturnResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tempuri__LineInventoryReturnResponse::soap_del() deep deletes _tempuri__LineInventoryReturnResponse data members, use only after _tempuri__LineInventoryReturnResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _tempuri__LineInventoryReturnResponse
{ public:
/// Element "LineInventoryReturnResult" of XSD type xs:string.
    char*                                LineInventoryReturnResult      0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":AnDon
/// @brief "http://tempuri.org/":AnDon is a complexType.
///
/// class _tempuri__AnDon operations:
/// - _tempuri__AnDon* soap_new__tempuri__AnDon(soap*) allocate and default initialize
/// - _tempuri__AnDon* soap_new__tempuri__AnDon(soap*, int num) allocate array and default initialize values
/// - _tempuri__AnDon* soap_new_req__tempuri__AnDon(soap*, ...) allocate, set required members
/// - _tempuri__AnDon* soap_new_set__tempuri__AnDon(soap*, ...) allocate, set all public members
/// - _tempuri__AnDon::soap_default(soap*) default initialize members
/// - int soap_read__tempuri__AnDon(soap*, _tempuri__AnDon*) deserialize from a stream
/// - int soap_write__tempuri__AnDon(soap*, _tempuri__AnDon*) serialize to a stream
/// - _tempuri__AnDon* _tempuri__AnDon::soap_dup(soap*) returns deep copy of _tempuri__AnDon, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tempuri__AnDon::soap_del() deep deletes _tempuri__AnDon data members, use only after _tempuri__AnDon::soap_dup(NULL) (use soapcpp2 -Ed)
class _tempuri__AnDon
{ public:
/// Element "Type" of XSD type xs:string.
    char*                                Type                           0;	///< Optional element.
/// Element "DocXmlMaster" of XSD type xs:string.
    char*                                DocXmlMaster                   0;	///< Optional element.
/// Element "DocXmlList" of XSD type xs:string.
    char*                                DocXmlList                     0;	///< Optional element.
/// Element "DocXmlSLList" of XSD type xs:string.
    char*                                DocXmlSLList                   0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":AnDonResponse
/// @brief "http://tempuri.org/":AnDonResponse is a complexType.
///
/// class _tempuri__AnDonResponse operations:
/// - _tempuri__AnDonResponse* soap_new__tempuri__AnDonResponse(soap*) allocate and default initialize
/// - _tempuri__AnDonResponse* soap_new__tempuri__AnDonResponse(soap*, int num) allocate array and default initialize values
/// - _tempuri__AnDonResponse* soap_new_req__tempuri__AnDonResponse(soap*, ...) allocate, set required members
/// - _tempuri__AnDonResponse* soap_new_set__tempuri__AnDonResponse(soap*, ...) allocate, set all public members
/// - _tempuri__AnDonResponse::soap_default(soap*) default initialize members
/// - int soap_read__tempuri__AnDonResponse(soap*, _tempuri__AnDonResponse*) deserialize from a stream
/// - int soap_write__tempuri__AnDonResponse(soap*, _tempuri__AnDonResponse*) serialize to a stream
/// - _tempuri__AnDonResponse* _tempuri__AnDonResponse::soap_dup(soap*) returns deep copy of _tempuri__AnDonResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tempuri__AnDonResponse::soap_del() deep deletes _tempuri__AnDonResponse data members, use only after _tempuri__AnDonResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _tempuri__AnDonResponse
{ public:
/// Element "AnDonResult" of XSD type xs:string.
    char*                                AnDonResult                    0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":AnDonCall
/// @brief "http://tempuri.org/":AnDonCall is a complexType.
///
/// class _tempuri__AnDonCall operations:
/// - _tempuri__AnDonCall* soap_new__tempuri__AnDonCall(soap*) allocate and default initialize
/// - _tempuri__AnDonCall* soap_new__tempuri__AnDonCall(soap*, int num) allocate array and default initialize values
/// - _tempuri__AnDonCall* soap_new_req__tempuri__AnDonCall(soap*, ...) allocate, set required members
/// - _tempuri__AnDonCall* soap_new_set__tempuri__AnDonCall(soap*, ...) allocate, set all public members
/// - _tempuri__AnDonCall::soap_default(soap*) default initialize members
/// - int soap_read__tempuri__AnDonCall(soap*, _tempuri__AnDonCall*) deserialize from a stream
/// - int soap_write__tempuri__AnDonCall(soap*, _tempuri__AnDonCall*) serialize to a stream
/// - _tempuri__AnDonCall* _tempuri__AnDonCall::soap_dup(soap*) returns deep copy of _tempuri__AnDonCall, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tempuri__AnDonCall::soap_del() deep deletes _tempuri__AnDonCall data members, use only after _tempuri__AnDonCall::soap_dup(NULL) (use soapcpp2 -Ed)
class _tempuri__AnDonCall
{ public:
/// Element "AnDonCallXml" of XSD type xs:string.
    char*                                AnDonCallXml                   0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":AnDonCallResponse
/// @brief "http://tempuri.org/":AnDonCallResponse is a complexType.
///
/// class _tempuri__AnDonCallResponse operations:
/// - _tempuri__AnDonCallResponse* soap_new__tempuri__AnDonCallResponse(soap*) allocate and default initialize
/// - _tempuri__AnDonCallResponse* soap_new__tempuri__AnDonCallResponse(soap*, int num) allocate array and default initialize values
/// - _tempuri__AnDonCallResponse* soap_new_req__tempuri__AnDonCallResponse(soap*, ...) allocate, set required members
/// - _tempuri__AnDonCallResponse* soap_new_set__tempuri__AnDonCallResponse(soap*, ...) allocate, set all public members
/// - _tempuri__AnDonCallResponse::soap_default(soap*) default initialize members
/// - int soap_read__tempuri__AnDonCallResponse(soap*, _tempuri__AnDonCallResponse*) deserialize from a stream
/// - int soap_write__tempuri__AnDonCallResponse(soap*, _tempuri__AnDonCallResponse*) serialize to a stream
/// - _tempuri__AnDonCallResponse* _tempuri__AnDonCallResponse::soap_dup(soap*) returns deep copy of _tempuri__AnDonCallResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tempuri__AnDonCallResponse::soap_del() deep deletes _tempuri__AnDonCallResponse data members, use only after _tempuri__AnDonCallResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _tempuri__AnDonCallResponse
{ public:
/// Element "AnDonCallResult" of XSD type xs:string.
    char*                                AnDonCallResult                0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":AnDonTest
/// @brief "http://tempuri.org/":AnDonTest is a complexType.
///
/// class _tempuri__AnDonTest operations:
/// - _tempuri__AnDonTest* soap_new__tempuri__AnDonTest(soap*) allocate and default initialize
/// - _tempuri__AnDonTest* soap_new__tempuri__AnDonTest(soap*, int num) allocate array and default initialize values
/// - _tempuri__AnDonTest* soap_new_req__tempuri__AnDonTest(soap*, ...) allocate, set required members
/// - _tempuri__AnDonTest* soap_new_set__tempuri__AnDonTest(soap*, ...) allocate, set all public members
/// - _tempuri__AnDonTest::soap_default(soap*) default initialize members
/// - int soap_read__tempuri__AnDonTest(soap*, _tempuri__AnDonTest*) deserialize from a stream
/// - int soap_write__tempuri__AnDonTest(soap*, _tempuri__AnDonTest*) serialize to a stream
/// - _tempuri__AnDonTest* _tempuri__AnDonTest::soap_dup(soap*) returns deep copy of _tempuri__AnDonTest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tempuri__AnDonTest::soap_del() deep deletes _tempuri__AnDonTest data members, use only after _tempuri__AnDonTest::soap_dup(NULL) (use soapcpp2 -Ed)
class _tempuri__AnDonTest
{ public:
/// Element "i" of XSD type xs:int.
    int                                  i                              1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":AnDonTestResponse
/// @brief "http://tempuri.org/":AnDonTestResponse is a complexType.
///
/// class _tempuri__AnDonTestResponse operations:
/// - _tempuri__AnDonTestResponse* soap_new__tempuri__AnDonTestResponse(soap*) allocate and default initialize
/// - _tempuri__AnDonTestResponse* soap_new__tempuri__AnDonTestResponse(soap*, int num) allocate array and default initialize values
/// - _tempuri__AnDonTestResponse* soap_new_req__tempuri__AnDonTestResponse(soap*, ...) allocate, set required members
/// - _tempuri__AnDonTestResponse* soap_new_set__tempuri__AnDonTestResponse(soap*, ...) allocate, set all public members
/// - _tempuri__AnDonTestResponse::soap_default(soap*) default initialize members
/// - int soap_read__tempuri__AnDonTestResponse(soap*, _tempuri__AnDonTestResponse*) deserialize from a stream
/// - int soap_write__tempuri__AnDonTestResponse(soap*, _tempuri__AnDonTestResponse*) serialize to a stream
/// - _tempuri__AnDonTestResponse* _tempuri__AnDonTestResponse::soap_dup(soap*) returns deep copy of _tempuri__AnDonTestResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tempuri__AnDonTestResponse::soap_del() deep deletes _tempuri__AnDonTestResponse data members, use only after _tempuri__AnDonTestResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _tempuri__AnDonTestResponse
{ public:
/// Element "AnDonTestResult" of XSD type xs:string.
    char*                                AnDonTestResult                0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":ItemsAdd
/// @brief "http://tempuri.org/":ItemsAdd is a complexType.
///
/// class _tempuri__ItemsAdd operations:
/// - _tempuri__ItemsAdd* soap_new__tempuri__ItemsAdd(soap*) allocate and default initialize
/// - _tempuri__ItemsAdd* soap_new__tempuri__ItemsAdd(soap*, int num) allocate array and default initialize values
/// - _tempuri__ItemsAdd* soap_new_req__tempuri__ItemsAdd(soap*, ...) allocate, set required members
/// - _tempuri__ItemsAdd* soap_new_set__tempuri__ItemsAdd(soap*, ...) allocate, set all public members
/// - _tempuri__ItemsAdd::soap_default(soap*) default initialize members
/// - int soap_read__tempuri__ItemsAdd(soap*, _tempuri__ItemsAdd*) deserialize from a stream
/// - int soap_write__tempuri__ItemsAdd(soap*, _tempuri__ItemsAdd*) serialize to a stream
/// - _tempuri__ItemsAdd* _tempuri__ItemsAdd::soap_dup(soap*) returns deep copy of _tempuri__ItemsAdd, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tempuri__ItemsAdd::soap_del() deep deletes _tempuri__ItemsAdd data members, use only after _tempuri__ItemsAdd::soap_dup(NULL) (use soapcpp2 -Ed)
class _tempuri__ItemsAdd
{ public:
/// Element "itemDocXml" of XSD type xs:string.
    char*                                itemDocXml                     0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":ItemsAddResponse
/// @brief "http://tempuri.org/":ItemsAddResponse is a complexType.
///
/// class _tempuri__ItemsAddResponse operations:
/// - _tempuri__ItemsAddResponse* soap_new__tempuri__ItemsAddResponse(soap*) allocate and default initialize
/// - _tempuri__ItemsAddResponse* soap_new__tempuri__ItemsAddResponse(soap*, int num) allocate array and default initialize values
/// - _tempuri__ItemsAddResponse* soap_new_req__tempuri__ItemsAddResponse(soap*, ...) allocate, set required members
/// - _tempuri__ItemsAddResponse* soap_new_set__tempuri__ItemsAddResponse(soap*, ...) allocate, set all public members
/// - _tempuri__ItemsAddResponse::soap_default(soap*) default initialize members
/// - int soap_read__tempuri__ItemsAddResponse(soap*, _tempuri__ItemsAddResponse*) deserialize from a stream
/// - int soap_write__tempuri__ItemsAddResponse(soap*, _tempuri__ItemsAddResponse*) serialize to a stream
/// - _tempuri__ItemsAddResponse* _tempuri__ItemsAddResponse::soap_dup(soap*) returns deep copy of _tempuri__ItemsAddResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tempuri__ItemsAddResponse::soap_del() deep deletes _tempuri__ItemsAddResponse data members, use only after _tempuri__ItemsAddResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _tempuri__ItemsAddResponse
{ public:
/// Element "ItemsAddResult" of XSD type xs:string.
    char*                                ItemsAddResult                 0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":DocAdd
/// @brief "http://tempuri.org/":DocAdd is a complexType.
///
/// class _tempuri__DocAdd operations:
/// - _tempuri__DocAdd* soap_new__tempuri__DocAdd(soap*) allocate and default initialize
/// - _tempuri__DocAdd* soap_new__tempuri__DocAdd(soap*, int num) allocate array and default initialize values
/// - _tempuri__DocAdd* soap_new_req__tempuri__DocAdd(soap*, ...) allocate, set required members
/// - _tempuri__DocAdd* soap_new_set__tempuri__DocAdd(soap*, ...) allocate, set all public members
/// - _tempuri__DocAdd::soap_default(soap*) default initialize members
/// - int soap_read__tempuri__DocAdd(soap*, _tempuri__DocAdd*) deserialize from a stream
/// - int soap_write__tempuri__DocAdd(soap*, _tempuri__DocAdd*) serialize to a stream
/// - _tempuri__DocAdd* _tempuri__DocAdd::soap_dup(soap*) returns deep copy of _tempuri__DocAdd, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tempuri__DocAdd::soap_del() deep deletes _tempuri__DocAdd data members, use only after _tempuri__DocAdd::soap_dup(NULL) (use soapcpp2 -Ed)
class _tempuri__DocAdd
{ public:
/// Element "DocTypeCode" of XSD type xs:string.
    char*                                DocTypeCode                    0;	///< Optional element.
/// Element "DocXmlMaster" of XSD type xs:string.
    char*                                DocXmlMaster                   0;	///< Optional element.
/// Element "DocXmlItems" of XSD type xs:string.
    char*                                DocXmlItems                    0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":DocAddResponse
/// @brief "http://tempuri.org/":DocAddResponse is a complexType.
///
/// class _tempuri__DocAddResponse operations:
/// - _tempuri__DocAddResponse* soap_new__tempuri__DocAddResponse(soap*) allocate and default initialize
/// - _tempuri__DocAddResponse* soap_new__tempuri__DocAddResponse(soap*, int num) allocate array and default initialize values
/// - _tempuri__DocAddResponse* soap_new_req__tempuri__DocAddResponse(soap*, ...) allocate, set required members
/// - _tempuri__DocAddResponse* soap_new_set__tempuri__DocAddResponse(soap*, ...) allocate, set all public members
/// - _tempuri__DocAddResponse::soap_default(soap*) default initialize members
/// - int soap_read__tempuri__DocAddResponse(soap*, _tempuri__DocAddResponse*) deserialize from a stream
/// - int soap_write__tempuri__DocAddResponse(soap*, _tempuri__DocAddResponse*) serialize to a stream
/// - _tempuri__DocAddResponse* _tempuri__DocAddResponse::soap_dup(soap*) returns deep copy of _tempuri__DocAddResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tempuri__DocAddResponse::soap_del() deep deletes _tempuri__DocAddResponse data members, use only after _tempuri__DocAddResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _tempuri__DocAddResponse
{ public:
/// Element "DocAddResult" of XSD type xs:string.
    char*                                DocAddResult                   0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":SetExMail
/// @brief "http://tempuri.org/":SetExMail is a complexType.
///
/// class _tempuri__SetExMail operations:
/// - _tempuri__SetExMail* soap_new__tempuri__SetExMail(soap*) allocate and default initialize
/// - _tempuri__SetExMail* soap_new__tempuri__SetExMail(soap*, int num) allocate array and default initialize values
/// - _tempuri__SetExMail* soap_new_req__tempuri__SetExMail(soap*, ...) allocate, set required members
/// - _tempuri__SetExMail* soap_new_set__tempuri__SetExMail(soap*, ...) allocate, set all public members
/// - _tempuri__SetExMail::soap_default(soap*) default initialize members
/// - int soap_read__tempuri__SetExMail(soap*, _tempuri__SetExMail*) deserialize from a stream
/// - int soap_write__tempuri__SetExMail(soap*, _tempuri__SetExMail*) serialize to a stream
/// - _tempuri__SetExMail* _tempuri__SetExMail::soap_dup(soap*) returns deep copy of _tempuri__SetExMail, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tempuri__SetExMail::soap_del() deep deletes _tempuri__SetExMail data members, use only after _tempuri__SetExMail::soap_dup(NULL) (use soapcpp2 -Ed)
class _tempuri__SetExMail
{ public:
/// Element "to" of XSD type xs:string.
    char*                                to                             0;	///< Optional element.
/// Element "title" of XSD type xs:string.
    char*                                title                          0;	///< Optional element.
/// Element "body" of XSD type xs:string.
    char*                                body                           0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":SetExMailResponse
/// @brief "http://tempuri.org/":SetExMailResponse is a complexType.
///
/// class _tempuri__SetExMailResponse operations:
/// - _tempuri__SetExMailResponse* soap_new__tempuri__SetExMailResponse(soap*) allocate and default initialize
/// - _tempuri__SetExMailResponse* soap_new__tempuri__SetExMailResponse(soap*, int num) allocate array and default initialize values
/// - _tempuri__SetExMailResponse* soap_new_req__tempuri__SetExMailResponse(soap*, ...) allocate, set required members
/// - _tempuri__SetExMailResponse* soap_new_set__tempuri__SetExMailResponse(soap*, ...) allocate, set all public members
/// - _tempuri__SetExMailResponse::soap_default(soap*) default initialize members
/// - int soap_read__tempuri__SetExMailResponse(soap*, _tempuri__SetExMailResponse*) deserialize from a stream
/// - int soap_write__tempuri__SetExMailResponse(soap*, _tempuri__SetExMailResponse*) serialize to a stream
/// - _tempuri__SetExMailResponse* _tempuri__SetExMailResponse::soap_dup(soap*) returns deep copy of _tempuri__SetExMailResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tempuri__SetExMailResponse::soap_del() deep deletes _tempuri__SetExMailResponse data members, use only after _tempuri__SetExMailResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _tempuri__SetExMailResponse
{ public:
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":GetDept
/// @brief "http://tempuri.org/":GetDept is a complexType.
///
/// class _tempuri__GetDept operations:
/// - _tempuri__GetDept* soap_new__tempuri__GetDept(soap*) allocate and default initialize
/// - _tempuri__GetDept* soap_new__tempuri__GetDept(soap*, int num) allocate array and default initialize values
/// - _tempuri__GetDept* soap_new_req__tempuri__GetDept(soap*, ...) allocate, set required members
/// - _tempuri__GetDept* soap_new_set__tempuri__GetDept(soap*, ...) allocate, set all public members
/// - _tempuri__GetDept::soap_default(soap*) default initialize members
/// - int soap_read__tempuri__GetDept(soap*, _tempuri__GetDept*) deserialize from a stream
/// - int soap_write__tempuri__GetDept(soap*, _tempuri__GetDept*) serialize to a stream
/// - _tempuri__GetDept* _tempuri__GetDept::soap_dup(soap*) returns deep copy of _tempuri__GetDept, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tempuri__GetDept::soap_del() deep deletes _tempuri__GetDept data members, use only after _tempuri__GetDept::soap_dup(NULL) (use soapcpp2 -Ed)
class _tempuri__GetDept
{ public:
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":GetDeptResponse
/// @brief "http://tempuri.org/":GetDeptResponse is a complexType.
///
/// class _tempuri__GetDeptResponse operations:
/// - _tempuri__GetDeptResponse* soap_new__tempuri__GetDeptResponse(soap*) allocate and default initialize
/// - _tempuri__GetDeptResponse* soap_new__tempuri__GetDeptResponse(soap*, int num) allocate array and default initialize values
/// - _tempuri__GetDeptResponse* soap_new_req__tempuri__GetDeptResponse(soap*, ...) allocate, set required members
/// - _tempuri__GetDeptResponse* soap_new_set__tempuri__GetDeptResponse(soap*, ...) allocate, set all public members
/// - _tempuri__GetDeptResponse::soap_default(soap*) default initialize members
/// - int soap_read__tempuri__GetDeptResponse(soap*, _tempuri__GetDeptResponse*) deserialize from a stream
/// - int soap_write__tempuri__GetDeptResponse(soap*, _tempuri__GetDeptResponse*) serialize to a stream
/// - _tempuri__GetDeptResponse* _tempuri__GetDeptResponse::soap_dup(soap*) returns deep copy of _tempuri__GetDeptResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tempuri__GetDeptResponse::soap_del() deep deletes _tempuri__GetDeptResponse data members, use only after _tempuri__GetDeptResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _tempuri__GetDeptResponse
{ public:
/// Element "GetDeptResult" of XSD type xs:string.
    char*                                GetDeptResult                  0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":GetPower
/// @brief "http://tempuri.org/":GetPower is a complexType.
///
/// class _tempuri__GetPower operations:
/// - _tempuri__GetPower* soap_new__tempuri__GetPower(soap*) allocate and default initialize
/// - _tempuri__GetPower* soap_new__tempuri__GetPower(soap*, int num) allocate array and default initialize values
/// - _tempuri__GetPower* soap_new_req__tempuri__GetPower(soap*, ...) allocate, set required members
/// - _tempuri__GetPower* soap_new_set__tempuri__GetPower(soap*, ...) allocate, set all public members
/// - _tempuri__GetPower::soap_default(soap*) default initialize members
/// - int soap_read__tempuri__GetPower(soap*, _tempuri__GetPower*) deserialize from a stream
/// - int soap_write__tempuri__GetPower(soap*, _tempuri__GetPower*) serialize to a stream
/// - _tempuri__GetPower* _tempuri__GetPower::soap_dup(soap*) returns deep copy of _tempuri__GetPower, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tempuri__GetPower::soap_del() deep deletes _tempuri__GetPower data members, use only after _tempuri__GetPower::soap_dup(NULL) (use soapcpp2 -Ed)
class _tempuri__GetPower
{ public:
/// Element "DeptID" of XSD type xs:string.
    char*                                DeptID                         0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":GetPowerResponse
/// @brief "http://tempuri.org/":GetPowerResponse is a complexType.
///
/// class _tempuri__GetPowerResponse operations:
/// - _tempuri__GetPowerResponse* soap_new__tempuri__GetPowerResponse(soap*) allocate and default initialize
/// - _tempuri__GetPowerResponse* soap_new__tempuri__GetPowerResponse(soap*, int num) allocate array and default initialize values
/// - _tempuri__GetPowerResponse* soap_new_req__tempuri__GetPowerResponse(soap*, ...) allocate, set required members
/// - _tempuri__GetPowerResponse* soap_new_set__tempuri__GetPowerResponse(soap*, ...) allocate, set all public members
/// - _tempuri__GetPowerResponse::soap_default(soap*) default initialize members
/// - int soap_read__tempuri__GetPowerResponse(soap*, _tempuri__GetPowerResponse*) deserialize from a stream
/// - int soap_write__tempuri__GetPowerResponse(soap*, _tempuri__GetPowerResponse*) serialize to a stream
/// - _tempuri__GetPowerResponse* _tempuri__GetPowerResponse::soap_dup(soap*) returns deep copy of _tempuri__GetPowerResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tempuri__GetPowerResponse::soap_del() deep deletes _tempuri__GetPowerResponse data members, use only after _tempuri__GetPowerResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _tempuri__GetPowerResponse
{ public:
/// Element "GetPowerResult" of XSD type xs:string.
    char*                                GetPowerResult                 0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":Login
/// @brief "http://tempuri.org/":Login is a complexType.
///
/// class _tempuri__Login operations:
/// - _tempuri__Login* soap_new__tempuri__Login(soap*) allocate and default initialize
/// - _tempuri__Login* soap_new__tempuri__Login(soap*, int num) allocate array and default initialize values
/// - _tempuri__Login* soap_new_req__tempuri__Login(soap*, ...) allocate, set required members
/// - _tempuri__Login* soap_new_set__tempuri__Login(soap*, ...) allocate, set all public members
/// - _tempuri__Login::soap_default(soap*) default initialize members
/// - int soap_read__tempuri__Login(soap*, _tempuri__Login*) deserialize from a stream
/// - int soap_write__tempuri__Login(soap*, _tempuri__Login*) serialize to a stream
/// - _tempuri__Login* _tempuri__Login::soap_dup(soap*) returns deep copy of _tempuri__Login, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tempuri__Login::soap_del() deep deletes _tempuri__Login data members, use only after _tempuri__Login::soap_dup(NULL) (use soapcpp2 -Ed)
class _tempuri__Login
{ public:
/// Element "Role" of XSD type xs:string.
    char*                                Role                           0;	///< Optional element.
/// Element "UserName" of XSD type xs:string.
    char*                                UserName                       0;	///< Optional element.
/// Element "UserPwd" of XSD type xs:string.
    char*                                UserPwd                        0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":LoginResponse
/// @brief "http://tempuri.org/":LoginResponse is a complexType.
///
/// class _tempuri__LoginResponse operations:
/// - _tempuri__LoginResponse* soap_new__tempuri__LoginResponse(soap*) allocate and default initialize
/// - _tempuri__LoginResponse* soap_new__tempuri__LoginResponse(soap*, int num) allocate array and default initialize values
/// - _tempuri__LoginResponse* soap_new_req__tempuri__LoginResponse(soap*, ...) allocate, set required members
/// - _tempuri__LoginResponse* soap_new_set__tempuri__LoginResponse(soap*, ...) allocate, set all public members
/// - _tempuri__LoginResponse::soap_default(soap*) default initialize members
/// - int soap_read__tempuri__LoginResponse(soap*, _tempuri__LoginResponse*) deserialize from a stream
/// - int soap_write__tempuri__LoginResponse(soap*, _tempuri__LoginResponse*) serialize to a stream
/// - _tempuri__LoginResponse* _tempuri__LoginResponse::soap_dup(soap*) returns deep copy of _tempuri__LoginResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tempuri__LoginResponse::soap_del() deep deletes _tempuri__LoginResponse data members, use only after _tempuri__LoginResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _tempuri__LoginResponse
{ public:
/// Element "LoginResult" of XSD type xs:string.
    char*                                LoginResult                    0;	///< Optional element.
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://tempuri.org/":string of XSD type xs:string.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/

// This service supports SOAP 1.2 namespaces:
#import "soap12.h"

//gsoap tempuri service name:	MESServiceSoap 
//gsoap tempuri service type:	MESServiceSoap 
//gsoap tempuri service port:	http://10.1.1.13:8001/MESService.asmx 
//gsoap tempuri service namespace:	http://tempuri.org/ 
//gsoap tempuri service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage Service Definitions

@section Service_bindings Service Bindings

  - @ref MESServiceSoap

@section Service_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page MESServiceSoap Binding "MESServiceSoap"

@section MESServiceSoap_operations Operations of Binding "MESServiceSoap"

  - @ref __tempuri__GetDate

  - @ref __tempuri__GetDocCode

  - @ref __tempuri__ToolingTimes

  - @ref __tempuri__WorkOrder

  - @ref __tempuri__LineInventory

  - @ref __tempuri__LineInventoryUpdate

  - @ref __tempuri__LineInventoryReturn

  - @ref __tempuri__AnDon

  - @ref __tempuri__AnDonCall

  - @ref __tempuri__AnDonTest

  - @ref __tempuri__ItemsAdd

  - @ref __tempuri__DocAdd

  - @ref __tempuri__SetExMail

  - @ref __tempuri__GetDept

  - @ref __tempuri__GetPower

  - @ref __tempuri__Login

  - @ref __tempuri__GetDate_

  - @ref __tempuri__GetDocCode_

  - @ref __tempuri__ToolingTimes_

  - @ref __tempuri__WorkOrder_

  - @ref __tempuri__LineInventory_

  - @ref __tempuri__LineInventoryUpdate_

  - @ref __tempuri__LineInventoryReturn_

  - @ref __tempuri__AnDon_

  - @ref __tempuri__AnDonCall_

  - @ref __tempuri__AnDonTest_

  - @ref __tempuri__ItemsAdd_

  - @ref __tempuri__DocAdd_

  - @ref __tempuri__SetExMail_

  - @ref __tempuri__GetDept_

  - @ref __tempuri__GetPower_

  - @ref __tempuri__Login_

@section MESServiceSoap_ports Default endpoints of Binding "MESServiceSoap"

  - http://10.1.1.13:8001/MESService.asmx

@note Multiple service bindings collected as one, use wsdl2h option -Nname to produce a separate service for each binding


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   MESServiceSoap                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tempuri__GetDate                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__tempuri__GetDate" of service binding "MESServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.1.1.13:8001/MESService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/GetDate"

  - Addressing input action: "http://tempuri.org/GetDate"

  - Addressing output action: "http://tempuri.org/GetDateResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tempuri__GetDate(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tempuri__GetDate*                  tempuri__GetDate,
    // output parameters:
    _tempuri__GetDateResponse          &tempuri__GetDateResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tempuri__GetDate(
    struct soap *soap,
    // input parameters:
    _tempuri__GetDate*                  tempuri__GetDate,
    // output parameters:
    _tempuri__GetDateResponse          &tempuri__GetDateResponse
  );
@endcode

C++ proxy class (defined in soapMESServiceSoapProxy.h generated with soapcpp2):
@code
  class MESServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapMESServiceSoapService.h generated with soapcpp2):
@code
  class MESServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tempuri service method-protocol:	GetDate SOAP
//gsoap tempuri service method-style:	GetDate document
//gsoap tempuri service method-encoding:	GetDate literal
//gsoap tempuri service method-input-action:	GetDate http://tempuri.org/GetDate
//gsoap tempuri service method-output-action:	GetDate http://tempuri.org/GetDateResponse
int __tempuri__GetDate(
    _tempuri__GetDate*                  tempuri__GetDate,	///< Input parameter
    _tempuri__GetDateResponse          &tempuri__GetDateResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tempuri__GetDocCode                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__tempuri__GetDocCode" of service binding "MESServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.1.1.13:8001/MESService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/GetDocCode"

  - Addressing input action: "http://tempuri.org/GetDocCode"

  - Addressing output action: "http://tempuri.org/GetDocCodeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tempuri__GetDocCode(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tempuri__GetDocCode*               tempuri__GetDocCode,
    // output parameters:
    _tempuri__GetDocCodeResponse       &tempuri__GetDocCodeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tempuri__GetDocCode(
    struct soap *soap,
    // input parameters:
    _tempuri__GetDocCode*               tempuri__GetDocCode,
    // output parameters:
    _tempuri__GetDocCodeResponse       &tempuri__GetDocCodeResponse
  );
@endcode

C++ proxy class (defined in soapMESServiceSoapProxy.h generated with soapcpp2):
@code
  class MESServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapMESServiceSoapService.h generated with soapcpp2):
@code
  class MESServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tempuri service method-protocol:	GetDocCode SOAP
//gsoap tempuri service method-style:	GetDocCode document
//gsoap tempuri service method-encoding:	GetDocCode literal
//gsoap tempuri service method-input-action:	GetDocCode http://tempuri.org/GetDocCode
//gsoap tempuri service method-output-action:	GetDocCode http://tempuri.org/GetDocCodeResponse
int __tempuri__GetDocCode(
    _tempuri__GetDocCode*               tempuri__GetDocCode,	///< Input parameter
    _tempuri__GetDocCodeResponse       &tempuri__GetDocCodeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tempuri__ToolingTimes                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__tempuri__ToolingTimes" of service binding "MESServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.1.1.13:8001/MESService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/ToolingTimes"

  - Addressing input action: "http://tempuri.org/ToolingTimes"

  - Addressing output action: "http://tempuri.org/ToolingTimesResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tempuri__ToolingTimes(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tempuri__ToolingTimes*             tempuri__ToolingTimes,
    // output parameters:
    _tempuri__ToolingTimesResponse     &tempuri__ToolingTimesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tempuri__ToolingTimes(
    struct soap *soap,
    // input parameters:
    _tempuri__ToolingTimes*             tempuri__ToolingTimes,
    // output parameters:
    _tempuri__ToolingTimesResponse     &tempuri__ToolingTimesResponse
  );
@endcode

C++ proxy class (defined in soapMESServiceSoapProxy.h generated with soapcpp2):
@code
  class MESServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapMESServiceSoapService.h generated with soapcpp2):
@code
  class MESServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tempuri service method-protocol:	ToolingTimes SOAP
//gsoap tempuri service method-style:	ToolingTimes document
//gsoap tempuri service method-encoding:	ToolingTimes literal
//gsoap tempuri service method-input-action:	ToolingTimes http://tempuri.org/ToolingTimes
//gsoap tempuri service method-output-action:	ToolingTimes http://tempuri.org/ToolingTimesResponse
int __tempuri__ToolingTimes(
    _tempuri__ToolingTimes*             tempuri__ToolingTimes,	///< Input parameter
    _tempuri__ToolingTimesResponse     &tempuri__ToolingTimesResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tempuri__WorkOrder                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__tempuri__WorkOrder" of service binding "MESServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.1.1.13:8001/MESService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/WorkOrder"

  - Addressing input action: "http://tempuri.org/WorkOrder"

  - Addressing output action: "http://tempuri.org/WorkOrderResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tempuri__WorkOrder(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tempuri__WorkOrder*                tempuri__WorkOrder,
    // output parameters:
    _tempuri__WorkOrderResponse        &tempuri__WorkOrderResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tempuri__WorkOrder(
    struct soap *soap,
    // input parameters:
    _tempuri__WorkOrder*                tempuri__WorkOrder,
    // output parameters:
    _tempuri__WorkOrderResponse        &tempuri__WorkOrderResponse
  );
@endcode

C++ proxy class (defined in soapMESServiceSoapProxy.h generated with soapcpp2):
@code
  class MESServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapMESServiceSoapService.h generated with soapcpp2):
@code
  class MESServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tempuri service method-protocol:	WorkOrder SOAP
//gsoap tempuri service method-style:	WorkOrder document
//gsoap tempuri service method-encoding:	WorkOrder literal
//gsoap tempuri service method-input-action:	WorkOrder http://tempuri.org/WorkOrder
//gsoap tempuri service method-output-action:	WorkOrder http://tempuri.org/WorkOrderResponse
int __tempuri__WorkOrder(
    _tempuri__WorkOrder*                tempuri__WorkOrder,	///< Input parameter
    _tempuri__WorkOrderResponse        &tempuri__WorkOrderResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tempuri__LineInventory                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__tempuri__LineInventory" of service binding "MESServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.1.1.13:8001/MESService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/LineInventory"

  - Addressing input action: "http://tempuri.org/LineInventory"

  - Addressing output action: "http://tempuri.org/LineInventoryResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tempuri__LineInventory(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tempuri__LineInventory*            tempuri__LineInventory,
    // output parameters:
    _tempuri__LineInventoryResponse    &tempuri__LineInventoryResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tempuri__LineInventory(
    struct soap *soap,
    // input parameters:
    _tempuri__LineInventory*            tempuri__LineInventory,
    // output parameters:
    _tempuri__LineInventoryResponse    &tempuri__LineInventoryResponse
  );
@endcode

C++ proxy class (defined in soapMESServiceSoapProxy.h generated with soapcpp2):
@code
  class MESServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapMESServiceSoapService.h generated with soapcpp2):
@code
  class MESServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tempuri service method-protocol:	LineInventory SOAP
//gsoap tempuri service method-style:	LineInventory document
//gsoap tempuri service method-encoding:	LineInventory literal
//gsoap tempuri service method-input-action:	LineInventory http://tempuri.org/LineInventory
//gsoap tempuri service method-output-action:	LineInventory http://tempuri.org/LineInventoryResponse
int __tempuri__LineInventory(
    _tempuri__LineInventory*            tempuri__LineInventory,	///< Input parameter
    _tempuri__LineInventoryResponse    &tempuri__LineInventoryResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tempuri__LineInventoryUpdate                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "__tempuri__LineInventoryUpdate" of service binding "MESServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.1.1.13:8001/MESService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/LineInventoryUpdate"

  - Addressing input action: "http://tempuri.org/LineInventoryUpdate"

  - Addressing output action: "http://tempuri.org/LineInventoryUpdateResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tempuri__LineInventoryUpdate(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tempuri__LineInventoryUpdate*      tempuri__LineInventoryUpdate,
    // output parameters:
    _tempuri__LineInventoryUpdateResponse&tempuri__LineInventoryUpdateResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tempuri__LineInventoryUpdate(
    struct soap *soap,
    // input parameters:
    _tempuri__LineInventoryUpdate*      tempuri__LineInventoryUpdate,
    // output parameters:
    _tempuri__LineInventoryUpdateResponse&tempuri__LineInventoryUpdateResponse
  );
@endcode

C++ proxy class (defined in soapMESServiceSoapProxy.h generated with soapcpp2):
@code
  class MESServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapMESServiceSoapService.h generated with soapcpp2):
@code
  class MESServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tempuri service method-protocol:	LineInventoryUpdate SOAP
//gsoap tempuri service method-style:	LineInventoryUpdate document
//gsoap tempuri service method-encoding:	LineInventoryUpdate literal
//gsoap tempuri service method-input-action:	LineInventoryUpdate http://tempuri.org/LineInventoryUpdate
//gsoap tempuri service method-output-action:	LineInventoryUpdate http://tempuri.org/LineInventoryUpdateResponse
int __tempuri__LineInventoryUpdate(
    _tempuri__LineInventoryUpdate*      tempuri__LineInventoryUpdate,	///< Input parameter
    _tempuri__LineInventoryUpdateResponse&tempuri__LineInventoryUpdateResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tempuri__LineInventoryReturn                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "__tempuri__LineInventoryReturn" of service binding "MESServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.1.1.13:8001/MESService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/LineInventoryReturn"

  - Addressing input action: "http://tempuri.org/LineInventoryReturn"

  - Addressing output action: "http://tempuri.org/LineInventoryReturnResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tempuri__LineInventoryReturn(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tempuri__LineInventoryReturn*      tempuri__LineInventoryReturn,
    // output parameters:
    _tempuri__LineInventoryReturnResponse&tempuri__LineInventoryReturnResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tempuri__LineInventoryReturn(
    struct soap *soap,
    // input parameters:
    _tempuri__LineInventoryReturn*      tempuri__LineInventoryReturn,
    // output parameters:
    _tempuri__LineInventoryReturnResponse&tempuri__LineInventoryReturnResponse
  );
@endcode

C++ proxy class (defined in soapMESServiceSoapProxy.h generated with soapcpp2):
@code
  class MESServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapMESServiceSoapService.h generated with soapcpp2):
@code
  class MESServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tempuri service method-protocol:	LineInventoryReturn SOAP
//gsoap tempuri service method-style:	LineInventoryReturn document
//gsoap tempuri service method-encoding:	LineInventoryReturn literal
//gsoap tempuri service method-input-action:	LineInventoryReturn http://tempuri.org/LineInventoryReturn
//gsoap tempuri service method-output-action:	LineInventoryReturn http://tempuri.org/LineInventoryReturnResponse
int __tempuri__LineInventoryReturn(
    _tempuri__LineInventoryReturn*      tempuri__LineInventoryReturn,	///< Input parameter
    _tempuri__LineInventoryReturnResponse&tempuri__LineInventoryReturnResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tempuri__AnDon                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__tempuri__AnDon" of service binding "MESServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.1.1.13:8001/MESService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/AnDon"

  - Addressing input action: "http://tempuri.org/AnDon"

  - Addressing output action: "http://tempuri.org/AnDonResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tempuri__AnDon(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tempuri__AnDon*                    tempuri__AnDon,
    // output parameters:
    _tempuri__AnDonResponse            &tempuri__AnDonResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tempuri__AnDon(
    struct soap *soap,
    // input parameters:
    _tempuri__AnDon*                    tempuri__AnDon,
    // output parameters:
    _tempuri__AnDonResponse            &tempuri__AnDonResponse
  );
@endcode

C++ proxy class (defined in soapMESServiceSoapProxy.h generated with soapcpp2):
@code
  class MESServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapMESServiceSoapService.h generated with soapcpp2):
@code
  class MESServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tempuri service method-protocol:	AnDon SOAP
//gsoap tempuri service method-style:	AnDon document
//gsoap tempuri service method-encoding:	AnDon literal
//gsoap tempuri service method-input-action:	AnDon http://tempuri.org/AnDon
//gsoap tempuri service method-output-action:	AnDon http://tempuri.org/AnDonResponse
int __tempuri__AnDon(
    _tempuri__AnDon*                    tempuri__AnDon,	///< Input parameter
    _tempuri__AnDonResponse            &tempuri__AnDonResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tempuri__AnDonCall                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__tempuri__AnDonCall" of service binding "MESServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.1.1.13:8001/MESService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/AnDonCall"

  - Addressing input action: "http://tempuri.org/AnDonCall"

  - Addressing output action: "http://tempuri.org/AnDonCallResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tempuri__AnDonCall(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tempuri__AnDonCall*                tempuri__AnDonCall,
    // output parameters:
    _tempuri__AnDonCallResponse        &tempuri__AnDonCallResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tempuri__AnDonCall(
    struct soap *soap,
    // input parameters:
    _tempuri__AnDonCall*                tempuri__AnDonCall,
    // output parameters:
    _tempuri__AnDonCallResponse        &tempuri__AnDonCallResponse
  );
@endcode

C++ proxy class (defined in soapMESServiceSoapProxy.h generated with soapcpp2):
@code
  class MESServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapMESServiceSoapService.h generated with soapcpp2):
@code
  class MESServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tempuri service method-protocol:	AnDonCall SOAP
//gsoap tempuri service method-style:	AnDonCall document
//gsoap tempuri service method-encoding:	AnDonCall literal
//gsoap tempuri service method-input-action:	AnDonCall http://tempuri.org/AnDonCall
//gsoap tempuri service method-output-action:	AnDonCall http://tempuri.org/AnDonCallResponse
int __tempuri__AnDonCall(
    _tempuri__AnDonCall*                tempuri__AnDonCall,	///< Input parameter
    _tempuri__AnDonCallResponse        &tempuri__AnDonCallResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tempuri__AnDonTest                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__tempuri__AnDonTest" of service binding "MESServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.1.1.13:8001/MESService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/AnDonTest"

  - Addressing input action: "http://tempuri.org/AnDonTest"

  - Addressing output action: "http://tempuri.org/AnDonTestResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tempuri__AnDonTest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tempuri__AnDonTest*                tempuri__AnDonTest,
    // output parameters:
    _tempuri__AnDonTestResponse        &tempuri__AnDonTestResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tempuri__AnDonTest(
    struct soap *soap,
    // input parameters:
    _tempuri__AnDonTest*                tempuri__AnDonTest,
    // output parameters:
    _tempuri__AnDonTestResponse        &tempuri__AnDonTestResponse
  );
@endcode

C++ proxy class (defined in soapMESServiceSoapProxy.h generated with soapcpp2):
@code
  class MESServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapMESServiceSoapService.h generated with soapcpp2):
@code
  class MESServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tempuri service method-protocol:	AnDonTest SOAP
//gsoap tempuri service method-style:	AnDonTest document
//gsoap tempuri service method-encoding:	AnDonTest literal
//gsoap tempuri service method-input-action:	AnDonTest http://tempuri.org/AnDonTest
//gsoap tempuri service method-output-action:	AnDonTest http://tempuri.org/AnDonTestResponse
int __tempuri__AnDonTest(
    _tempuri__AnDonTest*                tempuri__AnDonTest,	///< Input parameter
    _tempuri__AnDonTestResponse        &tempuri__AnDonTestResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tempuri__ItemsAdd                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__tempuri__ItemsAdd" of service binding "MESServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.1.1.13:8001/MESService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/ItemsAdd"

  - Addressing input action: "http://tempuri.org/ItemsAdd"

  - Addressing output action: "http://tempuri.org/ItemsAddResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tempuri__ItemsAdd(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tempuri__ItemsAdd*                 tempuri__ItemsAdd,
    // output parameters:
    _tempuri__ItemsAddResponse         &tempuri__ItemsAddResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tempuri__ItemsAdd(
    struct soap *soap,
    // input parameters:
    _tempuri__ItemsAdd*                 tempuri__ItemsAdd,
    // output parameters:
    _tempuri__ItemsAddResponse         &tempuri__ItemsAddResponse
  );
@endcode

C++ proxy class (defined in soapMESServiceSoapProxy.h generated with soapcpp2):
@code
  class MESServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapMESServiceSoapService.h generated with soapcpp2):
@code
  class MESServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tempuri service method-protocol:	ItemsAdd SOAP
//gsoap tempuri service method-style:	ItemsAdd document
//gsoap tempuri service method-encoding:	ItemsAdd literal
//gsoap tempuri service method-input-action:	ItemsAdd http://tempuri.org/ItemsAdd
//gsoap tempuri service method-output-action:	ItemsAdd http://tempuri.org/ItemsAddResponse
int __tempuri__ItemsAdd(
    _tempuri__ItemsAdd*                 tempuri__ItemsAdd,	///< Input parameter
    _tempuri__ItemsAddResponse         &tempuri__ItemsAddResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tempuri__DocAdd                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__tempuri__DocAdd" of service binding "MESServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.1.1.13:8001/MESService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/DocAdd"

  - Addressing input action: "http://tempuri.org/DocAdd"

  - Addressing output action: "http://tempuri.org/DocAddResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tempuri__DocAdd(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tempuri__DocAdd*                   tempuri__DocAdd,
    // output parameters:
    _tempuri__DocAddResponse           &tempuri__DocAddResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tempuri__DocAdd(
    struct soap *soap,
    // input parameters:
    _tempuri__DocAdd*                   tempuri__DocAdd,
    // output parameters:
    _tempuri__DocAddResponse           &tempuri__DocAddResponse
  );
@endcode

C++ proxy class (defined in soapMESServiceSoapProxy.h generated with soapcpp2):
@code
  class MESServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapMESServiceSoapService.h generated with soapcpp2):
@code
  class MESServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tempuri service method-protocol:	DocAdd SOAP
//gsoap tempuri service method-style:	DocAdd document
//gsoap tempuri service method-encoding:	DocAdd literal
//gsoap tempuri service method-input-action:	DocAdd http://tempuri.org/DocAdd
//gsoap tempuri service method-output-action:	DocAdd http://tempuri.org/DocAddResponse
int __tempuri__DocAdd(
    _tempuri__DocAdd*                   tempuri__DocAdd,	///< Input parameter
    _tempuri__DocAddResponse           &tempuri__DocAddResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tempuri__SetExMail                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__tempuri__SetExMail" of service binding "MESServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.1.1.13:8001/MESService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/SetExMail"

  - Addressing input action: "http://tempuri.org/SetExMail"

  - Addressing output action: "http://tempuri.org/SetExMailResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tempuri__SetExMail(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tempuri__SetExMail*                tempuri__SetExMail,
    // output parameters:
    _tempuri__SetExMailResponse        &tempuri__SetExMailResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tempuri__SetExMail(
    struct soap *soap,
    // input parameters:
    _tempuri__SetExMail*                tempuri__SetExMail,
    // output parameters:
    _tempuri__SetExMailResponse        &tempuri__SetExMailResponse
  );
@endcode

C++ proxy class (defined in soapMESServiceSoapProxy.h generated with soapcpp2):
@code
  class MESServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapMESServiceSoapService.h generated with soapcpp2):
@code
  class MESServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tempuri service method-protocol:	SetExMail SOAP
//gsoap tempuri service method-style:	SetExMail document
//gsoap tempuri service method-encoding:	SetExMail literal
//gsoap tempuri service method-input-action:	SetExMail http://tempuri.org/SetExMail
//gsoap tempuri service method-output-action:	SetExMail http://tempuri.org/SetExMailResponse
int __tempuri__SetExMail(
    _tempuri__SetExMail*                tempuri__SetExMail,	///< Input parameter
    _tempuri__SetExMailResponse        &tempuri__SetExMailResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tempuri__GetDept                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__tempuri__GetDept" of service binding "MESServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.1.1.13:8001/MESService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/GetDept"

  - Addressing input action: "http://tempuri.org/GetDept"

  - Addressing output action: "http://tempuri.org/GetDeptResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tempuri__GetDept(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tempuri__GetDept*                  tempuri__GetDept,
    // output parameters:
    _tempuri__GetDeptResponse          &tempuri__GetDeptResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tempuri__GetDept(
    struct soap *soap,
    // input parameters:
    _tempuri__GetDept*                  tempuri__GetDept,
    // output parameters:
    _tempuri__GetDeptResponse          &tempuri__GetDeptResponse
  );
@endcode

C++ proxy class (defined in soapMESServiceSoapProxy.h generated with soapcpp2):
@code
  class MESServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapMESServiceSoapService.h generated with soapcpp2):
@code
  class MESServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tempuri service method-protocol:	GetDept SOAP
//gsoap tempuri service method-style:	GetDept document
//gsoap tempuri service method-encoding:	GetDept literal
//gsoap tempuri service method-input-action:	GetDept http://tempuri.org/GetDept
//gsoap tempuri service method-output-action:	GetDept http://tempuri.org/GetDeptResponse
int __tempuri__GetDept(
    _tempuri__GetDept*                  tempuri__GetDept,	///< Input parameter
    _tempuri__GetDeptResponse          &tempuri__GetDeptResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tempuri__GetPower                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__tempuri__GetPower" of service binding "MESServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.1.1.13:8001/MESService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/GetPower"

  - Addressing input action: "http://tempuri.org/GetPower"

  - Addressing output action: "http://tempuri.org/GetPowerResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tempuri__GetPower(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tempuri__GetPower*                 tempuri__GetPower,
    // output parameters:
    _tempuri__GetPowerResponse         &tempuri__GetPowerResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tempuri__GetPower(
    struct soap *soap,
    // input parameters:
    _tempuri__GetPower*                 tempuri__GetPower,
    // output parameters:
    _tempuri__GetPowerResponse         &tempuri__GetPowerResponse
  );
@endcode

C++ proxy class (defined in soapMESServiceSoapProxy.h generated with soapcpp2):
@code
  class MESServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapMESServiceSoapService.h generated with soapcpp2):
@code
  class MESServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tempuri service method-protocol:	GetPower SOAP
//gsoap tempuri service method-style:	GetPower document
//gsoap tempuri service method-encoding:	GetPower literal
//gsoap tempuri service method-input-action:	GetPower http://tempuri.org/GetPower
//gsoap tempuri service method-output-action:	GetPower http://tempuri.org/GetPowerResponse
int __tempuri__GetPower(
    _tempuri__GetPower*                 tempuri__GetPower,	///< Input parameter
    _tempuri__GetPowerResponse         &tempuri__GetPowerResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tempuri__Login                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__tempuri__Login" of service binding "MESServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.1.1.13:8001/MESService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/Login"

  - Addressing input action: "http://tempuri.org/Login"

  - Addressing output action: "http://tempuri.org/LoginResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tempuri__Login(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tempuri__Login*                    tempuri__Login,
    // output parameters:
    _tempuri__LoginResponse            &tempuri__LoginResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tempuri__Login(
    struct soap *soap,
    // input parameters:
    _tempuri__Login*                    tempuri__Login,
    // output parameters:
    _tempuri__LoginResponse            &tempuri__LoginResponse
  );
@endcode

C++ proxy class (defined in soapMESServiceSoapProxy.h generated with soapcpp2):
@code
  class MESServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapMESServiceSoapService.h generated with soapcpp2):
@code
  class MESServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tempuri service method-protocol:	Login SOAP
//gsoap tempuri service method-style:	Login document
//gsoap tempuri service method-encoding:	Login literal
//gsoap tempuri service method-input-action:	Login http://tempuri.org/Login
//gsoap tempuri service method-output-action:	Login http://tempuri.org/LoginResponse
int __tempuri__Login(
    _tempuri__Login*                    tempuri__Login,	///< Input parameter
    _tempuri__LoginResponse            &tempuri__LoginResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tempuri__GetDate_                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__tempuri__GetDate_" of service binding "MESServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.1.1.13:8001/MESService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/GetDate"

  - Addressing input action: "http://tempuri.org/GetDate"

  - Addressing output action: "http://tempuri.org/GetDateResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tempuri__GetDate_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tempuri__GetDate*                  tempuri__GetDate,
    // output parameters:
    _tempuri__GetDateResponse          &tempuri__GetDateResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tempuri__GetDate_(
    struct soap *soap,
    // input parameters:
    _tempuri__GetDate*                  tempuri__GetDate,
    // output parameters:
    _tempuri__GetDateResponse          &tempuri__GetDateResponse
  );
@endcode

C++ proxy class (defined in soapMESServiceSoapProxy.h generated with soapcpp2):
@code
  class MESServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapMESServiceSoapService.h generated with soapcpp2):
@code
  class MESServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tempuri service method-protocol:	GetDate_ SOAP
//gsoap tempuri service method-style:	GetDate_ document
//gsoap tempuri service method-encoding:	GetDate_ literal
//gsoap tempuri service method-input-action:	GetDate_ http://tempuri.org/GetDate
//gsoap tempuri service method-output-action:	GetDate_ http://tempuri.org/GetDateResponse
int __tempuri__GetDate_(
    _tempuri__GetDate*                  tempuri__GetDate,	///< Input parameter
    _tempuri__GetDateResponse          &tempuri__GetDateResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tempuri__GetDocCode_                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__tempuri__GetDocCode_" of service binding "MESServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.1.1.13:8001/MESService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/GetDocCode"

  - Addressing input action: "http://tempuri.org/GetDocCode"

  - Addressing output action: "http://tempuri.org/GetDocCodeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tempuri__GetDocCode_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tempuri__GetDocCode*               tempuri__GetDocCode,
    // output parameters:
    _tempuri__GetDocCodeResponse       &tempuri__GetDocCodeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tempuri__GetDocCode_(
    struct soap *soap,
    // input parameters:
    _tempuri__GetDocCode*               tempuri__GetDocCode,
    // output parameters:
    _tempuri__GetDocCodeResponse       &tempuri__GetDocCodeResponse
  );
@endcode

C++ proxy class (defined in soapMESServiceSoapProxy.h generated with soapcpp2):
@code
  class MESServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapMESServiceSoapService.h generated with soapcpp2):
@code
  class MESServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tempuri service method-protocol:	GetDocCode_ SOAP
//gsoap tempuri service method-style:	GetDocCode_ document
//gsoap tempuri service method-encoding:	GetDocCode_ literal
//gsoap tempuri service method-input-action:	GetDocCode_ http://tempuri.org/GetDocCode
//gsoap tempuri service method-output-action:	GetDocCode_ http://tempuri.org/GetDocCodeResponse
int __tempuri__GetDocCode_(
    _tempuri__GetDocCode*               tempuri__GetDocCode,	///< Input parameter
    _tempuri__GetDocCodeResponse       &tempuri__GetDocCodeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tempuri__ToolingTimes_                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__tempuri__ToolingTimes_" of service binding "MESServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.1.1.13:8001/MESService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/ToolingTimes"

  - Addressing input action: "http://tempuri.org/ToolingTimes"

  - Addressing output action: "http://tempuri.org/ToolingTimesResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tempuri__ToolingTimes_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tempuri__ToolingTimes*             tempuri__ToolingTimes,
    // output parameters:
    _tempuri__ToolingTimesResponse     &tempuri__ToolingTimesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tempuri__ToolingTimes_(
    struct soap *soap,
    // input parameters:
    _tempuri__ToolingTimes*             tempuri__ToolingTimes,
    // output parameters:
    _tempuri__ToolingTimesResponse     &tempuri__ToolingTimesResponse
  );
@endcode

C++ proxy class (defined in soapMESServiceSoapProxy.h generated with soapcpp2):
@code
  class MESServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapMESServiceSoapService.h generated with soapcpp2):
@code
  class MESServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tempuri service method-protocol:	ToolingTimes_ SOAP
//gsoap tempuri service method-style:	ToolingTimes_ document
//gsoap tempuri service method-encoding:	ToolingTimes_ literal
//gsoap tempuri service method-input-action:	ToolingTimes_ http://tempuri.org/ToolingTimes
//gsoap tempuri service method-output-action:	ToolingTimes_ http://tempuri.org/ToolingTimesResponse
int __tempuri__ToolingTimes_(
    _tempuri__ToolingTimes*             tempuri__ToolingTimes,	///< Input parameter
    _tempuri__ToolingTimesResponse     &tempuri__ToolingTimesResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tempuri__WorkOrder_                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__tempuri__WorkOrder_" of service binding "MESServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.1.1.13:8001/MESService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/WorkOrder"

  - Addressing input action: "http://tempuri.org/WorkOrder"

  - Addressing output action: "http://tempuri.org/WorkOrderResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tempuri__WorkOrder_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tempuri__WorkOrder*                tempuri__WorkOrder,
    // output parameters:
    _tempuri__WorkOrderResponse        &tempuri__WorkOrderResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tempuri__WorkOrder_(
    struct soap *soap,
    // input parameters:
    _tempuri__WorkOrder*                tempuri__WorkOrder,
    // output parameters:
    _tempuri__WorkOrderResponse        &tempuri__WorkOrderResponse
  );
@endcode

C++ proxy class (defined in soapMESServiceSoapProxy.h generated with soapcpp2):
@code
  class MESServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapMESServiceSoapService.h generated with soapcpp2):
@code
  class MESServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tempuri service method-protocol:	WorkOrder_ SOAP
//gsoap tempuri service method-style:	WorkOrder_ document
//gsoap tempuri service method-encoding:	WorkOrder_ literal
//gsoap tempuri service method-input-action:	WorkOrder_ http://tempuri.org/WorkOrder
//gsoap tempuri service method-output-action:	WorkOrder_ http://tempuri.org/WorkOrderResponse
int __tempuri__WorkOrder_(
    _tempuri__WorkOrder*                tempuri__WorkOrder,	///< Input parameter
    _tempuri__WorkOrderResponse        &tempuri__WorkOrderResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tempuri__LineInventory_                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__tempuri__LineInventory_" of service binding "MESServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.1.1.13:8001/MESService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/LineInventory"

  - Addressing input action: "http://tempuri.org/LineInventory"

  - Addressing output action: "http://tempuri.org/LineInventoryResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tempuri__LineInventory_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tempuri__LineInventory*            tempuri__LineInventory,
    // output parameters:
    _tempuri__LineInventoryResponse    &tempuri__LineInventoryResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tempuri__LineInventory_(
    struct soap *soap,
    // input parameters:
    _tempuri__LineInventory*            tempuri__LineInventory,
    // output parameters:
    _tempuri__LineInventoryResponse    &tempuri__LineInventoryResponse
  );
@endcode

C++ proxy class (defined in soapMESServiceSoapProxy.h generated with soapcpp2):
@code
  class MESServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapMESServiceSoapService.h generated with soapcpp2):
@code
  class MESServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tempuri service method-protocol:	LineInventory_ SOAP
//gsoap tempuri service method-style:	LineInventory_ document
//gsoap tempuri service method-encoding:	LineInventory_ literal
//gsoap tempuri service method-input-action:	LineInventory_ http://tempuri.org/LineInventory
//gsoap tempuri service method-output-action:	LineInventory_ http://tempuri.org/LineInventoryResponse
int __tempuri__LineInventory_(
    _tempuri__LineInventory*            tempuri__LineInventory,	///< Input parameter
    _tempuri__LineInventoryResponse    &tempuri__LineInventoryResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tempuri__LineInventoryUpdate_                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__tempuri__LineInventoryUpdate_" of service binding "MESServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.1.1.13:8001/MESService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/LineInventoryUpdate"

  - Addressing input action: "http://tempuri.org/LineInventoryUpdate"

  - Addressing output action: "http://tempuri.org/LineInventoryUpdateResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tempuri__LineInventoryUpdate_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tempuri__LineInventoryUpdate*      tempuri__LineInventoryUpdate,
    // output parameters:
    _tempuri__LineInventoryUpdateResponse&tempuri__LineInventoryUpdateResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tempuri__LineInventoryUpdate_(
    struct soap *soap,
    // input parameters:
    _tempuri__LineInventoryUpdate*      tempuri__LineInventoryUpdate,
    // output parameters:
    _tempuri__LineInventoryUpdateResponse&tempuri__LineInventoryUpdateResponse
  );
@endcode

C++ proxy class (defined in soapMESServiceSoapProxy.h generated with soapcpp2):
@code
  class MESServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapMESServiceSoapService.h generated with soapcpp2):
@code
  class MESServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tempuri service method-protocol:	LineInventoryUpdate_ SOAP
//gsoap tempuri service method-style:	LineInventoryUpdate_ document
//gsoap tempuri service method-encoding:	LineInventoryUpdate_ literal
//gsoap tempuri service method-input-action:	LineInventoryUpdate_ http://tempuri.org/LineInventoryUpdate
//gsoap tempuri service method-output-action:	LineInventoryUpdate_ http://tempuri.org/LineInventoryUpdateResponse
int __tempuri__LineInventoryUpdate_(
    _tempuri__LineInventoryUpdate*      tempuri__LineInventoryUpdate,	///< Input parameter
    _tempuri__LineInventoryUpdateResponse&tempuri__LineInventoryUpdateResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tempuri__LineInventoryReturn_                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__tempuri__LineInventoryReturn_" of service binding "MESServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.1.1.13:8001/MESService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/LineInventoryReturn"

  - Addressing input action: "http://tempuri.org/LineInventoryReturn"

  - Addressing output action: "http://tempuri.org/LineInventoryReturnResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tempuri__LineInventoryReturn_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tempuri__LineInventoryReturn*      tempuri__LineInventoryReturn,
    // output parameters:
    _tempuri__LineInventoryReturnResponse&tempuri__LineInventoryReturnResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tempuri__LineInventoryReturn_(
    struct soap *soap,
    // input parameters:
    _tempuri__LineInventoryReturn*      tempuri__LineInventoryReturn,
    // output parameters:
    _tempuri__LineInventoryReturnResponse&tempuri__LineInventoryReturnResponse
  );
@endcode

C++ proxy class (defined in soapMESServiceSoapProxy.h generated with soapcpp2):
@code
  class MESServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapMESServiceSoapService.h generated with soapcpp2):
@code
  class MESServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tempuri service method-protocol:	LineInventoryReturn_ SOAP
//gsoap tempuri service method-style:	LineInventoryReturn_ document
//gsoap tempuri service method-encoding:	LineInventoryReturn_ literal
//gsoap tempuri service method-input-action:	LineInventoryReturn_ http://tempuri.org/LineInventoryReturn
//gsoap tempuri service method-output-action:	LineInventoryReturn_ http://tempuri.org/LineInventoryReturnResponse
int __tempuri__LineInventoryReturn_(
    _tempuri__LineInventoryReturn*      tempuri__LineInventoryReturn,	///< Input parameter
    _tempuri__LineInventoryReturnResponse&tempuri__LineInventoryReturnResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tempuri__AnDon_                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__tempuri__AnDon_" of service binding "MESServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.1.1.13:8001/MESService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/AnDon"

  - Addressing input action: "http://tempuri.org/AnDon"

  - Addressing output action: "http://tempuri.org/AnDonResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tempuri__AnDon_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tempuri__AnDon*                    tempuri__AnDon,
    // output parameters:
    _tempuri__AnDonResponse            &tempuri__AnDonResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tempuri__AnDon_(
    struct soap *soap,
    // input parameters:
    _tempuri__AnDon*                    tempuri__AnDon,
    // output parameters:
    _tempuri__AnDonResponse            &tempuri__AnDonResponse
  );
@endcode

C++ proxy class (defined in soapMESServiceSoapProxy.h generated with soapcpp2):
@code
  class MESServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapMESServiceSoapService.h generated with soapcpp2):
@code
  class MESServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tempuri service method-protocol:	AnDon_ SOAP
//gsoap tempuri service method-style:	AnDon_ document
//gsoap tempuri service method-encoding:	AnDon_ literal
//gsoap tempuri service method-input-action:	AnDon_ http://tempuri.org/AnDon
//gsoap tempuri service method-output-action:	AnDon_ http://tempuri.org/AnDonResponse
int __tempuri__AnDon_(
    _tempuri__AnDon*                    tempuri__AnDon,	///< Input parameter
    _tempuri__AnDonResponse            &tempuri__AnDonResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tempuri__AnDonCall_                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__tempuri__AnDonCall_" of service binding "MESServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.1.1.13:8001/MESService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/AnDonCall"

  - Addressing input action: "http://tempuri.org/AnDonCall"

  - Addressing output action: "http://tempuri.org/AnDonCallResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tempuri__AnDonCall_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tempuri__AnDonCall*                tempuri__AnDonCall,
    // output parameters:
    _tempuri__AnDonCallResponse        &tempuri__AnDonCallResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tempuri__AnDonCall_(
    struct soap *soap,
    // input parameters:
    _tempuri__AnDonCall*                tempuri__AnDonCall,
    // output parameters:
    _tempuri__AnDonCallResponse        &tempuri__AnDonCallResponse
  );
@endcode

C++ proxy class (defined in soapMESServiceSoapProxy.h generated with soapcpp2):
@code
  class MESServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapMESServiceSoapService.h generated with soapcpp2):
@code
  class MESServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tempuri service method-protocol:	AnDonCall_ SOAP
//gsoap tempuri service method-style:	AnDonCall_ document
//gsoap tempuri service method-encoding:	AnDonCall_ literal
//gsoap tempuri service method-input-action:	AnDonCall_ http://tempuri.org/AnDonCall
//gsoap tempuri service method-output-action:	AnDonCall_ http://tempuri.org/AnDonCallResponse
int __tempuri__AnDonCall_(
    _tempuri__AnDonCall*                tempuri__AnDonCall,	///< Input parameter
    _tempuri__AnDonCallResponse        &tempuri__AnDonCallResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tempuri__AnDonTest_                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__tempuri__AnDonTest_" of service binding "MESServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.1.1.13:8001/MESService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/AnDonTest"

  - Addressing input action: "http://tempuri.org/AnDonTest"

  - Addressing output action: "http://tempuri.org/AnDonTestResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tempuri__AnDonTest_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tempuri__AnDonTest*                tempuri__AnDonTest,
    // output parameters:
    _tempuri__AnDonTestResponse        &tempuri__AnDonTestResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tempuri__AnDonTest_(
    struct soap *soap,
    // input parameters:
    _tempuri__AnDonTest*                tempuri__AnDonTest,
    // output parameters:
    _tempuri__AnDonTestResponse        &tempuri__AnDonTestResponse
  );
@endcode

C++ proxy class (defined in soapMESServiceSoapProxy.h generated with soapcpp2):
@code
  class MESServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapMESServiceSoapService.h generated with soapcpp2):
@code
  class MESServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tempuri service method-protocol:	AnDonTest_ SOAP
//gsoap tempuri service method-style:	AnDonTest_ document
//gsoap tempuri service method-encoding:	AnDonTest_ literal
//gsoap tempuri service method-input-action:	AnDonTest_ http://tempuri.org/AnDonTest
//gsoap tempuri service method-output-action:	AnDonTest_ http://tempuri.org/AnDonTestResponse
int __tempuri__AnDonTest_(
    _tempuri__AnDonTest*                tempuri__AnDonTest,	///< Input parameter
    _tempuri__AnDonTestResponse        &tempuri__AnDonTestResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tempuri__ItemsAdd_                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__tempuri__ItemsAdd_" of service binding "MESServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.1.1.13:8001/MESService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/ItemsAdd"

  - Addressing input action: "http://tempuri.org/ItemsAdd"

  - Addressing output action: "http://tempuri.org/ItemsAddResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tempuri__ItemsAdd_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tempuri__ItemsAdd*                 tempuri__ItemsAdd,
    // output parameters:
    _tempuri__ItemsAddResponse         &tempuri__ItemsAddResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tempuri__ItemsAdd_(
    struct soap *soap,
    // input parameters:
    _tempuri__ItemsAdd*                 tempuri__ItemsAdd,
    // output parameters:
    _tempuri__ItemsAddResponse         &tempuri__ItemsAddResponse
  );
@endcode

C++ proxy class (defined in soapMESServiceSoapProxy.h generated with soapcpp2):
@code
  class MESServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapMESServiceSoapService.h generated with soapcpp2):
@code
  class MESServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tempuri service method-protocol:	ItemsAdd_ SOAP
//gsoap tempuri service method-style:	ItemsAdd_ document
//gsoap tempuri service method-encoding:	ItemsAdd_ literal
//gsoap tempuri service method-input-action:	ItemsAdd_ http://tempuri.org/ItemsAdd
//gsoap tempuri service method-output-action:	ItemsAdd_ http://tempuri.org/ItemsAddResponse
int __tempuri__ItemsAdd_(
    _tempuri__ItemsAdd*                 tempuri__ItemsAdd,	///< Input parameter
    _tempuri__ItemsAddResponse         &tempuri__ItemsAddResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tempuri__DocAdd_                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__tempuri__DocAdd_" of service binding "MESServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.1.1.13:8001/MESService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/DocAdd"

  - Addressing input action: "http://tempuri.org/DocAdd"

  - Addressing output action: "http://tempuri.org/DocAddResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tempuri__DocAdd_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tempuri__DocAdd*                   tempuri__DocAdd,
    // output parameters:
    _tempuri__DocAddResponse           &tempuri__DocAddResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tempuri__DocAdd_(
    struct soap *soap,
    // input parameters:
    _tempuri__DocAdd*                   tempuri__DocAdd,
    // output parameters:
    _tempuri__DocAddResponse           &tempuri__DocAddResponse
  );
@endcode

C++ proxy class (defined in soapMESServiceSoapProxy.h generated with soapcpp2):
@code
  class MESServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapMESServiceSoapService.h generated with soapcpp2):
@code
  class MESServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tempuri service method-protocol:	DocAdd_ SOAP
//gsoap tempuri service method-style:	DocAdd_ document
//gsoap tempuri service method-encoding:	DocAdd_ literal
//gsoap tempuri service method-input-action:	DocAdd_ http://tempuri.org/DocAdd
//gsoap tempuri service method-output-action:	DocAdd_ http://tempuri.org/DocAddResponse
int __tempuri__DocAdd_(
    _tempuri__DocAdd*                   tempuri__DocAdd,	///< Input parameter
    _tempuri__DocAddResponse           &tempuri__DocAddResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tempuri__SetExMail_                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__tempuri__SetExMail_" of service binding "MESServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.1.1.13:8001/MESService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/SetExMail"

  - Addressing input action: "http://tempuri.org/SetExMail"

  - Addressing output action: "http://tempuri.org/SetExMailResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tempuri__SetExMail_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tempuri__SetExMail*                tempuri__SetExMail,
    // output parameters:
    _tempuri__SetExMailResponse        &tempuri__SetExMailResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tempuri__SetExMail_(
    struct soap *soap,
    // input parameters:
    _tempuri__SetExMail*                tempuri__SetExMail,
    // output parameters:
    _tempuri__SetExMailResponse        &tempuri__SetExMailResponse
  );
@endcode

C++ proxy class (defined in soapMESServiceSoapProxy.h generated with soapcpp2):
@code
  class MESServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapMESServiceSoapService.h generated with soapcpp2):
@code
  class MESServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tempuri service method-protocol:	SetExMail_ SOAP
//gsoap tempuri service method-style:	SetExMail_ document
//gsoap tempuri service method-encoding:	SetExMail_ literal
//gsoap tempuri service method-input-action:	SetExMail_ http://tempuri.org/SetExMail
//gsoap tempuri service method-output-action:	SetExMail_ http://tempuri.org/SetExMailResponse
int __tempuri__SetExMail_(
    _tempuri__SetExMail*                tempuri__SetExMail,	///< Input parameter
    _tempuri__SetExMailResponse        &tempuri__SetExMailResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tempuri__GetDept_                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__tempuri__GetDept_" of service binding "MESServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.1.1.13:8001/MESService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/GetDept"

  - Addressing input action: "http://tempuri.org/GetDept"

  - Addressing output action: "http://tempuri.org/GetDeptResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tempuri__GetDept_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tempuri__GetDept*                  tempuri__GetDept,
    // output parameters:
    _tempuri__GetDeptResponse          &tempuri__GetDeptResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tempuri__GetDept_(
    struct soap *soap,
    // input parameters:
    _tempuri__GetDept*                  tempuri__GetDept,
    // output parameters:
    _tempuri__GetDeptResponse          &tempuri__GetDeptResponse
  );
@endcode

C++ proxy class (defined in soapMESServiceSoapProxy.h generated with soapcpp2):
@code
  class MESServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapMESServiceSoapService.h generated with soapcpp2):
@code
  class MESServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tempuri service method-protocol:	GetDept_ SOAP
//gsoap tempuri service method-style:	GetDept_ document
//gsoap tempuri service method-encoding:	GetDept_ literal
//gsoap tempuri service method-input-action:	GetDept_ http://tempuri.org/GetDept
//gsoap tempuri service method-output-action:	GetDept_ http://tempuri.org/GetDeptResponse
int __tempuri__GetDept_(
    _tempuri__GetDept*                  tempuri__GetDept,	///< Input parameter
    _tempuri__GetDeptResponse          &tempuri__GetDeptResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tempuri__GetPower_                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__tempuri__GetPower_" of service binding "MESServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.1.1.13:8001/MESService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/GetPower"

  - Addressing input action: "http://tempuri.org/GetPower"

  - Addressing output action: "http://tempuri.org/GetPowerResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tempuri__GetPower_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tempuri__GetPower*                 tempuri__GetPower,
    // output parameters:
    _tempuri__GetPowerResponse         &tempuri__GetPowerResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tempuri__GetPower_(
    struct soap *soap,
    // input parameters:
    _tempuri__GetPower*                 tempuri__GetPower,
    // output parameters:
    _tempuri__GetPowerResponse         &tempuri__GetPowerResponse
  );
@endcode

C++ proxy class (defined in soapMESServiceSoapProxy.h generated with soapcpp2):
@code
  class MESServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapMESServiceSoapService.h generated with soapcpp2):
@code
  class MESServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tempuri service method-protocol:	GetPower_ SOAP
//gsoap tempuri service method-style:	GetPower_ document
//gsoap tempuri service method-encoding:	GetPower_ literal
//gsoap tempuri service method-input-action:	GetPower_ http://tempuri.org/GetPower
//gsoap tempuri service method-output-action:	GetPower_ http://tempuri.org/GetPowerResponse
int __tempuri__GetPower_(
    _tempuri__GetPower*                 tempuri__GetPower,	///< Input parameter
    _tempuri__GetPowerResponse         &tempuri__GetPowerResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tempuri__Login_                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__tempuri__Login_" of service binding "MESServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.1.1.13:8001/MESService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/Login"

  - Addressing input action: "http://tempuri.org/Login"

  - Addressing output action: "http://tempuri.org/LoginResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tempuri__Login_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tempuri__Login*                    tempuri__Login,
    // output parameters:
    _tempuri__LoginResponse            &tempuri__LoginResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tempuri__Login_(
    struct soap *soap,
    // input parameters:
    _tempuri__Login*                    tempuri__Login,
    // output parameters:
    _tempuri__LoginResponse            &tempuri__LoginResponse
  );
@endcode

C++ proxy class (defined in soapMESServiceSoapProxy.h generated with soapcpp2):
@code
  class MESServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapMESServiceSoapService.h generated with soapcpp2):
@code
  class MESServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tempuri service method-protocol:	Login_ SOAP
//gsoap tempuri service method-style:	Login_ document
//gsoap tempuri service method-encoding:	Login_ literal
//gsoap tempuri service method-input-action:	Login_ http://tempuri.org/Login
//gsoap tempuri service method-output-action:	Login_ http://tempuri.org/LoginResponse
int __tempuri__Login_(
    _tempuri__Login*                    tempuri__Login,	///< Input parameter
    _tempuri__LoginResponse            &tempuri__LoginResponse	///< Output parameter
);

/**

@page MESServiceSoap Binding "MESServiceSoap"

@section MESServiceSoap_policy_enablers Policy Enablers of Binding "MESServiceSoap"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

Data can be read and deserialized from:
  - an int file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = (int)...
  - a C++ stream (istream, stringstream), using soap->is = (istream*)...
  - a C string, using soap->is = (const char*)...
  - any input, using the soap->frecv() callback

Data can be serialized and written to:
  - an int file descriptor, using soap->sendfd = (int)...
  - a socket, using soap->socket = (int)...
  - a C++ stream (ostream, stringstream), using soap->os = (ostream*)...
  - a C string, using soap->os = (const char**)...
  - any output, using the soap->fsend() callback

The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section tempuri Top-level root elements of schema "http://tempuri.org/"

  - <tempuri:GetDate> @ref _tempuri__GetDate
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tempuri__GetDate(struct soap*, _tempuri__GetDate*);
    // Writer (returns SOAP_OK on success):
    soap_write__tempuri__GetDate(struct soap*, _tempuri__GetDate*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tempuri__GetDate(struct soap*, const char *URL, _tempuri__GetDate*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tempuri__GetDate(struct soap*, const char *URL, _tempuri__GetDate*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tempuri__GetDate(struct soap*, const char *URL, _tempuri__GetDate*);
    soap_POST_recv__tempuri__GetDate(struct soap*, _tempuri__GetDate*);
    @endcode

  - <tempuri:GetDateResponse> @ref _tempuri__GetDateResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tempuri__GetDateResponse(struct soap*, _tempuri__GetDateResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tempuri__GetDateResponse(struct soap*, _tempuri__GetDateResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tempuri__GetDateResponse(struct soap*, const char *URL, _tempuri__GetDateResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tempuri__GetDateResponse(struct soap*, const char *URL, _tempuri__GetDateResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tempuri__GetDateResponse(struct soap*, const char *URL, _tempuri__GetDateResponse*);
    soap_POST_recv__tempuri__GetDateResponse(struct soap*, _tempuri__GetDateResponse*);
    @endcode

  - <tempuri:GetDocCode> @ref _tempuri__GetDocCode
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tempuri__GetDocCode(struct soap*, _tempuri__GetDocCode*);
    // Writer (returns SOAP_OK on success):
    soap_write__tempuri__GetDocCode(struct soap*, _tempuri__GetDocCode*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tempuri__GetDocCode(struct soap*, const char *URL, _tempuri__GetDocCode*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tempuri__GetDocCode(struct soap*, const char *URL, _tempuri__GetDocCode*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tempuri__GetDocCode(struct soap*, const char *URL, _tempuri__GetDocCode*);
    soap_POST_recv__tempuri__GetDocCode(struct soap*, _tempuri__GetDocCode*);
    @endcode

  - <tempuri:GetDocCodeResponse> @ref _tempuri__GetDocCodeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tempuri__GetDocCodeResponse(struct soap*, _tempuri__GetDocCodeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tempuri__GetDocCodeResponse(struct soap*, _tempuri__GetDocCodeResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tempuri__GetDocCodeResponse(struct soap*, const char *URL, _tempuri__GetDocCodeResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tempuri__GetDocCodeResponse(struct soap*, const char *URL, _tempuri__GetDocCodeResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tempuri__GetDocCodeResponse(struct soap*, const char *URL, _tempuri__GetDocCodeResponse*);
    soap_POST_recv__tempuri__GetDocCodeResponse(struct soap*, _tempuri__GetDocCodeResponse*);
    @endcode

  - <tempuri:ToolingTimes> @ref _tempuri__ToolingTimes
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tempuri__ToolingTimes(struct soap*, _tempuri__ToolingTimes*);
    // Writer (returns SOAP_OK on success):
    soap_write__tempuri__ToolingTimes(struct soap*, _tempuri__ToolingTimes*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tempuri__ToolingTimes(struct soap*, const char *URL, _tempuri__ToolingTimes*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tempuri__ToolingTimes(struct soap*, const char *URL, _tempuri__ToolingTimes*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tempuri__ToolingTimes(struct soap*, const char *URL, _tempuri__ToolingTimes*);
    soap_POST_recv__tempuri__ToolingTimes(struct soap*, _tempuri__ToolingTimes*);
    @endcode

  - <tempuri:ToolingTimesResponse> @ref _tempuri__ToolingTimesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tempuri__ToolingTimesResponse(struct soap*, _tempuri__ToolingTimesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tempuri__ToolingTimesResponse(struct soap*, _tempuri__ToolingTimesResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tempuri__ToolingTimesResponse(struct soap*, const char *URL, _tempuri__ToolingTimesResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tempuri__ToolingTimesResponse(struct soap*, const char *URL, _tempuri__ToolingTimesResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tempuri__ToolingTimesResponse(struct soap*, const char *URL, _tempuri__ToolingTimesResponse*);
    soap_POST_recv__tempuri__ToolingTimesResponse(struct soap*, _tempuri__ToolingTimesResponse*);
    @endcode

  - <tempuri:WorkOrder> @ref _tempuri__WorkOrder
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tempuri__WorkOrder(struct soap*, _tempuri__WorkOrder*);
    // Writer (returns SOAP_OK on success):
    soap_write__tempuri__WorkOrder(struct soap*, _tempuri__WorkOrder*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tempuri__WorkOrder(struct soap*, const char *URL, _tempuri__WorkOrder*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tempuri__WorkOrder(struct soap*, const char *URL, _tempuri__WorkOrder*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tempuri__WorkOrder(struct soap*, const char *URL, _tempuri__WorkOrder*);
    soap_POST_recv__tempuri__WorkOrder(struct soap*, _tempuri__WorkOrder*);
    @endcode

  - <tempuri:WorkOrderResponse> @ref _tempuri__WorkOrderResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tempuri__WorkOrderResponse(struct soap*, _tempuri__WorkOrderResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tempuri__WorkOrderResponse(struct soap*, _tempuri__WorkOrderResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tempuri__WorkOrderResponse(struct soap*, const char *URL, _tempuri__WorkOrderResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tempuri__WorkOrderResponse(struct soap*, const char *URL, _tempuri__WorkOrderResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tempuri__WorkOrderResponse(struct soap*, const char *URL, _tempuri__WorkOrderResponse*);
    soap_POST_recv__tempuri__WorkOrderResponse(struct soap*, _tempuri__WorkOrderResponse*);
    @endcode

  - <tempuri:LineInventory> @ref _tempuri__LineInventory
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tempuri__LineInventory(struct soap*, _tempuri__LineInventory*);
    // Writer (returns SOAP_OK on success):
    soap_write__tempuri__LineInventory(struct soap*, _tempuri__LineInventory*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tempuri__LineInventory(struct soap*, const char *URL, _tempuri__LineInventory*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tempuri__LineInventory(struct soap*, const char *URL, _tempuri__LineInventory*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tempuri__LineInventory(struct soap*, const char *URL, _tempuri__LineInventory*);
    soap_POST_recv__tempuri__LineInventory(struct soap*, _tempuri__LineInventory*);
    @endcode

  - <tempuri:LineInventoryResponse> @ref _tempuri__LineInventoryResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tempuri__LineInventoryResponse(struct soap*, _tempuri__LineInventoryResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tempuri__LineInventoryResponse(struct soap*, _tempuri__LineInventoryResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tempuri__LineInventoryResponse(struct soap*, const char *URL, _tempuri__LineInventoryResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tempuri__LineInventoryResponse(struct soap*, const char *URL, _tempuri__LineInventoryResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tempuri__LineInventoryResponse(struct soap*, const char *URL, _tempuri__LineInventoryResponse*);
    soap_POST_recv__tempuri__LineInventoryResponse(struct soap*, _tempuri__LineInventoryResponse*);
    @endcode

  - <tempuri:LineInventoryUpdate> @ref _tempuri__LineInventoryUpdate
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tempuri__LineInventoryUpdate(struct soap*, _tempuri__LineInventoryUpdate*);
    // Writer (returns SOAP_OK on success):
    soap_write__tempuri__LineInventoryUpdate(struct soap*, _tempuri__LineInventoryUpdate*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tempuri__LineInventoryUpdate(struct soap*, const char *URL, _tempuri__LineInventoryUpdate*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tempuri__LineInventoryUpdate(struct soap*, const char *URL, _tempuri__LineInventoryUpdate*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tempuri__LineInventoryUpdate(struct soap*, const char *URL, _tempuri__LineInventoryUpdate*);
    soap_POST_recv__tempuri__LineInventoryUpdate(struct soap*, _tempuri__LineInventoryUpdate*);
    @endcode

  - <tempuri:LineInventoryUpdateResponse> @ref _tempuri__LineInventoryUpdateResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tempuri__LineInventoryUpdateResponse(struct soap*, _tempuri__LineInventoryUpdateResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tempuri__LineInventoryUpdateResponse(struct soap*, _tempuri__LineInventoryUpdateResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tempuri__LineInventoryUpdateResponse(struct soap*, const char *URL, _tempuri__LineInventoryUpdateResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tempuri__LineInventoryUpdateResponse(struct soap*, const char *URL, _tempuri__LineInventoryUpdateResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tempuri__LineInventoryUpdateResponse(struct soap*, const char *URL, _tempuri__LineInventoryUpdateResponse*);
    soap_POST_recv__tempuri__LineInventoryUpdateResponse(struct soap*, _tempuri__LineInventoryUpdateResponse*);
    @endcode

  - <tempuri:LineInventoryReturn> @ref _tempuri__LineInventoryReturn
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tempuri__LineInventoryReturn(struct soap*, _tempuri__LineInventoryReturn*);
    // Writer (returns SOAP_OK on success):
    soap_write__tempuri__LineInventoryReturn(struct soap*, _tempuri__LineInventoryReturn*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tempuri__LineInventoryReturn(struct soap*, const char *URL, _tempuri__LineInventoryReturn*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tempuri__LineInventoryReturn(struct soap*, const char *URL, _tempuri__LineInventoryReturn*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tempuri__LineInventoryReturn(struct soap*, const char *URL, _tempuri__LineInventoryReturn*);
    soap_POST_recv__tempuri__LineInventoryReturn(struct soap*, _tempuri__LineInventoryReturn*);
    @endcode

  - <tempuri:LineInventoryReturnResponse> @ref _tempuri__LineInventoryReturnResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tempuri__LineInventoryReturnResponse(struct soap*, _tempuri__LineInventoryReturnResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tempuri__LineInventoryReturnResponse(struct soap*, _tempuri__LineInventoryReturnResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tempuri__LineInventoryReturnResponse(struct soap*, const char *URL, _tempuri__LineInventoryReturnResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tempuri__LineInventoryReturnResponse(struct soap*, const char *URL, _tempuri__LineInventoryReturnResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tempuri__LineInventoryReturnResponse(struct soap*, const char *URL, _tempuri__LineInventoryReturnResponse*);
    soap_POST_recv__tempuri__LineInventoryReturnResponse(struct soap*, _tempuri__LineInventoryReturnResponse*);
    @endcode

  - <tempuri:AnDon> @ref _tempuri__AnDon
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tempuri__AnDon(struct soap*, _tempuri__AnDon*);
    // Writer (returns SOAP_OK on success):
    soap_write__tempuri__AnDon(struct soap*, _tempuri__AnDon*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tempuri__AnDon(struct soap*, const char *URL, _tempuri__AnDon*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tempuri__AnDon(struct soap*, const char *URL, _tempuri__AnDon*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tempuri__AnDon(struct soap*, const char *URL, _tempuri__AnDon*);
    soap_POST_recv__tempuri__AnDon(struct soap*, _tempuri__AnDon*);
    @endcode

  - <tempuri:AnDonResponse> @ref _tempuri__AnDonResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tempuri__AnDonResponse(struct soap*, _tempuri__AnDonResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tempuri__AnDonResponse(struct soap*, _tempuri__AnDonResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tempuri__AnDonResponse(struct soap*, const char *URL, _tempuri__AnDonResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tempuri__AnDonResponse(struct soap*, const char *URL, _tempuri__AnDonResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tempuri__AnDonResponse(struct soap*, const char *URL, _tempuri__AnDonResponse*);
    soap_POST_recv__tempuri__AnDonResponse(struct soap*, _tempuri__AnDonResponse*);
    @endcode

  - <tempuri:AnDonCall> @ref _tempuri__AnDonCall
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tempuri__AnDonCall(struct soap*, _tempuri__AnDonCall*);
    // Writer (returns SOAP_OK on success):
    soap_write__tempuri__AnDonCall(struct soap*, _tempuri__AnDonCall*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tempuri__AnDonCall(struct soap*, const char *URL, _tempuri__AnDonCall*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tempuri__AnDonCall(struct soap*, const char *URL, _tempuri__AnDonCall*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tempuri__AnDonCall(struct soap*, const char *URL, _tempuri__AnDonCall*);
    soap_POST_recv__tempuri__AnDonCall(struct soap*, _tempuri__AnDonCall*);
    @endcode

  - <tempuri:AnDonCallResponse> @ref _tempuri__AnDonCallResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tempuri__AnDonCallResponse(struct soap*, _tempuri__AnDonCallResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tempuri__AnDonCallResponse(struct soap*, _tempuri__AnDonCallResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tempuri__AnDonCallResponse(struct soap*, const char *URL, _tempuri__AnDonCallResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tempuri__AnDonCallResponse(struct soap*, const char *URL, _tempuri__AnDonCallResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tempuri__AnDonCallResponse(struct soap*, const char *URL, _tempuri__AnDonCallResponse*);
    soap_POST_recv__tempuri__AnDonCallResponse(struct soap*, _tempuri__AnDonCallResponse*);
    @endcode

  - <tempuri:AnDonTest> @ref _tempuri__AnDonTest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tempuri__AnDonTest(struct soap*, _tempuri__AnDonTest*);
    // Writer (returns SOAP_OK on success):
    soap_write__tempuri__AnDonTest(struct soap*, _tempuri__AnDonTest*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tempuri__AnDonTest(struct soap*, const char *URL, _tempuri__AnDonTest*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tempuri__AnDonTest(struct soap*, const char *URL, _tempuri__AnDonTest*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tempuri__AnDonTest(struct soap*, const char *URL, _tempuri__AnDonTest*);
    soap_POST_recv__tempuri__AnDonTest(struct soap*, _tempuri__AnDonTest*);
    @endcode

  - <tempuri:AnDonTestResponse> @ref _tempuri__AnDonTestResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tempuri__AnDonTestResponse(struct soap*, _tempuri__AnDonTestResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tempuri__AnDonTestResponse(struct soap*, _tempuri__AnDonTestResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tempuri__AnDonTestResponse(struct soap*, const char *URL, _tempuri__AnDonTestResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tempuri__AnDonTestResponse(struct soap*, const char *URL, _tempuri__AnDonTestResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tempuri__AnDonTestResponse(struct soap*, const char *URL, _tempuri__AnDonTestResponse*);
    soap_POST_recv__tempuri__AnDonTestResponse(struct soap*, _tempuri__AnDonTestResponse*);
    @endcode

  - <tempuri:ItemsAdd> @ref _tempuri__ItemsAdd
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tempuri__ItemsAdd(struct soap*, _tempuri__ItemsAdd*);
    // Writer (returns SOAP_OK on success):
    soap_write__tempuri__ItemsAdd(struct soap*, _tempuri__ItemsAdd*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tempuri__ItemsAdd(struct soap*, const char *URL, _tempuri__ItemsAdd*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tempuri__ItemsAdd(struct soap*, const char *URL, _tempuri__ItemsAdd*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tempuri__ItemsAdd(struct soap*, const char *URL, _tempuri__ItemsAdd*);
    soap_POST_recv__tempuri__ItemsAdd(struct soap*, _tempuri__ItemsAdd*);
    @endcode

  - <tempuri:ItemsAddResponse> @ref _tempuri__ItemsAddResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tempuri__ItemsAddResponse(struct soap*, _tempuri__ItemsAddResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tempuri__ItemsAddResponse(struct soap*, _tempuri__ItemsAddResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tempuri__ItemsAddResponse(struct soap*, const char *URL, _tempuri__ItemsAddResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tempuri__ItemsAddResponse(struct soap*, const char *URL, _tempuri__ItemsAddResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tempuri__ItemsAddResponse(struct soap*, const char *URL, _tempuri__ItemsAddResponse*);
    soap_POST_recv__tempuri__ItemsAddResponse(struct soap*, _tempuri__ItemsAddResponse*);
    @endcode

  - <tempuri:DocAdd> @ref _tempuri__DocAdd
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tempuri__DocAdd(struct soap*, _tempuri__DocAdd*);
    // Writer (returns SOAP_OK on success):
    soap_write__tempuri__DocAdd(struct soap*, _tempuri__DocAdd*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tempuri__DocAdd(struct soap*, const char *URL, _tempuri__DocAdd*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tempuri__DocAdd(struct soap*, const char *URL, _tempuri__DocAdd*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tempuri__DocAdd(struct soap*, const char *URL, _tempuri__DocAdd*);
    soap_POST_recv__tempuri__DocAdd(struct soap*, _tempuri__DocAdd*);
    @endcode

  - <tempuri:DocAddResponse> @ref _tempuri__DocAddResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tempuri__DocAddResponse(struct soap*, _tempuri__DocAddResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tempuri__DocAddResponse(struct soap*, _tempuri__DocAddResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tempuri__DocAddResponse(struct soap*, const char *URL, _tempuri__DocAddResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tempuri__DocAddResponse(struct soap*, const char *URL, _tempuri__DocAddResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tempuri__DocAddResponse(struct soap*, const char *URL, _tempuri__DocAddResponse*);
    soap_POST_recv__tempuri__DocAddResponse(struct soap*, _tempuri__DocAddResponse*);
    @endcode

  - <tempuri:SetExMail> @ref _tempuri__SetExMail
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tempuri__SetExMail(struct soap*, _tempuri__SetExMail*);
    // Writer (returns SOAP_OK on success):
    soap_write__tempuri__SetExMail(struct soap*, _tempuri__SetExMail*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tempuri__SetExMail(struct soap*, const char *URL, _tempuri__SetExMail*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tempuri__SetExMail(struct soap*, const char *URL, _tempuri__SetExMail*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tempuri__SetExMail(struct soap*, const char *URL, _tempuri__SetExMail*);
    soap_POST_recv__tempuri__SetExMail(struct soap*, _tempuri__SetExMail*);
    @endcode

  - <tempuri:SetExMailResponse> @ref _tempuri__SetExMailResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tempuri__SetExMailResponse(struct soap*, _tempuri__SetExMailResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tempuri__SetExMailResponse(struct soap*, _tempuri__SetExMailResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tempuri__SetExMailResponse(struct soap*, const char *URL, _tempuri__SetExMailResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tempuri__SetExMailResponse(struct soap*, const char *URL, _tempuri__SetExMailResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tempuri__SetExMailResponse(struct soap*, const char *URL, _tempuri__SetExMailResponse*);
    soap_POST_recv__tempuri__SetExMailResponse(struct soap*, _tempuri__SetExMailResponse*);
    @endcode

  - <tempuri:GetDept> @ref _tempuri__GetDept
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tempuri__GetDept(struct soap*, _tempuri__GetDept*);
    // Writer (returns SOAP_OK on success):
    soap_write__tempuri__GetDept(struct soap*, _tempuri__GetDept*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tempuri__GetDept(struct soap*, const char *URL, _tempuri__GetDept*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tempuri__GetDept(struct soap*, const char *URL, _tempuri__GetDept*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tempuri__GetDept(struct soap*, const char *URL, _tempuri__GetDept*);
    soap_POST_recv__tempuri__GetDept(struct soap*, _tempuri__GetDept*);
    @endcode

  - <tempuri:GetDeptResponse> @ref _tempuri__GetDeptResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tempuri__GetDeptResponse(struct soap*, _tempuri__GetDeptResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tempuri__GetDeptResponse(struct soap*, _tempuri__GetDeptResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tempuri__GetDeptResponse(struct soap*, const char *URL, _tempuri__GetDeptResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tempuri__GetDeptResponse(struct soap*, const char *URL, _tempuri__GetDeptResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tempuri__GetDeptResponse(struct soap*, const char *URL, _tempuri__GetDeptResponse*);
    soap_POST_recv__tempuri__GetDeptResponse(struct soap*, _tempuri__GetDeptResponse*);
    @endcode

  - <tempuri:GetPower> @ref _tempuri__GetPower
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tempuri__GetPower(struct soap*, _tempuri__GetPower*);
    // Writer (returns SOAP_OK on success):
    soap_write__tempuri__GetPower(struct soap*, _tempuri__GetPower*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tempuri__GetPower(struct soap*, const char *URL, _tempuri__GetPower*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tempuri__GetPower(struct soap*, const char *URL, _tempuri__GetPower*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tempuri__GetPower(struct soap*, const char *URL, _tempuri__GetPower*);
    soap_POST_recv__tempuri__GetPower(struct soap*, _tempuri__GetPower*);
    @endcode

  - <tempuri:GetPowerResponse> @ref _tempuri__GetPowerResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tempuri__GetPowerResponse(struct soap*, _tempuri__GetPowerResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tempuri__GetPowerResponse(struct soap*, _tempuri__GetPowerResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tempuri__GetPowerResponse(struct soap*, const char *URL, _tempuri__GetPowerResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tempuri__GetPowerResponse(struct soap*, const char *URL, _tempuri__GetPowerResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tempuri__GetPowerResponse(struct soap*, const char *URL, _tempuri__GetPowerResponse*);
    soap_POST_recv__tempuri__GetPowerResponse(struct soap*, _tempuri__GetPowerResponse*);
    @endcode

  - <tempuri:Login> @ref _tempuri__Login
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tempuri__Login(struct soap*, _tempuri__Login*);
    // Writer (returns SOAP_OK on success):
    soap_write__tempuri__Login(struct soap*, _tempuri__Login*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tempuri__Login(struct soap*, const char *URL, _tempuri__Login*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tempuri__Login(struct soap*, const char *URL, _tempuri__Login*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tempuri__Login(struct soap*, const char *URL, _tempuri__Login*);
    soap_POST_recv__tempuri__Login(struct soap*, _tempuri__Login*);
    @endcode

  - <tempuri:LoginResponse> @ref _tempuri__LoginResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tempuri__LoginResponse(struct soap*, _tempuri__LoginResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tempuri__LoginResponse(struct soap*, _tempuri__LoginResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tempuri__LoginResponse(struct soap*, const char *URL, _tempuri__LoginResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tempuri__LoginResponse(struct soap*, const char *URL, _tempuri__LoginResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tempuri__LoginResponse(struct soap*, const char *URL, _tempuri__LoginResponse*);
    soap_POST_recv__tempuri__LoginResponse(struct soap*, _tempuri__LoginResponse*);
    @endcode

  - <tempuri:string> (use wsdl2h option -g to auto-generate type _tempuri__string)

*/

/* End of MESService.h */
