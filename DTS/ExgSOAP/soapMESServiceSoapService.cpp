/* soapMESServiceSoapService.cpp
   Generated by gSOAP 2.8.64 for MESService.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapMESServiceSoapService.h"

MESServiceSoapService::MESServiceSoapService() : soap(SOAP_IO_DEFAULT)
{	MESServiceSoapService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

MESServiceSoapService::MESServiceSoapService(const MESServiceSoapService& rhs)
{	soap_copy_context(this, &rhs);
}

MESServiceSoapService::MESServiceSoapService(const struct soap &_soap) : soap(_soap)
{ }

MESServiceSoapService::MESServiceSoapService(soap_mode iomode) : soap(iomode)
{	MESServiceSoapService_init(iomode, iomode);
}

MESServiceSoapService::MESServiceSoapService(soap_mode imode, soap_mode omode) : soap(imode, omode)
{	MESServiceSoapService_init(imode, omode);
}

MESServiceSoapService::~MESServiceSoapService()
{
	this->destroy();
}

void MESServiceSoapService::MESServiceSoapService_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	static const struct Namespace namespaces[] = {
        {"SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://schemas.xmlsoap.org/soap/envelope/", NULL},
        {"SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://schemas.xmlsoap.org/soap/encoding/", NULL},
        {"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
        {"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
        {"tempuri", "http://tempuri.org/", NULL, NULL},
        {NULL, NULL, NULL, NULL}
    };
	soap_set_namespaces(this, namespaces);
}

void MESServiceSoapService::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void MESServiceSoapService::reset()
{	this->destroy();
	soap_done(this);
	soap_initialize(this);
	MESServiceSoapService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

#ifndef WITH_PURE_VIRTUAL
MESServiceSoapService *MESServiceSoapService::copy()
{	MESServiceSoapService *dup = SOAP_NEW_UNMANAGED(MESServiceSoapService(*(struct soap*)this));
	return dup;
}
#endif

MESServiceSoapService& MESServiceSoapService::operator=(const MESServiceSoapService& rhs)
{	soap_copy_context(this, &rhs);
	return *this;
}

int MESServiceSoapService::soap_close_socket()
{	return soap_closesock(this);
}

int MESServiceSoapService::soap_force_close_socket()
{	return soap_force_closesock(this);
}

int MESServiceSoapService::soap_senderfault(const char *string, const char *detailXML)
{	return ::soap_sender_fault(this, string, detailXML);
}

int MESServiceSoapService::soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_sender_fault_subcode(this, subcodeQName, string, detailXML);
}

int MESServiceSoapService::soap_receiverfault(const char *string, const char *detailXML)
{	return ::soap_receiver_fault(this, string, detailXML);
}

int MESServiceSoapService::soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_receiver_fault_subcode(this, subcodeQName, string, detailXML);
}

void MESServiceSoapService::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void MESServiceSoapService::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}
#endif

char *MESServiceSoapService::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

void MESServiceSoapService::soap_noheader()
{	this->header = NULL;
}

::SOAP_ENV__Header *MESServiceSoapService::soap_header()
{	return this->header;
}

#ifndef WITH_NOIO
int MESServiceSoapService::run(int port)
{	if (!soap_valid_socket(this->master) && !soap_valid_socket(this->bind(NULL, port, 100)))
		return this->error;
	for (;;)
	{	if (!soap_valid_socket(this->accept()))
		{	if (this->errnum == 0) // timeout?
				this->error = SOAP_OK;
			break;
		}
		if (this->serve())
			break;
		this->destroy();
	}
	return this->error;
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int MESServiceSoapService::ssl_run(int port)
{	if (!soap_valid_socket(this->master) && !soap_valid_socket(this->bind(NULL, port, 100)))
		return this->error;
	for (;;)
	{	if (!soap_valid_socket(this->accept()))
		{	if (this->errnum == 0) // timeout?
				this->error = SOAP_OK;
			break;
		}
		if (this->ssl_accept() || this->serve())
			break;
		this->destroy();
	}
	return this->error;
}
#endif

SOAP_SOCKET MESServiceSoapService::bind(const char *host, int port, int backlog)
{	return soap_bind(this, host, port, backlog);
}

SOAP_SOCKET MESServiceSoapService::accept()
{	return soap_accept(this);
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int MESServiceSoapService::ssl_accept()
{	return soap_ssl_accept(this);
}
#endif
#endif

int MESServiceSoapService::serve()
{
#ifndef WITH_FASTCGI
	this->keep_alive = this->max_keep_alive + 1;
#endif
	do
	{
#ifndef WITH_FASTCGI
		if (this->keep_alive > 0 && this->max_keep_alive > 0)
			this->keep_alive--;
#endif
		if (soap_begin_serve(this))
		{	if (this->error >= SOAP_STOP)
				continue;
			return this->error;
		}
		if ((dispatch() || (this->fserveloop && this->fserveloop(this))) && this->error && this->error < SOAP_STOP)
		{
#ifdef WITH_FASTCGI
			soap_send_fault(this);
#else
			return soap_send_fault(this);
#endif
		}
#ifdef WITH_FASTCGI
		soap_destroy(this);
		soap_end(this);
	} while (1);
#else
	} while (this->keep_alive);
#endif
	return SOAP_OK;
}

static int serve___tempuri__GetDate(MESServiceSoapService*);
static int serve___tempuri__GetDocCode(MESServiceSoapService*);
static int serve___tempuri__ToolingTimes(MESServiceSoapService*);
static int serve___tempuri__WorkOrder(MESServiceSoapService*);
static int serve___tempuri__LineInventory(MESServiceSoapService*);
static int serve___tempuri__LineInventoryUpdate(MESServiceSoapService*);
static int serve___tempuri__LineInventoryReturn(MESServiceSoapService*);
static int serve___tempuri__AnDon(MESServiceSoapService*);
static int serve___tempuri__AnDonCall(MESServiceSoapService*);
static int serve___tempuri__AnDonTest(MESServiceSoapService*);
static int serve___tempuri__ItemsAdd(MESServiceSoapService*);
static int serve___tempuri__DocAdd(MESServiceSoapService*);
static int serve___tempuri__SetExMail(MESServiceSoapService*);
static int serve___tempuri__GetDept(MESServiceSoapService*);
static int serve___tempuri__GetPower(MESServiceSoapService*);
static int serve___tempuri__Login(MESServiceSoapService*);
static int serve___tempuri__GetDate_(MESServiceSoapService*);
static int serve___tempuri__GetDocCode_(MESServiceSoapService*);
static int serve___tempuri__ToolingTimes_(MESServiceSoapService*);
static int serve___tempuri__WorkOrder_(MESServiceSoapService*);
static int serve___tempuri__LineInventory_(MESServiceSoapService*);
static int serve___tempuri__LineInventoryUpdate_(MESServiceSoapService*);
static int serve___tempuri__LineInventoryReturn_(MESServiceSoapService*);
static int serve___tempuri__AnDon_(MESServiceSoapService*);
static int serve___tempuri__AnDonCall_(MESServiceSoapService*);
static int serve___tempuri__AnDonTest_(MESServiceSoapService*);
static int serve___tempuri__ItemsAdd_(MESServiceSoapService*);
static int serve___tempuri__DocAdd_(MESServiceSoapService*);
static int serve___tempuri__SetExMail_(MESServiceSoapService*);
static int serve___tempuri__GetDept_(MESServiceSoapService*);
static int serve___tempuri__GetPower_(MESServiceSoapService*);
static int serve___tempuri__Login_(MESServiceSoapService*);

int MESServiceSoapService::dispatch()
{
	soap_peek_element(this);
	if (!soap_match_tag(this, this->tag, "tempuri:GetDate"))
		return serve___tempuri__GetDate(this);
	if (!soap_match_tag(this, this->tag, "tempuri:GetDocCode"))
		return serve___tempuri__GetDocCode(this);
	if (!soap_match_tag(this, this->tag, "tempuri:ToolingTimes"))
		return serve___tempuri__ToolingTimes(this);
	if (!soap_match_tag(this, this->tag, "tempuri:WorkOrder"))
		return serve___tempuri__WorkOrder(this);
	if (!soap_match_tag(this, this->tag, "tempuri:LineInventory"))
		return serve___tempuri__LineInventory(this);
	if (!soap_match_tag(this, this->tag, "tempuri:LineInventoryUpdate"))
		return serve___tempuri__LineInventoryUpdate(this);
	if (!soap_match_tag(this, this->tag, "tempuri:LineInventoryReturn"))
		return serve___tempuri__LineInventoryReturn(this);
	if (!soap_match_tag(this, this->tag, "tempuri:AnDon"))
		return serve___tempuri__AnDon(this);
	if (!soap_match_tag(this, this->tag, "tempuri:AnDonCall"))
		return serve___tempuri__AnDonCall(this);
	if (!soap_match_tag(this, this->tag, "tempuri:AnDonTest"))
		return serve___tempuri__AnDonTest(this);
	if (!soap_match_tag(this, this->tag, "tempuri:ItemsAdd"))
		return serve___tempuri__ItemsAdd(this);
	if (!soap_match_tag(this, this->tag, "tempuri:DocAdd"))
		return serve___tempuri__DocAdd(this);
	if (!soap_match_tag(this, this->tag, "tempuri:SetExMail"))
		return serve___tempuri__SetExMail(this);
	if (!soap_match_tag(this, this->tag, "tempuri:GetDept"))
		return serve___tempuri__GetDept(this);
	if (!soap_match_tag(this, this->tag, "tempuri:GetPower"))
		return serve___tempuri__GetPower(this);
	if (!soap_match_tag(this, this->tag, "tempuri:Login"))
		return serve___tempuri__Login(this);
	if (!soap_match_tag(this, this->tag, "tempuri:GetDate"))
		return serve___tempuri__GetDate_(this);
	if (!soap_match_tag(this, this->tag, "tempuri:GetDocCode"))
		return serve___tempuri__GetDocCode_(this);
	if (!soap_match_tag(this, this->tag, "tempuri:ToolingTimes"))
		return serve___tempuri__ToolingTimes_(this);
	if (!soap_match_tag(this, this->tag, "tempuri:WorkOrder"))
		return serve___tempuri__WorkOrder_(this);
	if (!soap_match_tag(this, this->tag, "tempuri:LineInventory"))
		return serve___tempuri__LineInventory_(this);
	if (!soap_match_tag(this, this->tag, "tempuri:LineInventoryUpdate"))
		return serve___tempuri__LineInventoryUpdate_(this);
	if (!soap_match_tag(this, this->tag, "tempuri:LineInventoryReturn"))
		return serve___tempuri__LineInventoryReturn_(this);
	if (!soap_match_tag(this, this->tag, "tempuri:AnDon"))
		return serve___tempuri__AnDon_(this);
	if (!soap_match_tag(this, this->tag, "tempuri:AnDonCall"))
		return serve___tempuri__AnDonCall_(this);
	if (!soap_match_tag(this, this->tag, "tempuri:AnDonTest"))
		return serve___tempuri__AnDonTest_(this);
	if (!soap_match_tag(this, this->tag, "tempuri:ItemsAdd"))
		return serve___tempuri__ItemsAdd_(this);
	if (!soap_match_tag(this, this->tag, "tempuri:DocAdd"))
		return serve___tempuri__DocAdd_(this);
	if (!soap_match_tag(this, this->tag, "tempuri:SetExMail"))
		return serve___tempuri__SetExMail_(this);
	if (!soap_match_tag(this, this->tag, "tempuri:GetDept"))
		return serve___tempuri__GetDept_(this);
	if (!soap_match_tag(this, this->tag, "tempuri:GetPower"))
		return serve___tempuri__GetPower_(this);
	if (!soap_match_tag(this, this->tag, "tempuri:Login"))
		return serve___tempuri__Login_(this);
	return this->error = SOAP_NO_METHOD;
}

static int serve___tempuri__GetDate(MESServiceSoapService *soap)
{	struct __tempuri__GetDate soap_tmp___tempuri__GetDate;
	_tempuri__GetDateResponse tempuri__GetDateResponse;
	tempuri__GetDateResponse.soap_default(soap);
	soap_default___tempuri__GetDate(soap, &soap_tmp___tempuri__GetDate);
	if (!soap_get___tempuri__GetDate(soap, &soap_tmp___tempuri__GetDate, "-tempuri:GetDate", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->GetDate(soap_tmp___tempuri__GetDate.tempuri__GetDate, tempuri__GetDateResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	tempuri__GetDateResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tempuri__GetDateResponse.soap_put(soap, "tempuri:GetDateResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tempuri__GetDateResponse.soap_put(soap, "tempuri:GetDateResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tempuri__GetDocCode(MESServiceSoapService *soap)
{	struct __tempuri__GetDocCode soap_tmp___tempuri__GetDocCode;
	_tempuri__GetDocCodeResponse tempuri__GetDocCodeResponse;
	tempuri__GetDocCodeResponse.soap_default(soap);
	soap_default___tempuri__GetDocCode(soap, &soap_tmp___tempuri__GetDocCode);
	if (!soap_get___tempuri__GetDocCode(soap, &soap_tmp___tempuri__GetDocCode, "-tempuri:GetDocCode", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->GetDocCode(soap_tmp___tempuri__GetDocCode.tempuri__GetDocCode, tempuri__GetDocCodeResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	tempuri__GetDocCodeResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tempuri__GetDocCodeResponse.soap_put(soap, "tempuri:GetDocCodeResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tempuri__GetDocCodeResponse.soap_put(soap, "tempuri:GetDocCodeResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tempuri__ToolingTimes(MESServiceSoapService *soap)
{	struct __tempuri__ToolingTimes soap_tmp___tempuri__ToolingTimes;
	_tempuri__ToolingTimesResponse tempuri__ToolingTimesResponse;
	tempuri__ToolingTimesResponse.soap_default(soap);
	soap_default___tempuri__ToolingTimes(soap, &soap_tmp___tempuri__ToolingTimes);
	if (!soap_get___tempuri__ToolingTimes(soap, &soap_tmp___tempuri__ToolingTimes, "-tempuri:ToolingTimes", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->ToolingTimes(soap_tmp___tempuri__ToolingTimes.tempuri__ToolingTimes, tempuri__ToolingTimesResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	tempuri__ToolingTimesResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tempuri__ToolingTimesResponse.soap_put(soap, "tempuri:ToolingTimesResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tempuri__ToolingTimesResponse.soap_put(soap, "tempuri:ToolingTimesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tempuri__WorkOrder(MESServiceSoapService *soap)
{	struct __tempuri__WorkOrder soap_tmp___tempuri__WorkOrder;
	_tempuri__WorkOrderResponse tempuri__WorkOrderResponse;
	tempuri__WorkOrderResponse.soap_default(soap);
	soap_default___tempuri__WorkOrder(soap, &soap_tmp___tempuri__WorkOrder);
	if (!soap_get___tempuri__WorkOrder(soap, &soap_tmp___tempuri__WorkOrder, "-tempuri:WorkOrder", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->WorkOrder(soap_tmp___tempuri__WorkOrder.tempuri__WorkOrder, tempuri__WorkOrderResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	tempuri__WorkOrderResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tempuri__WorkOrderResponse.soap_put(soap, "tempuri:WorkOrderResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tempuri__WorkOrderResponse.soap_put(soap, "tempuri:WorkOrderResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tempuri__LineInventory(MESServiceSoapService *soap)
{	struct __tempuri__LineInventory soap_tmp___tempuri__LineInventory;
	_tempuri__LineInventoryResponse tempuri__LineInventoryResponse;
	tempuri__LineInventoryResponse.soap_default(soap);
	soap_default___tempuri__LineInventory(soap, &soap_tmp___tempuri__LineInventory);
	if (!soap_get___tempuri__LineInventory(soap, &soap_tmp___tempuri__LineInventory, "-tempuri:LineInventory", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->LineInventory(soap_tmp___tempuri__LineInventory.tempuri__LineInventory, tempuri__LineInventoryResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	tempuri__LineInventoryResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tempuri__LineInventoryResponse.soap_put(soap, "tempuri:LineInventoryResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tempuri__LineInventoryResponse.soap_put(soap, "tempuri:LineInventoryResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tempuri__LineInventoryUpdate(MESServiceSoapService *soap)
{	struct __tempuri__LineInventoryUpdate soap_tmp___tempuri__LineInventoryUpdate;
	_tempuri__LineInventoryUpdateResponse tempuri__LineInventoryUpdateResponse;
	tempuri__LineInventoryUpdateResponse.soap_default(soap);
	soap_default___tempuri__LineInventoryUpdate(soap, &soap_tmp___tempuri__LineInventoryUpdate);
	if (!soap_get___tempuri__LineInventoryUpdate(soap, &soap_tmp___tempuri__LineInventoryUpdate, "-tempuri:LineInventoryUpdate", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->LineInventoryUpdate(soap_tmp___tempuri__LineInventoryUpdate.tempuri__LineInventoryUpdate, tempuri__LineInventoryUpdateResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	tempuri__LineInventoryUpdateResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tempuri__LineInventoryUpdateResponse.soap_put(soap, "tempuri:LineInventoryUpdateResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tempuri__LineInventoryUpdateResponse.soap_put(soap, "tempuri:LineInventoryUpdateResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tempuri__LineInventoryReturn(MESServiceSoapService *soap)
{	struct __tempuri__LineInventoryReturn soap_tmp___tempuri__LineInventoryReturn;
	_tempuri__LineInventoryReturnResponse tempuri__LineInventoryReturnResponse;
	tempuri__LineInventoryReturnResponse.soap_default(soap);
	soap_default___tempuri__LineInventoryReturn(soap, &soap_tmp___tempuri__LineInventoryReturn);
	if (!soap_get___tempuri__LineInventoryReturn(soap, &soap_tmp___tempuri__LineInventoryReturn, "-tempuri:LineInventoryReturn", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->LineInventoryReturn(soap_tmp___tempuri__LineInventoryReturn.tempuri__LineInventoryReturn, tempuri__LineInventoryReturnResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	tempuri__LineInventoryReturnResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tempuri__LineInventoryReturnResponse.soap_put(soap, "tempuri:LineInventoryReturnResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tempuri__LineInventoryReturnResponse.soap_put(soap, "tempuri:LineInventoryReturnResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tempuri__AnDon(MESServiceSoapService *soap)
{	struct __tempuri__AnDon soap_tmp___tempuri__AnDon;
	_tempuri__AnDonResponse tempuri__AnDonResponse;
	tempuri__AnDonResponse.soap_default(soap);
	soap_default___tempuri__AnDon(soap, &soap_tmp___tempuri__AnDon);
	if (!soap_get___tempuri__AnDon(soap, &soap_tmp___tempuri__AnDon, "-tempuri:AnDon", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->AnDon(soap_tmp___tempuri__AnDon.tempuri__AnDon, tempuri__AnDonResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	tempuri__AnDonResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tempuri__AnDonResponse.soap_put(soap, "tempuri:AnDonResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tempuri__AnDonResponse.soap_put(soap, "tempuri:AnDonResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tempuri__AnDonCall(MESServiceSoapService *soap)
{	struct __tempuri__AnDonCall soap_tmp___tempuri__AnDonCall;
	_tempuri__AnDonCallResponse tempuri__AnDonCallResponse;
	tempuri__AnDonCallResponse.soap_default(soap);
	soap_default___tempuri__AnDonCall(soap, &soap_tmp___tempuri__AnDonCall);
	if (!soap_get___tempuri__AnDonCall(soap, &soap_tmp___tempuri__AnDonCall, "-tempuri:AnDonCall", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->AnDonCall(soap_tmp___tempuri__AnDonCall.tempuri__AnDonCall, tempuri__AnDonCallResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	tempuri__AnDonCallResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tempuri__AnDonCallResponse.soap_put(soap, "tempuri:AnDonCallResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tempuri__AnDonCallResponse.soap_put(soap, "tempuri:AnDonCallResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tempuri__AnDonTest(MESServiceSoapService *soap)
{	struct __tempuri__AnDonTest soap_tmp___tempuri__AnDonTest;
	_tempuri__AnDonTestResponse tempuri__AnDonTestResponse;
	tempuri__AnDonTestResponse.soap_default(soap);
	soap_default___tempuri__AnDonTest(soap, &soap_tmp___tempuri__AnDonTest);
	if (!soap_get___tempuri__AnDonTest(soap, &soap_tmp___tempuri__AnDonTest, "-tempuri:AnDonTest", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->AnDonTest(soap_tmp___tempuri__AnDonTest.tempuri__AnDonTest, tempuri__AnDonTestResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	tempuri__AnDonTestResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tempuri__AnDonTestResponse.soap_put(soap, "tempuri:AnDonTestResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tempuri__AnDonTestResponse.soap_put(soap, "tempuri:AnDonTestResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tempuri__ItemsAdd(MESServiceSoapService *soap)
{	struct __tempuri__ItemsAdd soap_tmp___tempuri__ItemsAdd;
	_tempuri__ItemsAddResponse tempuri__ItemsAddResponse;
	tempuri__ItemsAddResponse.soap_default(soap);
	soap_default___tempuri__ItemsAdd(soap, &soap_tmp___tempuri__ItemsAdd);
	if (!soap_get___tempuri__ItemsAdd(soap, &soap_tmp___tempuri__ItemsAdd, "-tempuri:ItemsAdd", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->ItemsAdd(soap_tmp___tempuri__ItemsAdd.tempuri__ItemsAdd, tempuri__ItemsAddResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	tempuri__ItemsAddResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tempuri__ItemsAddResponse.soap_put(soap, "tempuri:ItemsAddResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tempuri__ItemsAddResponse.soap_put(soap, "tempuri:ItemsAddResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tempuri__DocAdd(MESServiceSoapService *soap)
{	struct __tempuri__DocAdd soap_tmp___tempuri__DocAdd;
	_tempuri__DocAddResponse tempuri__DocAddResponse;
	tempuri__DocAddResponse.soap_default(soap);
	soap_default___tempuri__DocAdd(soap, &soap_tmp___tempuri__DocAdd);
	if (!soap_get___tempuri__DocAdd(soap, &soap_tmp___tempuri__DocAdd, "-tempuri:DocAdd", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->DocAdd(soap_tmp___tempuri__DocAdd.tempuri__DocAdd, tempuri__DocAddResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	tempuri__DocAddResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tempuri__DocAddResponse.soap_put(soap, "tempuri:DocAddResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tempuri__DocAddResponse.soap_put(soap, "tempuri:DocAddResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tempuri__SetExMail(MESServiceSoapService *soap)
{	struct __tempuri__SetExMail soap_tmp___tempuri__SetExMail;
	_tempuri__SetExMailResponse tempuri__SetExMailResponse;
	tempuri__SetExMailResponse.soap_default(soap);
	soap_default___tempuri__SetExMail(soap, &soap_tmp___tempuri__SetExMail);
	if (!soap_get___tempuri__SetExMail(soap, &soap_tmp___tempuri__SetExMail, "-tempuri:SetExMail", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->SetExMail(soap_tmp___tempuri__SetExMail.tempuri__SetExMail, tempuri__SetExMailResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	tempuri__SetExMailResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tempuri__SetExMailResponse.soap_put(soap, "tempuri:SetExMailResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tempuri__SetExMailResponse.soap_put(soap, "tempuri:SetExMailResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tempuri__GetDept(MESServiceSoapService *soap)
{	struct __tempuri__GetDept soap_tmp___tempuri__GetDept;
	_tempuri__GetDeptResponse tempuri__GetDeptResponse;
	tempuri__GetDeptResponse.soap_default(soap);
	soap_default___tempuri__GetDept(soap, &soap_tmp___tempuri__GetDept);
	if (!soap_get___tempuri__GetDept(soap, &soap_tmp___tempuri__GetDept, "-tempuri:GetDept", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->GetDept(soap_tmp___tempuri__GetDept.tempuri__GetDept, tempuri__GetDeptResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	tempuri__GetDeptResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tempuri__GetDeptResponse.soap_put(soap, "tempuri:GetDeptResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tempuri__GetDeptResponse.soap_put(soap, "tempuri:GetDeptResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tempuri__GetPower(MESServiceSoapService *soap)
{	struct __tempuri__GetPower soap_tmp___tempuri__GetPower;
	_tempuri__GetPowerResponse tempuri__GetPowerResponse;
	tempuri__GetPowerResponse.soap_default(soap);
	soap_default___tempuri__GetPower(soap, &soap_tmp___tempuri__GetPower);
	if (!soap_get___tempuri__GetPower(soap, &soap_tmp___tempuri__GetPower, "-tempuri:GetPower", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->GetPower(soap_tmp___tempuri__GetPower.tempuri__GetPower, tempuri__GetPowerResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	tempuri__GetPowerResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tempuri__GetPowerResponse.soap_put(soap, "tempuri:GetPowerResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tempuri__GetPowerResponse.soap_put(soap, "tempuri:GetPowerResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tempuri__Login(MESServiceSoapService *soap)
{	struct __tempuri__Login soap_tmp___tempuri__Login;
	_tempuri__LoginResponse tempuri__LoginResponse;
	tempuri__LoginResponse.soap_default(soap);
	soap_default___tempuri__Login(soap, &soap_tmp___tempuri__Login);
	if (!soap_get___tempuri__Login(soap, &soap_tmp___tempuri__Login, "-tempuri:Login", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->Login(soap_tmp___tempuri__Login.tempuri__Login, tempuri__LoginResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	tempuri__LoginResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tempuri__LoginResponse.soap_put(soap, "tempuri:LoginResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tempuri__LoginResponse.soap_put(soap, "tempuri:LoginResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tempuri__GetDate_(MESServiceSoapService *soap)
{	struct __tempuri__GetDate_ soap_tmp___tempuri__GetDate_;
	_tempuri__GetDateResponse tempuri__GetDateResponse;
	tempuri__GetDateResponse.soap_default(soap);
	soap_default___tempuri__GetDate_(soap, &soap_tmp___tempuri__GetDate_);
	if (!soap_get___tempuri__GetDate_(soap, &soap_tmp___tempuri__GetDate_, "-tempuri:GetDate", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->GetDate_(soap_tmp___tempuri__GetDate_.tempuri__GetDate, tempuri__GetDateResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	tempuri__GetDateResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tempuri__GetDateResponse.soap_put(soap, "tempuri:GetDateResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tempuri__GetDateResponse.soap_put(soap, "tempuri:GetDateResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tempuri__GetDocCode_(MESServiceSoapService *soap)
{	struct __tempuri__GetDocCode_ soap_tmp___tempuri__GetDocCode_;
	_tempuri__GetDocCodeResponse tempuri__GetDocCodeResponse;
	tempuri__GetDocCodeResponse.soap_default(soap);
	soap_default___tempuri__GetDocCode_(soap, &soap_tmp___tempuri__GetDocCode_);
	if (!soap_get___tempuri__GetDocCode_(soap, &soap_tmp___tempuri__GetDocCode_, "-tempuri:GetDocCode", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->GetDocCode_(soap_tmp___tempuri__GetDocCode_.tempuri__GetDocCode, tempuri__GetDocCodeResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	tempuri__GetDocCodeResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tempuri__GetDocCodeResponse.soap_put(soap, "tempuri:GetDocCodeResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tempuri__GetDocCodeResponse.soap_put(soap, "tempuri:GetDocCodeResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tempuri__ToolingTimes_(MESServiceSoapService *soap)
{	struct __tempuri__ToolingTimes_ soap_tmp___tempuri__ToolingTimes_;
	_tempuri__ToolingTimesResponse tempuri__ToolingTimesResponse;
	tempuri__ToolingTimesResponse.soap_default(soap);
	soap_default___tempuri__ToolingTimes_(soap, &soap_tmp___tempuri__ToolingTimes_);
	if (!soap_get___tempuri__ToolingTimes_(soap, &soap_tmp___tempuri__ToolingTimes_, "-tempuri:ToolingTimes", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->ToolingTimes_(soap_tmp___tempuri__ToolingTimes_.tempuri__ToolingTimes, tempuri__ToolingTimesResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	tempuri__ToolingTimesResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tempuri__ToolingTimesResponse.soap_put(soap, "tempuri:ToolingTimesResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tempuri__ToolingTimesResponse.soap_put(soap, "tempuri:ToolingTimesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tempuri__WorkOrder_(MESServiceSoapService *soap)
{	struct __tempuri__WorkOrder_ soap_tmp___tempuri__WorkOrder_;
	_tempuri__WorkOrderResponse tempuri__WorkOrderResponse;
	tempuri__WorkOrderResponse.soap_default(soap);
	soap_default___tempuri__WorkOrder_(soap, &soap_tmp___tempuri__WorkOrder_);
	if (!soap_get___tempuri__WorkOrder_(soap, &soap_tmp___tempuri__WorkOrder_, "-tempuri:WorkOrder", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->WorkOrder_(soap_tmp___tempuri__WorkOrder_.tempuri__WorkOrder, tempuri__WorkOrderResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	tempuri__WorkOrderResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tempuri__WorkOrderResponse.soap_put(soap, "tempuri:WorkOrderResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tempuri__WorkOrderResponse.soap_put(soap, "tempuri:WorkOrderResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tempuri__LineInventory_(MESServiceSoapService *soap)
{	struct __tempuri__LineInventory_ soap_tmp___tempuri__LineInventory_;
	_tempuri__LineInventoryResponse tempuri__LineInventoryResponse;
	tempuri__LineInventoryResponse.soap_default(soap);
	soap_default___tempuri__LineInventory_(soap, &soap_tmp___tempuri__LineInventory_);
	if (!soap_get___tempuri__LineInventory_(soap, &soap_tmp___tempuri__LineInventory_, "-tempuri:LineInventory", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->LineInventory_(soap_tmp___tempuri__LineInventory_.tempuri__LineInventory, tempuri__LineInventoryResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	tempuri__LineInventoryResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tempuri__LineInventoryResponse.soap_put(soap, "tempuri:LineInventoryResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tempuri__LineInventoryResponse.soap_put(soap, "tempuri:LineInventoryResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tempuri__LineInventoryUpdate_(MESServiceSoapService *soap)
{	struct __tempuri__LineInventoryUpdate_ soap_tmp___tempuri__LineInventoryUpdate_;
	_tempuri__LineInventoryUpdateResponse tempuri__LineInventoryUpdateResponse;
	tempuri__LineInventoryUpdateResponse.soap_default(soap);
	soap_default___tempuri__LineInventoryUpdate_(soap, &soap_tmp___tempuri__LineInventoryUpdate_);
	if (!soap_get___tempuri__LineInventoryUpdate_(soap, &soap_tmp___tempuri__LineInventoryUpdate_, "-tempuri:LineInventoryUpdate", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->LineInventoryUpdate_(soap_tmp___tempuri__LineInventoryUpdate_.tempuri__LineInventoryUpdate, tempuri__LineInventoryUpdateResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	tempuri__LineInventoryUpdateResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tempuri__LineInventoryUpdateResponse.soap_put(soap, "tempuri:LineInventoryUpdateResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tempuri__LineInventoryUpdateResponse.soap_put(soap, "tempuri:LineInventoryUpdateResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tempuri__LineInventoryReturn_(MESServiceSoapService *soap)
{	struct __tempuri__LineInventoryReturn_ soap_tmp___tempuri__LineInventoryReturn_;
	_tempuri__LineInventoryReturnResponse tempuri__LineInventoryReturnResponse;
	tempuri__LineInventoryReturnResponse.soap_default(soap);
	soap_default___tempuri__LineInventoryReturn_(soap, &soap_tmp___tempuri__LineInventoryReturn_);
	if (!soap_get___tempuri__LineInventoryReturn_(soap, &soap_tmp___tempuri__LineInventoryReturn_, "-tempuri:LineInventoryReturn", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->LineInventoryReturn_(soap_tmp___tempuri__LineInventoryReturn_.tempuri__LineInventoryReturn, tempuri__LineInventoryReturnResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	tempuri__LineInventoryReturnResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tempuri__LineInventoryReturnResponse.soap_put(soap, "tempuri:LineInventoryReturnResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tempuri__LineInventoryReturnResponse.soap_put(soap, "tempuri:LineInventoryReturnResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tempuri__AnDon_(MESServiceSoapService *soap)
{	struct __tempuri__AnDon_ soap_tmp___tempuri__AnDon_;
	_tempuri__AnDonResponse tempuri__AnDonResponse;
	tempuri__AnDonResponse.soap_default(soap);
	soap_default___tempuri__AnDon_(soap, &soap_tmp___tempuri__AnDon_);
	if (!soap_get___tempuri__AnDon_(soap, &soap_tmp___tempuri__AnDon_, "-tempuri:AnDon", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->AnDon_(soap_tmp___tempuri__AnDon_.tempuri__AnDon, tempuri__AnDonResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	tempuri__AnDonResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tempuri__AnDonResponse.soap_put(soap, "tempuri:AnDonResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tempuri__AnDonResponse.soap_put(soap, "tempuri:AnDonResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tempuri__AnDonCall_(MESServiceSoapService *soap)
{	struct __tempuri__AnDonCall_ soap_tmp___tempuri__AnDonCall_;
	_tempuri__AnDonCallResponse tempuri__AnDonCallResponse;
	tempuri__AnDonCallResponse.soap_default(soap);
	soap_default___tempuri__AnDonCall_(soap, &soap_tmp___tempuri__AnDonCall_);
	if (!soap_get___tempuri__AnDonCall_(soap, &soap_tmp___tempuri__AnDonCall_, "-tempuri:AnDonCall", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->AnDonCall_(soap_tmp___tempuri__AnDonCall_.tempuri__AnDonCall, tempuri__AnDonCallResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	tempuri__AnDonCallResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tempuri__AnDonCallResponse.soap_put(soap, "tempuri:AnDonCallResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tempuri__AnDonCallResponse.soap_put(soap, "tempuri:AnDonCallResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tempuri__AnDonTest_(MESServiceSoapService *soap)
{	struct __tempuri__AnDonTest_ soap_tmp___tempuri__AnDonTest_;
	_tempuri__AnDonTestResponse tempuri__AnDonTestResponse;
	tempuri__AnDonTestResponse.soap_default(soap);
	soap_default___tempuri__AnDonTest_(soap, &soap_tmp___tempuri__AnDonTest_);
	if (!soap_get___tempuri__AnDonTest_(soap, &soap_tmp___tempuri__AnDonTest_, "-tempuri:AnDonTest", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->AnDonTest_(soap_tmp___tempuri__AnDonTest_.tempuri__AnDonTest, tempuri__AnDonTestResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	tempuri__AnDonTestResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tempuri__AnDonTestResponse.soap_put(soap, "tempuri:AnDonTestResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tempuri__AnDonTestResponse.soap_put(soap, "tempuri:AnDonTestResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tempuri__ItemsAdd_(MESServiceSoapService *soap)
{	struct __tempuri__ItemsAdd_ soap_tmp___tempuri__ItemsAdd_;
	_tempuri__ItemsAddResponse tempuri__ItemsAddResponse;
	tempuri__ItemsAddResponse.soap_default(soap);
	soap_default___tempuri__ItemsAdd_(soap, &soap_tmp___tempuri__ItemsAdd_);
	if (!soap_get___tempuri__ItemsAdd_(soap, &soap_tmp___tempuri__ItemsAdd_, "-tempuri:ItemsAdd", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->ItemsAdd_(soap_tmp___tempuri__ItemsAdd_.tempuri__ItemsAdd, tempuri__ItemsAddResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	tempuri__ItemsAddResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tempuri__ItemsAddResponse.soap_put(soap, "tempuri:ItemsAddResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tempuri__ItemsAddResponse.soap_put(soap, "tempuri:ItemsAddResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tempuri__DocAdd_(MESServiceSoapService *soap)
{	struct __tempuri__DocAdd_ soap_tmp___tempuri__DocAdd_;
	_tempuri__DocAddResponse tempuri__DocAddResponse;
	tempuri__DocAddResponse.soap_default(soap);
	soap_default___tempuri__DocAdd_(soap, &soap_tmp___tempuri__DocAdd_);
	if (!soap_get___tempuri__DocAdd_(soap, &soap_tmp___tempuri__DocAdd_, "-tempuri:DocAdd", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->DocAdd_(soap_tmp___tempuri__DocAdd_.tempuri__DocAdd, tempuri__DocAddResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	tempuri__DocAddResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tempuri__DocAddResponse.soap_put(soap, "tempuri:DocAddResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tempuri__DocAddResponse.soap_put(soap, "tempuri:DocAddResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tempuri__SetExMail_(MESServiceSoapService *soap)
{	struct __tempuri__SetExMail_ soap_tmp___tempuri__SetExMail_;
	_tempuri__SetExMailResponse tempuri__SetExMailResponse;
	tempuri__SetExMailResponse.soap_default(soap);
	soap_default___tempuri__SetExMail_(soap, &soap_tmp___tempuri__SetExMail_);
	if (!soap_get___tempuri__SetExMail_(soap, &soap_tmp___tempuri__SetExMail_, "-tempuri:SetExMail", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->SetExMail_(soap_tmp___tempuri__SetExMail_.tempuri__SetExMail, tempuri__SetExMailResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	tempuri__SetExMailResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tempuri__SetExMailResponse.soap_put(soap, "tempuri:SetExMailResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tempuri__SetExMailResponse.soap_put(soap, "tempuri:SetExMailResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tempuri__GetDept_(MESServiceSoapService *soap)
{	struct __tempuri__GetDept_ soap_tmp___tempuri__GetDept_;
	_tempuri__GetDeptResponse tempuri__GetDeptResponse;
	tempuri__GetDeptResponse.soap_default(soap);
	soap_default___tempuri__GetDept_(soap, &soap_tmp___tempuri__GetDept_);
	if (!soap_get___tempuri__GetDept_(soap, &soap_tmp___tempuri__GetDept_, "-tempuri:GetDept", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->GetDept_(soap_tmp___tempuri__GetDept_.tempuri__GetDept, tempuri__GetDeptResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	tempuri__GetDeptResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tempuri__GetDeptResponse.soap_put(soap, "tempuri:GetDeptResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tempuri__GetDeptResponse.soap_put(soap, "tempuri:GetDeptResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tempuri__GetPower_(MESServiceSoapService *soap)
{	struct __tempuri__GetPower_ soap_tmp___tempuri__GetPower_;
	_tempuri__GetPowerResponse tempuri__GetPowerResponse;
	tempuri__GetPowerResponse.soap_default(soap);
	soap_default___tempuri__GetPower_(soap, &soap_tmp___tempuri__GetPower_);
	if (!soap_get___tempuri__GetPower_(soap, &soap_tmp___tempuri__GetPower_, "-tempuri:GetPower", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->GetPower_(soap_tmp___tempuri__GetPower_.tempuri__GetPower, tempuri__GetPowerResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	tempuri__GetPowerResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tempuri__GetPowerResponse.soap_put(soap, "tempuri:GetPowerResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tempuri__GetPowerResponse.soap_put(soap, "tempuri:GetPowerResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tempuri__Login_(MESServiceSoapService *soap)
{	struct __tempuri__Login_ soap_tmp___tempuri__Login_;
	_tempuri__LoginResponse tempuri__LoginResponse;
	tempuri__LoginResponse.soap_default(soap);
	soap_default___tempuri__Login_(soap, &soap_tmp___tempuri__Login_);
	if (!soap_get___tempuri__Login_(soap, &soap_tmp___tempuri__Login_, "-tempuri:Login", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->Login_(soap_tmp___tempuri__Login_.tempuri__Login, tempuri__LoginResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	tempuri__LoginResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tempuri__LoginResponse.soap_put(soap, "tempuri:LoginResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tempuri__LoginResponse.soap_put(soap, "tempuri:LoginResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}
/* End of server object code */
