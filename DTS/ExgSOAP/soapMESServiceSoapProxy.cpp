/* soapMESServiceSoapProxy.cpp
   Generated by gSOAP 2.8.64 for MESService.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapMESServiceSoapProxy.h"

MESServiceSoapProxy::MESServiceSoapProxy() : soap(SOAP_IO_DEFAULT)
{	MESServiceSoapProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

MESServiceSoapProxy::MESServiceSoapProxy(const MESServiceSoapProxy& rhs)
{	soap_copy_context(this, &rhs);
	this->soap_endpoint = rhs.soap_endpoint;
}

MESServiceSoapProxy::MESServiceSoapProxy(const struct soap &_soap) : soap(_soap)
{ }

MESServiceSoapProxy::MESServiceSoapProxy(const char *endpoint) : soap(SOAP_IO_DEFAULT)
{	MESServiceSoapProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = endpoint;
}

MESServiceSoapProxy::MESServiceSoapProxy(soap_mode iomode) : soap(iomode)
{	MESServiceSoapProxy_init(iomode, iomode);
}

MESServiceSoapProxy::MESServiceSoapProxy(const char *endpoint, soap_mode iomode) : soap(iomode)
{	MESServiceSoapProxy_init(iomode, iomode);
	soap_endpoint = endpoint;
}

MESServiceSoapProxy::MESServiceSoapProxy(soap_mode imode, soap_mode omode) : soap(imode, omode)
{	MESServiceSoapProxy_init(imode, omode);
}

MESServiceSoapProxy::~MESServiceSoapProxy()
{
	this->destroy();
	}

void MESServiceSoapProxy::MESServiceSoapProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] = {
        {"SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://schemas.xmlsoap.org/soap/envelope/", NULL},
        {"SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://schemas.xmlsoap.org/soap/encoding/", NULL},
        {"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
        {"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
        {"tempuri", "http://tempuri.org/", NULL, NULL},
        {NULL, NULL, NULL, NULL}
    };
	soap_set_namespaces(this, namespaces);
}

MESServiceSoapProxy *MESServiceSoapProxy::copy()
{	MESServiceSoapProxy *dup = SOAP_NEW_UNMANAGED(MESServiceSoapProxy(*(struct soap*)this));
	return dup;
}

MESServiceSoapProxy& MESServiceSoapProxy::operator=(const MESServiceSoapProxy& rhs)
{	soap_copy_context(this, &rhs);
	this->soap_endpoint = rhs.soap_endpoint;
	return *this;
}

void MESServiceSoapProxy::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void MESServiceSoapProxy::reset()
{	this->destroy();
	soap_done(this);
	soap_initialize(this);
	MESServiceSoapProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void MESServiceSoapProxy::soap_noheader()
{	this->header = NULL;
}

::SOAP_ENV__Header *MESServiceSoapProxy::soap_header()
{	return this->header;
}

::SOAP_ENV__Fault *MESServiceSoapProxy::soap_fault()
{	return this->fault;
}

const char *MESServiceSoapProxy::soap_fault_string()
{	return *soap_faultstring(this);
}

const char *MESServiceSoapProxy::soap_fault_detail()
{	return *soap_faultdetail(this);
}

int MESServiceSoapProxy::soap_close_socket()
{	return soap_closesock(this);
}

int MESServiceSoapProxy::soap_force_close_socket()
{	return soap_force_closesock(this);
}

void MESServiceSoapProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void MESServiceSoapProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}
#endif

char *MESServiceSoapProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

int MESServiceSoapProxy::GetDate(const char *endpoint, const char *soap_action, _tempuri__GetDate *tempuri__GetDate, _tempuri__GetDateResponse &tempuri__GetDateResponse)
{	struct soap *soap = this;
	struct __tempuri__GetDate soap_tmp___tempuri__GetDate;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://10.1.1.13:8001/MESService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/GetDate";
	soap_tmp___tempuri__GetDate.tempuri__GetDate = tempuri__GetDate;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___tempuri__GetDate(soap, &soap_tmp___tempuri__GetDate);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tempuri__GetDate(soap, &soap_tmp___tempuri__GetDate, "-tempuri:GetDate", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tempuri__GetDate(soap, &soap_tmp___tempuri__GetDate, "-tempuri:GetDate", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_tempuri__GetDateResponse*>(&tempuri__GetDateResponse)) // NULL ref?
		return soap_closesock(soap);
	tempuri__GetDateResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__GetDateResponse.soap_get(soap, "tempuri:GetDateResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int MESServiceSoapProxy::GetDocCode(const char *endpoint, const char *soap_action, _tempuri__GetDocCode *tempuri__GetDocCode, _tempuri__GetDocCodeResponse &tempuri__GetDocCodeResponse)
{	struct soap *soap = this;
	struct __tempuri__GetDocCode soap_tmp___tempuri__GetDocCode;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://10.1.1.13:8001/MESService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/GetDocCode";
	soap_tmp___tempuri__GetDocCode.tempuri__GetDocCode = tempuri__GetDocCode;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___tempuri__GetDocCode(soap, &soap_tmp___tempuri__GetDocCode);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tempuri__GetDocCode(soap, &soap_tmp___tempuri__GetDocCode, "-tempuri:GetDocCode", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tempuri__GetDocCode(soap, &soap_tmp___tempuri__GetDocCode, "-tempuri:GetDocCode", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_tempuri__GetDocCodeResponse*>(&tempuri__GetDocCodeResponse)) // NULL ref?
		return soap_closesock(soap);
	tempuri__GetDocCodeResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__GetDocCodeResponse.soap_get(soap, "tempuri:GetDocCodeResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int MESServiceSoapProxy::ToolingTimes(const char *endpoint, const char *soap_action, _tempuri__ToolingTimes *tempuri__ToolingTimes, _tempuri__ToolingTimesResponse &tempuri__ToolingTimesResponse)
{	struct soap *soap = this;
	struct __tempuri__ToolingTimes soap_tmp___tempuri__ToolingTimes;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://10.1.1.13:8001/MESService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/ToolingTimes";
	soap_tmp___tempuri__ToolingTimes.tempuri__ToolingTimes = tempuri__ToolingTimes;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___tempuri__ToolingTimes(soap, &soap_tmp___tempuri__ToolingTimes);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tempuri__ToolingTimes(soap, &soap_tmp___tempuri__ToolingTimes, "-tempuri:ToolingTimes", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tempuri__ToolingTimes(soap, &soap_tmp___tempuri__ToolingTimes, "-tempuri:ToolingTimes", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_tempuri__ToolingTimesResponse*>(&tempuri__ToolingTimesResponse)) // NULL ref?
		return soap_closesock(soap);
	tempuri__ToolingTimesResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__ToolingTimesResponse.soap_get(soap, "tempuri:ToolingTimesResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int MESServiceSoapProxy::WorkOrder(const char *endpoint, const char *soap_action, _tempuri__WorkOrder *tempuri__WorkOrder, _tempuri__WorkOrderResponse &tempuri__WorkOrderResponse)
{	struct soap *soap = this;
	struct __tempuri__WorkOrder soap_tmp___tempuri__WorkOrder;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://10.1.1.13:8001/MESService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/WorkOrder";
	soap_tmp___tempuri__WorkOrder.tempuri__WorkOrder = tempuri__WorkOrder;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___tempuri__WorkOrder(soap, &soap_tmp___tempuri__WorkOrder);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tempuri__WorkOrder(soap, &soap_tmp___tempuri__WorkOrder, "-tempuri:WorkOrder", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tempuri__WorkOrder(soap, &soap_tmp___tempuri__WorkOrder, "-tempuri:WorkOrder", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_tempuri__WorkOrderResponse*>(&tempuri__WorkOrderResponse)) // NULL ref?
		return soap_closesock(soap);
	tempuri__WorkOrderResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__WorkOrderResponse.soap_get(soap, "tempuri:WorkOrderResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int MESServiceSoapProxy::LineInventory(const char *endpoint, const char *soap_action, _tempuri__LineInventory *tempuri__LineInventory, _tempuri__LineInventoryResponse &tempuri__LineInventoryResponse)
{	struct soap *soap = this;
	struct __tempuri__LineInventory soap_tmp___tempuri__LineInventory;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://10.1.1.13:8001/MESService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/LineInventory";
	soap_tmp___tempuri__LineInventory.tempuri__LineInventory = tempuri__LineInventory;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___tempuri__LineInventory(soap, &soap_tmp___tempuri__LineInventory);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tempuri__LineInventory(soap, &soap_tmp___tempuri__LineInventory, "-tempuri:LineInventory", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tempuri__LineInventory(soap, &soap_tmp___tempuri__LineInventory, "-tempuri:LineInventory", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_tempuri__LineInventoryResponse*>(&tempuri__LineInventoryResponse)) // NULL ref?
		return soap_closesock(soap);
	tempuri__LineInventoryResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__LineInventoryResponse.soap_get(soap, "tempuri:LineInventoryResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int MESServiceSoapProxy::LineInventoryUpdate(const char *endpoint, const char *soap_action, _tempuri__LineInventoryUpdate *tempuri__LineInventoryUpdate, _tempuri__LineInventoryUpdateResponse &tempuri__LineInventoryUpdateResponse)
{	struct soap *soap = this;
	struct __tempuri__LineInventoryUpdate soap_tmp___tempuri__LineInventoryUpdate;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://10.1.1.13:8001/MESService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/LineInventoryUpdate";
	soap_tmp___tempuri__LineInventoryUpdate.tempuri__LineInventoryUpdate = tempuri__LineInventoryUpdate;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___tempuri__LineInventoryUpdate(soap, &soap_tmp___tempuri__LineInventoryUpdate);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tempuri__LineInventoryUpdate(soap, &soap_tmp___tempuri__LineInventoryUpdate, "-tempuri:LineInventoryUpdate", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tempuri__LineInventoryUpdate(soap, &soap_tmp___tempuri__LineInventoryUpdate, "-tempuri:LineInventoryUpdate", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_tempuri__LineInventoryUpdateResponse*>(&tempuri__LineInventoryUpdateResponse)) // NULL ref?
		return soap_closesock(soap);
	tempuri__LineInventoryUpdateResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__LineInventoryUpdateResponse.soap_get(soap, "tempuri:LineInventoryUpdateResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int MESServiceSoapProxy::LineInventoryReturn(const char *endpoint, const char *soap_action, _tempuri__LineInventoryReturn *tempuri__LineInventoryReturn, _tempuri__LineInventoryReturnResponse &tempuri__LineInventoryReturnResponse)
{	struct soap *soap = this;
	struct __tempuri__LineInventoryReturn soap_tmp___tempuri__LineInventoryReturn;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://10.1.1.13:8001/MESService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/LineInventoryReturn";
	soap_tmp___tempuri__LineInventoryReturn.tempuri__LineInventoryReturn = tempuri__LineInventoryReturn;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___tempuri__LineInventoryReturn(soap, &soap_tmp___tempuri__LineInventoryReturn);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tempuri__LineInventoryReturn(soap, &soap_tmp___tempuri__LineInventoryReturn, "-tempuri:LineInventoryReturn", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tempuri__LineInventoryReturn(soap, &soap_tmp___tempuri__LineInventoryReturn, "-tempuri:LineInventoryReturn", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_tempuri__LineInventoryReturnResponse*>(&tempuri__LineInventoryReturnResponse)) // NULL ref?
		return soap_closesock(soap);
	tempuri__LineInventoryReturnResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__LineInventoryReturnResponse.soap_get(soap, "tempuri:LineInventoryReturnResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int MESServiceSoapProxy::AnDon(const char *endpoint, const char *soap_action, _tempuri__AnDon *tempuri__AnDon, _tempuri__AnDonResponse &tempuri__AnDonResponse)
{	struct soap *soap = this;
	struct __tempuri__AnDon soap_tmp___tempuri__AnDon;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://10.1.1.13:8001/MESService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/AnDon";
	soap_tmp___tempuri__AnDon.tempuri__AnDon = tempuri__AnDon;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___tempuri__AnDon(soap, &soap_tmp___tempuri__AnDon);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tempuri__AnDon(soap, &soap_tmp___tempuri__AnDon, "-tempuri:AnDon", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tempuri__AnDon(soap, &soap_tmp___tempuri__AnDon, "-tempuri:AnDon", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_tempuri__AnDonResponse*>(&tempuri__AnDonResponse)) // NULL ref?
		return soap_closesock(soap);
	tempuri__AnDonResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__AnDonResponse.soap_get(soap, "tempuri:AnDonResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int MESServiceSoapProxy::AnDonCall(const char *endpoint, const char *soap_action, _tempuri__AnDonCall *tempuri__AnDonCall, _tempuri__AnDonCallResponse &tempuri__AnDonCallResponse)
{	struct soap *soap = this;
	struct __tempuri__AnDonCall soap_tmp___tempuri__AnDonCall;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://10.1.1.13:8001/MESService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/AnDonCall";
	soap_tmp___tempuri__AnDonCall.tempuri__AnDonCall = tempuri__AnDonCall;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___tempuri__AnDonCall(soap, &soap_tmp___tempuri__AnDonCall);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tempuri__AnDonCall(soap, &soap_tmp___tempuri__AnDonCall, "-tempuri:AnDonCall", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tempuri__AnDonCall(soap, &soap_tmp___tempuri__AnDonCall, "-tempuri:AnDonCall", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_tempuri__AnDonCallResponse*>(&tempuri__AnDonCallResponse)) // NULL ref?
		return soap_closesock(soap);
	tempuri__AnDonCallResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__AnDonCallResponse.soap_get(soap, "tempuri:AnDonCallResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int MESServiceSoapProxy::AnDonTest(const char *endpoint, const char *soap_action, _tempuri__AnDonTest *tempuri__AnDonTest, _tempuri__AnDonTestResponse &tempuri__AnDonTestResponse)
{	struct soap *soap = this;
	struct __tempuri__AnDonTest soap_tmp___tempuri__AnDonTest;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://10.1.1.13:8001/MESService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/AnDonTest";
	soap_tmp___tempuri__AnDonTest.tempuri__AnDonTest = tempuri__AnDonTest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___tempuri__AnDonTest(soap, &soap_tmp___tempuri__AnDonTest);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tempuri__AnDonTest(soap, &soap_tmp___tempuri__AnDonTest, "-tempuri:AnDonTest", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tempuri__AnDonTest(soap, &soap_tmp___tempuri__AnDonTest, "-tempuri:AnDonTest", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_tempuri__AnDonTestResponse*>(&tempuri__AnDonTestResponse)) // NULL ref?
		return soap_closesock(soap);
	tempuri__AnDonTestResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__AnDonTestResponse.soap_get(soap, "tempuri:AnDonTestResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int MESServiceSoapProxy::ItemsAdd(const char *endpoint, const char *soap_action, _tempuri__ItemsAdd *tempuri__ItemsAdd, _tempuri__ItemsAddResponse &tempuri__ItemsAddResponse)
{	struct soap *soap = this;
	struct __tempuri__ItemsAdd soap_tmp___tempuri__ItemsAdd;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://10.1.1.13:8001/MESService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/ItemsAdd";
	soap_tmp___tempuri__ItemsAdd.tempuri__ItemsAdd = tempuri__ItemsAdd;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___tempuri__ItemsAdd(soap, &soap_tmp___tempuri__ItemsAdd);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tempuri__ItemsAdd(soap, &soap_tmp___tempuri__ItemsAdd, "-tempuri:ItemsAdd", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tempuri__ItemsAdd(soap, &soap_tmp___tempuri__ItemsAdd, "-tempuri:ItemsAdd", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_tempuri__ItemsAddResponse*>(&tempuri__ItemsAddResponse)) // NULL ref?
		return soap_closesock(soap);
	tempuri__ItemsAddResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__ItemsAddResponse.soap_get(soap, "tempuri:ItemsAddResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int MESServiceSoapProxy::DocAdd(const char *endpoint, const char *soap_action, _tempuri__DocAdd *tempuri__DocAdd, _tempuri__DocAddResponse &tempuri__DocAddResponse)
{	struct soap *soap = this;
	struct __tempuri__DocAdd soap_tmp___tempuri__DocAdd;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://10.1.1.13:8001/MESService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/DocAdd";
	soap_tmp___tempuri__DocAdd.tempuri__DocAdd = tempuri__DocAdd;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___tempuri__DocAdd(soap, &soap_tmp___tempuri__DocAdd);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tempuri__DocAdd(soap, &soap_tmp___tempuri__DocAdd, "-tempuri:DocAdd", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tempuri__DocAdd(soap, &soap_tmp___tempuri__DocAdd, "-tempuri:DocAdd", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_tempuri__DocAddResponse*>(&tempuri__DocAddResponse)) // NULL ref?
		return soap_closesock(soap);
	tempuri__DocAddResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__DocAddResponse.soap_get(soap, "tempuri:DocAddResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int MESServiceSoapProxy::SetExMail(const char *endpoint, const char *soap_action, _tempuri__SetExMail *tempuri__SetExMail, _tempuri__SetExMailResponse &tempuri__SetExMailResponse)
{	struct soap *soap = this;
	struct __tempuri__SetExMail soap_tmp___tempuri__SetExMail;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://10.1.1.13:8001/MESService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/SetExMail";
	soap_tmp___tempuri__SetExMail.tempuri__SetExMail = tempuri__SetExMail;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___tempuri__SetExMail(soap, &soap_tmp___tempuri__SetExMail);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tempuri__SetExMail(soap, &soap_tmp___tempuri__SetExMail, "-tempuri:SetExMail", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tempuri__SetExMail(soap, &soap_tmp___tempuri__SetExMail, "-tempuri:SetExMail", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_tempuri__SetExMailResponse*>(&tempuri__SetExMailResponse)) // NULL ref?
		return soap_closesock(soap);
	tempuri__SetExMailResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__SetExMailResponse.soap_get(soap, "tempuri:SetExMailResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int MESServiceSoapProxy::GetDept(const char *endpoint, const char *soap_action, _tempuri__GetDept *tempuri__GetDept, _tempuri__GetDeptResponse &tempuri__GetDeptResponse)
{	struct soap *soap = this;
	struct __tempuri__GetDept soap_tmp___tempuri__GetDept;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://10.1.1.13:8001/MESService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/GetDept";
	soap_tmp___tempuri__GetDept.tempuri__GetDept = tempuri__GetDept;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___tempuri__GetDept(soap, &soap_tmp___tempuri__GetDept);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tempuri__GetDept(soap, &soap_tmp___tempuri__GetDept, "-tempuri:GetDept", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tempuri__GetDept(soap, &soap_tmp___tempuri__GetDept, "-tempuri:GetDept", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_tempuri__GetDeptResponse*>(&tempuri__GetDeptResponse)) // NULL ref?
		return soap_closesock(soap);
	tempuri__GetDeptResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__GetDeptResponse.soap_get(soap, "tempuri:GetDeptResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int MESServiceSoapProxy::GetPower(const char *endpoint, const char *soap_action, _tempuri__GetPower *tempuri__GetPower, _tempuri__GetPowerResponse &tempuri__GetPowerResponse)
{	struct soap *soap = this;
	struct __tempuri__GetPower soap_tmp___tempuri__GetPower;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://10.1.1.13:8001/MESService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/GetPower";
	soap_tmp___tempuri__GetPower.tempuri__GetPower = tempuri__GetPower;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___tempuri__GetPower(soap, &soap_tmp___tempuri__GetPower);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tempuri__GetPower(soap, &soap_tmp___tempuri__GetPower, "-tempuri:GetPower", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tempuri__GetPower(soap, &soap_tmp___tempuri__GetPower, "-tempuri:GetPower", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_tempuri__GetPowerResponse*>(&tempuri__GetPowerResponse)) // NULL ref?
		return soap_closesock(soap);
	tempuri__GetPowerResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__GetPowerResponse.soap_get(soap, "tempuri:GetPowerResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int MESServiceSoapProxy::Login(const char *endpoint, const char *soap_action, _tempuri__Login *tempuri__Login, _tempuri__LoginResponse &tempuri__LoginResponse)
{	struct soap *soap = this;
	struct __tempuri__Login soap_tmp___tempuri__Login;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://10.1.1.13:8001/MESService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/Login";
	soap_tmp___tempuri__Login.tempuri__Login = tempuri__Login;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___tempuri__Login(soap, &soap_tmp___tempuri__Login);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tempuri__Login(soap, &soap_tmp___tempuri__Login, "-tempuri:Login", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tempuri__Login(soap, &soap_tmp___tempuri__Login, "-tempuri:Login", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_tempuri__LoginResponse*>(&tempuri__LoginResponse)) // NULL ref?
		return soap_closesock(soap);
	tempuri__LoginResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__LoginResponse.soap_get(soap, "tempuri:LoginResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int MESServiceSoapProxy::GetDate_(const char *endpoint, const char *soap_action, _tempuri__GetDate *tempuri__GetDate, _tempuri__GetDateResponse &tempuri__GetDateResponse)
{	struct soap *soap = this;
	struct __tempuri__GetDate_ soap_tmp___tempuri__GetDate_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://10.1.1.13:8001/MESService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/GetDate";
	soap_tmp___tempuri__GetDate_.tempuri__GetDate = tempuri__GetDate;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___tempuri__GetDate_(soap, &soap_tmp___tempuri__GetDate_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tempuri__GetDate_(soap, &soap_tmp___tempuri__GetDate_, "-tempuri:GetDate", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tempuri__GetDate_(soap, &soap_tmp___tempuri__GetDate_, "-tempuri:GetDate", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_tempuri__GetDateResponse*>(&tempuri__GetDateResponse)) // NULL ref?
		return soap_closesock(soap);
	tempuri__GetDateResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__GetDateResponse.soap_get(soap, "tempuri:GetDateResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int MESServiceSoapProxy::GetDocCode_(const char *endpoint, const char *soap_action, _tempuri__GetDocCode *tempuri__GetDocCode, _tempuri__GetDocCodeResponse &tempuri__GetDocCodeResponse)
{	struct soap *soap = this;
	struct __tempuri__GetDocCode_ soap_tmp___tempuri__GetDocCode_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://10.1.1.13:8001/MESService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/GetDocCode";
	soap_tmp___tempuri__GetDocCode_.tempuri__GetDocCode = tempuri__GetDocCode;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___tempuri__GetDocCode_(soap, &soap_tmp___tempuri__GetDocCode_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tempuri__GetDocCode_(soap, &soap_tmp___tempuri__GetDocCode_, "-tempuri:GetDocCode", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tempuri__GetDocCode_(soap, &soap_tmp___tempuri__GetDocCode_, "-tempuri:GetDocCode", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_tempuri__GetDocCodeResponse*>(&tempuri__GetDocCodeResponse)) // NULL ref?
		return soap_closesock(soap);
	tempuri__GetDocCodeResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__GetDocCodeResponse.soap_get(soap, "tempuri:GetDocCodeResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int MESServiceSoapProxy::ToolingTimes_(const char *endpoint, const char *soap_action, _tempuri__ToolingTimes *tempuri__ToolingTimes, _tempuri__ToolingTimesResponse &tempuri__ToolingTimesResponse)
{	struct soap *soap = this;
	struct __tempuri__ToolingTimes_ soap_tmp___tempuri__ToolingTimes_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://10.1.1.13:8001/MESService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/ToolingTimes";
	soap_tmp___tempuri__ToolingTimes_.tempuri__ToolingTimes = tempuri__ToolingTimes;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___tempuri__ToolingTimes_(soap, &soap_tmp___tempuri__ToolingTimes_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tempuri__ToolingTimes_(soap, &soap_tmp___tempuri__ToolingTimes_, "-tempuri:ToolingTimes", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tempuri__ToolingTimes_(soap, &soap_tmp___tempuri__ToolingTimes_, "-tempuri:ToolingTimes", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_tempuri__ToolingTimesResponse*>(&tempuri__ToolingTimesResponse)) // NULL ref?
		return soap_closesock(soap);
	tempuri__ToolingTimesResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__ToolingTimesResponse.soap_get(soap, "tempuri:ToolingTimesResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int MESServiceSoapProxy::WorkOrder_(const char *endpoint, const char *soap_action, _tempuri__WorkOrder *tempuri__WorkOrder, _tempuri__WorkOrderResponse &tempuri__WorkOrderResponse)
{	struct soap *soap = this;
	struct __tempuri__WorkOrder_ soap_tmp___tempuri__WorkOrder_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://10.1.1.13:8001/MESService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/WorkOrder";
	soap_tmp___tempuri__WorkOrder_.tempuri__WorkOrder = tempuri__WorkOrder;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___tempuri__WorkOrder_(soap, &soap_tmp___tempuri__WorkOrder_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tempuri__WorkOrder_(soap, &soap_tmp___tempuri__WorkOrder_, "-tempuri:WorkOrder", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tempuri__WorkOrder_(soap, &soap_tmp___tempuri__WorkOrder_, "-tempuri:WorkOrder", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_tempuri__WorkOrderResponse*>(&tempuri__WorkOrderResponse)) // NULL ref?
		return soap_closesock(soap);
	tempuri__WorkOrderResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__WorkOrderResponse.soap_get(soap, "tempuri:WorkOrderResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int MESServiceSoapProxy::LineInventory_(const char *endpoint, const char *soap_action, _tempuri__LineInventory *tempuri__LineInventory, _tempuri__LineInventoryResponse &tempuri__LineInventoryResponse)
{	struct soap *soap = this;
	struct __tempuri__LineInventory_ soap_tmp___tempuri__LineInventory_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://10.1.1.13:8001/MESService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/LineInventory";
	soap_tmp___tempuri__LineInventory_.tempuri__LineInventory = tempuri__LineInventory;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___tempuri__LineInventory_(soap, &soap_tmp___tempuri__LineInventory_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tempuri__LineInventory_(soap, &soap_tmp___tempuri__LineInventory_, "-tempuri:LineInventory", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tempuri__LineInventory_(soap, &soap_tmp___tempuri__LineInventory_, "-tempuri:LineInventory", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_tempuri__LineInventoryResponse*>(&tempuri__LineInventoryResponse)) // NULL ref?
		return soap_closesock(soap);
	tempuri__LineInventoryResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__LineInventoryResponse.soap_get(soap, "tempuri:LineInventoryResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int MESServiceSoapProxy::LineInventoryUpdate_(const char *endpoint, const char *soap_action, _tempuri__LineInventoryUpdate *tempuri__LineInventoryUpdate, _tempuri__LineInventoryUpdateResponse &tempuri__LineInventoryUpdateResponse)
{	struct soap *soap = this;
	struct __tempuri__LineInventoryUpdate_ soap_tmp___tempuri__LineInventoryUpdate_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://10.1.1.13:8001/MESService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/LineInventoryUpdate";
	soap_tmp___tempuri__LineInventoryUpdate_.tempuri__LineInventoryUpdate = tempuri__LineInventoryUpdate;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___tempuri__LineInventoryUpdate_(soap, &soap_tmp___tempuri__LineInventoryUpdate_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tempuri__LineInventoryUpdate_(soap, &soap_tmp___tempuri__LineInventoryUpdate_, "-tempuri:LineInventoryUpdate", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tempuri__LineInventoryUpdate_(soap, &soap_tmp___tempuri__LineInventoryUpdate_, "-tempuri:LineInventoryUpdate", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_tempuri__LineInventoryUpdateResponse*>(&tempuri__LineInventoryUpdateResponse)) // NULL ref?
		return soap_closesock(soap);
	tempuri__LineInventoryUpdateResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__LineInventoryUpdateResponse.soap_get(soap, "tempuri:LineInventoryUpdateResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int MESServiceSoapProxy::LineInventoryReturn_(const char *endpoint, const char *soap_action, _tempuri__LineInventoryReturn *tempuri__LineInventoryReturn, _tempuri__LineInventoryReturnResponse &tempuri__LineInventoryReturnResponse)
{	struct soap *soap = this;
	struct __tempuri__LineInventoryReturn_ soap_tmp___tempuri__LineInventoryReturn_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://10.1.1.13:8001/MESService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/LineInventoryReturn";
	soap_tmp___tempuri__LineInventoryReturn_.tempuri__LineInventoryReturn = tempuri__LineInventoryReturn;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___tempuri__LineInventoryReturn_(soap, &soap_tmp___tempuri__LineInventoryReturn_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tempuri__LineInventoryReturn_(soap, &soap_tmp___tempuri__LineInventoryReturn_, "-tempuri:LineInventoryReturn", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tempuri__LineInventoryReturn_(soap, &soap_tmp___tempuri__LineInventoryReturn_, "-tempuri:LineInventoryReturn", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_tempuri__LineInventoryReturnResponse*>(&tempuri__LineInventoryReturnResponse)) // NULL ref?
		return soap_closesock(soap);
	tempuri__LineInventoryReturnResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__LineInventoryReturnResponse.soap_get(soap, "tempuri:LineInventoryReturnResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int MESServiceSoapProxy::AnDon_(const char *endpoint, const char *soap_action, _tempuri__AnDon *tempuri__AnDon, _tempuri__AnDonResponse &tempuri__AnDonResponse)
{	struct soap *soap = this;
	struct __tempuri__AnDon_ soap_tmp___tempuri__AnDon_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://10.1.1.13:8001/MESService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/AnDon";
	soap_tmp___tempuri__AnDon_.tempuri__AnDon = tempuri__AnDon;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___tempuri__AnDon_(soap, &soap_tmp___tempuri__AnDon_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tempuri__AnDon_(soap, &soap_tmp___tempuri__AnDon_, "-tempuri:AnDon", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tempuri__AnDon_(soap, &soap_tmp___tempuri__AnDon_, "-tempuri:AnDon", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_tempuri__AnDonResponse*>(&tempuri__AnDonResponse)) // NULL ref?
		return soap_closesock(soap);
	tempuri__AnDonResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__AnDonResponse.soap_get(soap, "tempuri:AnDonResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int MESServiceSoapProxy::AnDonCall_(const char *endpoint, const char *soap_action, _tempuri__AnDonCall *tempuri__AnDonCall, _tempuri__AnDonCallResponse &tempuri__AnDonCallResponse)
{	struct soap *soap = this;
	struct __tempuri__AnDonCall_ soap_tmp___tempuri__AnDonCall_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://10.1.1.13:8001/MESService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/AnDonCall";
	soap_tmp___tempuri__AnDonCall_.tempuri__AnDonCall = tempuri__AnDonCall;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___tempuri__AnDonCall_(soap, &soap_tmp___tempuri__AnDonCall_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tempuri__AnDonCall_(soap, &soap_tmp___tempuri__AnDonCall_, "-tempuri:AnDonCall", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tempuri__AnDonCall_(soap, &soap_tmp___tempuri__AnDonCall_, "-tempuri:AnDonCall", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_tempuri__AnDonCallResponse*>(&tempuri__AnDonCallResponse)) // NULL ref?
		return soap_closesock(soap);
	tempuri__AnDonCallResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__AnDonCallResponse.soap_get(soap, "tempuri:AnDonCallResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int MESServiceSoapProxy::AnDonTest_(const char *endpoint, const char *soap_action, _tempuri__AnDonTest *tempuri__AnDonTest, _tempuri__AnDonTestResponse &tempuri__AnDonTestResponse)
{	struct soap *soap = this;
	struct __tempuri__AnDonTest_ soap_tmp___tempuri__AnDonTest_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://10.1.1.13:8001/MESService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/AnDonTest";
	soap_tmp___tempuri__AnDonTest_.tempuri__AnDonTest = tempuri__AnDonTest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___tempuri__AnDonTest_(soap, &soap_tmp___tempuri__AnDonTest_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tempuri__AnDonTest_(soap, &soap_tmp___tempuri__AnDonTest_, "-tempuri:AnDonTest", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tempuri__AnDonTest_(soap, &soap_tmp___tempuri__AnDonTest_, "-tempuri:AnDonTest", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_tempuri__AnDonTestResponse*>(&tempuri__AnDonTestResponse)) // NULL ref?
		return soap_closesock(soap);
	tempuri__AnDonTestResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__AnDonTestResponse.soap_get(soap, "tempuri:AnDonTestResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int MESServiceSoapProxy::ItemsAdd_(const char *endpoint, const char *soap_action, _tempuri__ItemsAdd *tempuri__ItemsAdd, _tempuri__ItemsAddResponse &tempuri__ItemsAddResponse)
{	struct soap *soap = this;
	struct __tempuri__ItemsAdd_ soap_tmp___tempuri__ItemsAdd_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://10.1.1.13:8001/MESService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/ItemsAdd";
	soap_tmp___tempuri__ItemsAdd_.tempuri__ItemsAdd = tempuri__ItemsAdd;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___tempuri__ItemsAdd_(soap, &soap_tmp___tempuri__ItemsAdd_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tempuri__ItemsAdd_(soap, &soap_tmp___tempuri__ItemsAdd_, "-tempuri:ItemsAdd", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tempuri__ItemsAdd_(soap, &soap_tmp___tempuri__ItemsAdd_, "-tempuri:ItemsAdd", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_tempuri__ItemsAddResponse*>(&tempuri__ItemsAddResponse)) // NULL ref?
		return soap_closesock(soap);
	tempuri__ItemsAddResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__ItemsAddResponse.soap_get(soap, "tempuri:ItemsAddResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int MESServiceSoapProxy::DocAdd_(const char *endpoint, const char *soap_action, _tempuri__DocAdd *tempuri__DocAdd, _tempuri__DocAddResponse &tempuri__DocAddResponse)
{	struct soap *soap = this;
	struct __tempuri__DocAdd_ soap_tmp___tempuri__DocAdd_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://10.1.1.13:8001/MESService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/DocAdd";
	soap_tmp___tempuri__DocAdd_.tempuri__DocAdd = tempuri__DocAdd;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___tempuri__DocAdd_(soap, &soap_tmp___tempuri__DocAdd_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tempuri__DocAdd_(soap, &soap_tmp___tempuri__DocAdd_, "-tempuri:DocAdd", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tempuri__DocAdd_(soap, &soap_tmp___tempuri__DocAdd_, "-tempuri:DocAdd", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_tempuri__DocAddResponse*>(&tempuri__DocAddResponse)) // NULL ref?
		return soap_closesock(soap);
	tempuri__DocAddResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__DocAddResponse.soap_get(soap, "tempuri:DocAddResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int MESServiceSoapProxy::SetExMail_(const char *endpoint, const char *soap_action, _tempuri__SetExMail *tempuri__SetExMail, _tempuri__SetExMailResponse &tempuri__SetExMailResponse)
{	struct soap *soap = this;
	struct __tempuri__SetExMail_ soap_tmp___tempuri__SetExMail_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://10.1.1.13:8001/MESService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/SetExMail";
	soap_tmp___tempuri__SetExMail_.tempuri__SetExMail = tempuri__SetExMail;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___tempuri__SetExMail_(soap, &soap_tmp___tempuri__SetExMail_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tempuri__SetExMail_(soap, &soap_tmp___tempuri__SetExMail_, "-tempuri:SetExMail", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tempuri__SetExMail_(soap, &soap_tmp___tempuri__SetExMail_, "-tempuri:SetExMail", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_tempuri__SetExMailResponse*>(&tempuri__SetExMailResponse)) // NULL ref?
		return soap_closesock(soap);
	tempuri__SetExMailResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__SetExMailResponse.soap_get(soap, "tempuri:SetExMailResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int MESServiceSoapProxy::GetDept_(const char *endpoint, const char *soap_action, _tempuri__GetDept *tempuri__GetDept, _tempuri__GetDeptResponse &tempuri__GetDeptResponse)
{	struct soap *soap = this;
	struct __tempuri__GetDept_ soap_tmp___tempuri__GetDept_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://10.1.1.13:8001/MESService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/GetDept";
	soap_tmp___tempuri__GetDept_.tempuri__GetDept = tempuri__GetDept;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___tempuri__GetDept_(soap, &soap_tmp___tempuri__GetDept_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tempuri__GetDept_(soap, &soap_tmp___tempuri__GetDept_, "-tempuri:GetDept", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tempuri__GetDept_(soap, &soap_tmp___tempuri__GetDept_, "-tempuri:GetDept", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_tempuri__GetDeptResponse*>(&tempuri__GetDeptResponse)) // NULL ref?
		return soap_closesock(soap);
	tempuri__GetDeptResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__GetDeptResponse.soap_get(soap, "tempuri:GetDeptResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int MESServiceSoapProxy::GetPower_(const char *endpoint, const char *soap_action, _tempuri__GetPower *tempuri__GetPower, _tempuri__GetPowerResponse &tempuri__GetPowerResponse)
{	struct soap *soap = this;
	struct __tempuri__GetPower_ soap_tmp___tempuri__GetPower_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://10.1.1.13:8001/MESService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/GetPower";
	soap_tmp___tempuri__GetPower_.tempuri__GetPower = tempuri__GetPower;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___tempuri__GetPower_(soap, &soap_tmp___tempuri__GetPower_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tempuri__GetPower_(soap, &soap_tmp___tempuri__GetPower_, "-tempuri:GetPower", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tempuri__GetPower_(soap, &soap_tmp___tempuri__GetPower_, "-tempuri:GetPower", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_tempuri__GetPowerResponse*>(&tempuri__GetPowerResponse)) // NULL ref?
		return soap_closesock(soap);
	tempuri__GetPowerResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__GetPowerResponse.soap_get(soap, "tempuri:GetPowerResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int MESServiceSoapProxy::Login_(const char *endpoint, const char *soap_action, _tempuri__Login *tempuri__Login, _tempuri__LoginResponse &tempuri__LoginResponse)
{	struct soap *soap = this;
	struct __tempuri__Login_ soap_tmp___tempuri__Login_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://10.1.1.13:8001/MESService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/Login";
	soap_tmp___tempuri__Login_.tempuri__Login = tempuri__Login;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___tempuri__Login_(soap, &soap_tmp___tempuri__Login_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tempuri__Login_(soap, &soap_tmp___tempuri__Login_, "-tempuri:Login", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tempuri__Login_(soap, &soap_tmp___tempuri__Login_, "-tempuri:Login", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_tempuri__LoginResponse*>(&tempuri__LoginResponse)) // NULL ref?
		return soap_closesock(soap);
	tempuri__LoginResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__LoginResponse.soap_get(soap, "tempuri:LoginResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
