/* soapMESServiceSoapService.h
   Generated by gSOAP 2.8.51 for MESService.h

gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapMESServiceSoapService_H
#define soapMESServiceSoapService_H
#include "soapH.h"

    class SOAP_CMAC MESServiceSoapService : public soap {
      public:
        /// Variables globally declared in MESService.h, if any
        /// Construct a service with new managing context
        MESServiceSoapService();
        /// Copy constructor
        MESServiceSoapService(const MESServiceSoapService&);
        /// Construct service given a managing context
        MESServiceSoapService(const struct soap&);
        /// Constructor taking input+output mode flags for the new managing context
        MESServiceSoapService(soap_mode iomode);
        /// Constructor taking input and output mode flags for the new managing context
        MESServiceSoapService(soap_mode imode, soap_mode omode);
        /// Destructor deletes deserialized data and managing context
        virtual ~MESServiceSoapService();
        /// Delete all deserialized data (with soap_destroy() and soap_end())
        virtual void destroy();
        /// Delete all deserialized data and reset to defaults
        virtual void reset();
        /// Initializer used by constructors
        virtual void MESServiceSoapService_init(soap_mode imode, soap_mode omode);
        /// Return a copy that has a new managing context with the same engine state
        virtual MESServiceSoapService *copy() SOAP_PURE_VIRTUAL;
        /// Copy assignment
        MESServiceSoapService& operator=(const MESServiceSoapService&);
        /// Close connection (normally automatic)
        virtual int soap_close_socket();
        /// Force close connection (can kill a thread blocked on IO)
        virtual int soap_force_close_socket();
        /// Return sender-related fault to sender
        virtual int soap_senderfault(const char *string, const char *detailXML);
        /// Return sender-related fault with SOAP 1.2 subcode to sender
        virtual int soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML);
        /// Return receiver-related fault to sender
        virtual int soap_receiverfault(const char *string, const char *detailXML);
        /// Return receiver-related fault with SOAP 1.2 subcode to sender
        virtual int soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML);
        /// Print fault
        virtual void soap_print_fault(FILE*);
    #ifndef WITH_LEAN
    #ifndef WITH_COMPAT
        /// Print fault to stream
        virtual void soap_stream_fault(std::ostream&);
    #endif
        /// Write fault to buffer
        virtual char *soap_sprint_fault(char *buf, size_t len);
    #endif
        /// Disables and removes SOAP Header from message by setting soap->header = NULL
        virtual void soap_noheader();
        /// Get SOAP Header structure (i.e. soap->header, which is NULL when absent)
        virtual ::SOAP_ENV__Header *soap_header();
    #ifndef WITH_NOIO
        /// Run simple single-thread (iterative, non-SSL) service on port until a connection error occurs (returns SOAP_OK or error code), use this->bind_flag = SO_REUSEADDR to rebind for immediate rerun
        virtual int run(int port);
    #if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
        /// Run simple single-thread SSL service on port until a connection error occurs (returns SOAP_OK or error code), use this->bind_flag = SO_REUSEADDR to rebind for immediate rerun
        virtual int ssl_run(int port);
    #endif
        /// Bind service to port (returns master socket or SOAP_INVALID_SOCKET)
        virtual SOAP_SOCKET bind(const char *host, int port, int backlog);
        /// Accept next request (returns socket or SOAP_INVALID_SOCKET)
        virtual SOAP_SOCKET accept();
    #if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
        /// When SSL is used, after accept() should perform and accept SSL handshake
        virtual int ssl_accept();
    #endif
    #endif
        /// After accept() serve this request (returns SOAP_OK or error code)
        virtual int serve();
        /// Used by serve() to dispatch a request (returns SOAP_OK or error code)
        virtual int dispatch();
        ///
        /// Service operations are listed below (you should define these)
        /// Note: compile with -DWITH_PURE_VIRTUAL for pure virtual methods
        ///
        /// Web service operation 'GetDate' (returns SOAP_OK or error code)
        virtual int GetDate(_tempuri__GetDate *tempuri__GetDate, _tempuri__GetDateResponse &tempuri__GetDateResponse) SOAP_PURE_VIRTUAL;
        /// Web service operation 'GetDocCode' (returns SOAP_OK or error code)
        virtual int GetDocCode(_tempuri__GetDocCode *tempuri__GetDocCode, _tempuri__GetDocCodeResponse &tempuri__GetDocCodeResponse) SOAP_PURE_VIRTUAL;
        /// Web service operation 'ToolingTimes' (returns SOAP_OK or error code)
        virtual int ToolingTimes(_tempuri__ToolingTimes *tempuri__ToolingTimes, _tempuri__ToolingTimesResponse &tempuri__ToolingTimesResponse) SOAP_PURE_VIRTUAL;
        /// Web service operation 'WorkOrder' (returns SOAP_OK or error code)
        virtual int WorkOrder(_tempuri__WorkOrder *tempuri__WorkOrder, _tempuri__WorkOrderResponse &tempuri__WorkOrderResponse) SOAP_PURE_VIRTUAL;
        /// Web service operation 'LineInventory' (returns SOAP_OK or error code)
        virtual int LineInventory(_tempuri__LineInventory *tempuri__LineInventory, _tempuri__LineInventoryResponse &tempuri__LineInventoryResponse) SOAP_PURE_VIRTUAL;
        /// Web service operation 'LineInventoryUpdate' (returns SOAP_OK or error code)
        virtual int LineInventoryUpdate(_tempuri__LineInventoryUpdate *tempuri__LineInventoryUpdate, _tempuri__LineInventoryUpdateResponse &tempuri__LineInventoryUpdateResponse) SOAP_PURE_VIRTUAL;
        /// Web service operation 'LineInventoryReturn' (returns SOAP_OK or error code)
        virtual int LineInventoryReturn(_tempuri__LineInventoryReturn *tempuri__LineInventoryReturn, _tempuri__LineInventoryReturnResponse &tempuri__LineInventoryReturnResponse) SOAP_PURE_VIRTUAL;
        /// Web service operation 'AnDon' (returns SOAP_OK or error code)
        virtual int AnDon(_tempuri__AnDon *tempuri__AnDon, _tempuri__AnDonResponse &tempuri__AnDonResponse) SOAP_PURE_VIRTUAL;
        /// Web service operation 'AnDonCall' (returns SOAP_OK or error code)
        virtual int AnDonCall(_tempuri__AnDonCall *tempuri__AnDonCall, _tempuri__AnDonCallResponse &tempuri__AnDonCallResponse) SOAP_PURE_VIRTUAL;
        /// Web service operation 'AnDonTest' (returns SOAP_OK or error code)
        virtual int AnDonTest(_tempuri__AnDonTest *tempuri__AnDonTest, _tempuri__AnDonTestResponse &tempuri__AnDonTestResponse) SOAP_PURE_VIRTUAL;
        /// Web service operation 'ItemsAdd' (returns SOAP_OK or error code)
        virtual int ItemsAdd(_tempuri__ItemsAdd *tempuri__ItemsAdd, _tempuri__ItemsAddResponse &tempuri__ItemsAddResponse) SOAP_PURE_VIRTUAL;
        /// Web service operation 'DocAdd' (returns SOAP_OK or error code)
        virtual int DocAdd(_tempuri__DocAdd *tempuri__DocAdd, _tempuri__DocAddResponse &tempuri__DocAddResponse) SOAP_PURE_VIRTUAL;
        /// Web service operation 'SetExMail' (returns SOAP_OK or error code)
        virtual int SetExMail(_tempuri__SetExMail *tempuri__SetExMail, _tempuri__SetExMailResponse &tempuri__SetExMailResponse) SOAP_PURE_VIRTUAL;
        /// Web service operation 'GetDept' (returns SOAP_OK or error code)
        virtual int GetDept(_tempuri__GetDept *tempuri__GetDept, _tempuri__GetDeptResponse &tempuri__GetDeptResponse) SOAP_PURE_VIRTUAL;
        /// Web service operation 'GetPower' (returns SOAP_OK or error code)
        virtual int GetPower(_tempuri__GetPower *tempuri__GetPower, _tempuri__GetPowerResponse &tempuri__GetPowerResponse) SOAP_PURE_VIRTUAL;
        /// Web service operation 'Login' (returns SOAP_OK or error code)
        virtual int Login(_tempuri__Login *tempuri__Login, _tempuri__LoginResponse &tempuri__LoginResponse) SOAP_PURE_VIRTUAL;
        /// Web service operation 'GetDate' (returns SOAP_OK or error code)
        virtual int GetDate_(_tempuri__GetDate *tempuri__GetDate, _tempuri__GetDateResponse &tempuri__GetDateResponse) SOAP_PURE_VIRTUAL;
        /// Web service operation 'GetDocCode' (returns SOAP_OK or error code)
        virtual int GetDocCode_(_tempuri__GetDocCode *tempuri__GetDocCode, _tempuri__GetDocCodeResponse &tempuri__GetDocCodeResponse) SOAP_PURE_VIRTUAL;
        /// Web service operation 'ToolingTimes' (returns SOAP_OK or error code)
        virtual int ToolingTimes_(_tempuri__ToolingTimes *tempuri__ToolingTimes, _tempuri__ToolingTimesResponse &tempuri__ToolingTimesResponse) SOAP_PURE_VIRTUAL;
        /// Web service operation 'WorkOrder' (returns SOAP_OK or error code)
        virtual int WorkOrder_(_tempuri__WorkOrder *tempuri__WorkOrder, _tempuri__WorkOrderResponse &tempuri__WorkOrderResponse) SOAP_PURE_VIRTUAL;
        /// Web service operation 'LineInventory' (returns SOAP_OK or error code)
        virtual int LineInventory_(_tempuri__LineInventory *tempuri__LineInventory, _tempuri__LineInventoryResponse &tempuri__LineInventoryResponse) SOAP_PURE_VIRTUAL;
        /// Web service operation 'LineInventoryUpdate' (returns SOAP_OK or error code)
        virtual int LineInventoryUpdate_(_tempuri__LineInventoryUpdate *tempuri__LineInventoryUpdate, _tempuri__LineInventoryUpdateResponse &tempuri__LineInventoryUpdateResponse) SOAP_PURE_VIRTUAL;
        /// Web service operation 'LineInventoryReturn' (returns SOAP_OK or error code)
        virtual int LineInventoryReturn_(_tempuri__LineInventoryReturn *tempuri__LineInventoryReturn, _tempuri__LineInventoryReturnResponse &tempuri__LineInventoryReturnResponse) SOAP_PURE_VIRTUAL;
        /// Web service operation 'AnDon' (returns SOAP_OK or error code)
        virtual int AnDon_(_tempuri__AnDon *tempuri__AnDon, _tempuri__AnDonResponse &tempuri__AnDonResponse) SOAP_PURE_VIRTUAL;
        /// Web service operation 'AnDonCall' (returns SOAP_OK or error code)
        virtual int AnDonCall_(_tempuri__AnDonCall *tempuri__AnDonCall, _tempuri__AnDonCallResponse &tempuri__AnDonCallResponse) SOAP_PURE_VIRTUAL;
        /// Web service operation 'AnDonTest' (returns SOAP_OK or error code)
        virtual int AnDonTest_(_tempuri__AnDonTest *tempuri__AnDonTest, _tempuri__AnDonTestResponse &tempuri__AnDonTestResponse) SOAP_PURE_VIRTUAL;
        /// Web service operation 'ItemsAdd' (returns SOAP_OK or error code)
        virtual int ItemsAdd_(_tempuri__ItemsAdd *tempuri__ItemsAdd, _tempuri__ItemsAddResponse &tempuri__ItemsAddResponse) SOAP_PURE_VIRTUAL;
        /// Web service operation 'DocAdd' (returns SOAP_OK or error code)
        virtual int DocAdd_(_tempuri__DocAdd *tempuri__DocAdd, _tempuri__DocAddResponse &tempuri__DocAddResponse) SOAP_PURE_VIRTUAL;
        /// Web service operation 'SetExMail' (returns SOAP_OK or error code)
        virtual int SetExMail_(_tempuri__SetExMail *tempuri__SetExMail, _tempuri__SetExMailResponse &tempuri__SetExMailResponse) SOAP_PURE_VIRTUAL;
        /// Web service operation 'GetDept' (returns SOAP_OK or error code)
        virtual int GetDept_(_tempuri__GetDept *tempuri__GetDept, _tempuri__GetDeptResponse &tempuri__GetDeptResponse) SOAP_PURE_VIRTUAL;
        /// Web service operation 'GetPower' (returns SOAP_OK or error code)
        virtual int GetPower_(_tempuri__GetPower *tempuri__GetPower, _tempuri__GetPowerResponse &tempuri__GetPowerResponse) SOAP_PURE_VIRTUAL;
        /// Web service operation 'Login' (returns SOAP_OK or error code)
        virtual int Login_(_tempuri__Login *tempuri__Login, _tempuri__LoginResponse &tempuri__LoginResponse) SOAP_PURE_VIRTUAL;
    };
#endif
