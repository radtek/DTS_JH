/* soapH.h
   Generated by gSOAP 2.8.51 for MESService.h

gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_byte(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (soap_read_byte(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_int(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (soap_read_int(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tempuri__LoginResponse_DEFINED
#define SOAP_TYPE__tempuri__LoginResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__LoginResponse(struct soap*, const char*, int, const _tempuri__LoginResponse *, const char*);
SOAP_FMAC3 _tempuri__LoginResponse * SOAP_FMAC4 soap_in__tempuri__LoginResponse(struct soap*, const char*, _tempuri__LoginResponse *, const char*);
SOAP_FMAC1 _tempuri__LoginResponse * SOAP_FMAC2 soap_instantiate__tempuri__LoginResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__LoginResponse * soap_new__tempuri__LoginResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__LoginResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__LoginResponse * soap_new_req__tempuri__LoginResponse(
	struct soap *soap)
{
	_tempuri__LoginResponse *_p = soap_new__tempuri__LoginResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__LoginResponse * soap_new_set__tempuri__LoginResponse(
	struct soap *soap,
	char *LoginResult)
{
	_tempuri__LoginResponse *_p = soap_new__tempuri__LoginResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__LoginResponse::LoginResult = LoginResult;
	}
	return _p;
}

inline int soap_write__tempuri__LoginResponse(struct soap *soap, _tempuri__LoginResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:LoginResponse", p->soap_type() == SOAP_TYPE__tempuri__LoginResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__LoginResponse(struct soap *soap, const char *URL, _tempuri__LoginResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:LoginResponse", p->soap_type() == SOAP_TYPE__tempuri__LoginResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__LoginResponse(struct soap *soap, const char *URL, _tempuri__LoginResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:LoginResponse", p->soap_type() == SOAP_TYPE__tempuri__LoginResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__LoginResponse * SOAP_FMAC4 soap_get__tempuri__LoginResponse(struct soap*, _tempuri__LoginResponse *, const char*, const char*);

inline int soap_read__tempuri__LoginResponse(struct soap *soap, _tempuri__LoginResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tempuri__LoginResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__LoginResponse(struct soap *soap, const char *URL, _tempuri__LoginResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__tempuri__LoginResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__tempuri__LoginResponse(struct soap *soap, _tempuri__LoginResponse *p)
{
	if (soap_read__tempuri__LoginResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tempuri__Login_DEFINED
#define SOAP_TYPE__tempuri__Login_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__Login(struct soap*, const char*, int, const _tempuri__Login *, const char*);
SOAP_FMAC3 _tempuri__Login * SOAP_FMAC4 soap_in__tempuri__Login(struct soap*, const char*, _tempuri__Login *, const char*);
SOAP_FMAC1 _tempuri__Login * SOAP_FMAC2 soap_instantiate__tempuri__Login(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__Login * soap_new__tempuri__Login(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__Login(soap, n, NULL, NULL, NULL);
}

inline _tempuri__Login * soap_new_req__tempuri__Login(
	struct soap *soap)
{
	_tempuri__Login *_p = soap_new__tempuri__Login(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__Login * soap_new_set__tempuri__Login(
	struct soap *soap,
	char *Role,
	char *UserName,
	char *UserPwd)
{
	_tempuri__Login *_p = soap_new__tempuri__Login(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__Login::Role = Role;
		_p->_tempuri__Login::UserName = UserName;
		_p->_tempuri__Login::UserPwd = UserPwd;
	}
	return _p;
}

inline int soap_write__tempuri__Login(struct soap *soap, _tempuri__Login const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:Login", p->soap_type() == SOAP_TYPE__tempuri__Login ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__Login(struct soap *soap, const char *URL, _tempuri__Login const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:Login", p->soap_type() == SOAP_TYPE__tempuri__Login ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__Login(struct soap *soap, const char *URL, _tempuri__Login const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:Login", p->soap_type() == SOAP_TYPE__tempuri__Login ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__Login * SOAP_FMAC4 soap_get__tempuri__Login(struct soap*, _tempuri__Login *, const char*, const char*);

inline int soap_read__tempuri__Login(struct soap *soap, _tempuri__Login *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tempuri__Login(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__Login(struct soap *soap, const char *URL, _tempuri__Login *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__tempuri__Login(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__tempuri__Login(struct soap *soap, _tempuri__Login *p)
{
	if (soap_read__tempuri__Login(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tempuri__GetPowerResponse_DEFINED
#define SOAP_TYPE__tempuri__GetPowerResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetPowerResponse(struct soap*, const char*, int, const _tempuri__GetPowerResponse *, const char*);
SOAP_FMAC3 _tempuri__GetPowerResponse * SOAP_FMAC4 soap_in__tempuri__GetPowerResponse(struct soap*, const char*, _tempuri__GetPowerResponse *, const char*);
SOAP_FMAC1 _tempuri__GetPowerResponse * SOAP_FMAC2 soap_instantiate__tempuri__GetPowerResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__GetPowerResponse * soap_new__tempuri__GetPowerResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__GetPowerResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__GetPowerResponse * soap_new_req__tempuri__GetPowerResponse(
	struct soap *soap)
{
	_tempuri__GetPowerResponse *_p = soap_new__tempuri__GetPowerResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__GetPowerResponse * soap_new_set__tempuri__GetPowerResponse(
	struct soap *soap,
	char *GetPowerResult)
{
	_tempuri__GetPowerResponse *_p = soap_new__tempuri__GetPowerResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__GetPowerResponse::GetPowerResult = GetPowerResult;
	}
	return _p;
}

inline int soap_write__tempuri__GetPowerResponse(struct soap *soap, _tempuri__GetPowerResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetPowerResponse", p->soap_type() == SOAP_TYPE__tempuri__GetPowerResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__GetPowerResponse(struct soap *soap, const char *URL, _tempuri__GetPowerResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetPowerResponse", p->soap_type() == SOAP_TYPE__tempuri__GetPowerResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__GetPowerResponse(struct soap *soap, const char *URL, _tempuri__GetPowerResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetPowerResponse", p->soap_type() == SOAP_TYPE__tempuri__GetPowerResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__GetPowerResponse * SOAP_FMAC4 soap_get__tempuri__GetPowerResponse(struct soap*, _tempuri__GetPowerResponse *, const char*, const char*);

inline int soap_read__tempuri__GetPowerResponse(struct soap *soap, _tempuri__GetPowerResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tempuri__GetPowerResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__GetPowerResponse(struct soap *soap, const char *URL, _tempuri__GetPowerResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__tempuri__GetPowerResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__tempuri__GetPowerResponse(struct soap *soap, _tempuri__GetPowerResponse *p)
{
	if (soap_read__tempuri__GetPowerResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tempuri__GetPower_DEFINED
#define SOAP_TYPE__tempuri__GetPower_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetPower(struct soap*, const char*, int, const _tempuri__GetPower *, const char*);
SOAP_FMAC3 _tempuri__GetPower * SOAP_FMAC4 soap_in__tempuri__GetPower(struct soap*, const char*, _tempuri__GetPower *, const char*);
SOAP_FMAC1 _tempuri__GetPower * SOAP_FMAC2 soap_instantiate__tempuri__GetPower(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__GetPower * soap_new__tempuri__GetPower(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__GetPower(soap, n, NULL, NULL, NULL);
}

inline _tempuri__GetPower * soap_new_req__tempuri__GetPower(
	struct soap *soap)
{
	_tempuri__GetPower *_p = soap_new__tempuri__GetPower(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__GetPower * soap_new_set__tempuri__GetPower(
	struct soap *soap,
	char *DeptID)
{
	_tempuri__GetPower *_p = soap_new__tempuri__GetPower(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__GetPower::DeptID = DeptID;
	}
	return _p;
}

inline int soap_write__tempuri__GetPower(struct soap *soap, _tempuri__GetPower const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetPower", p->soap_type() == SOAP_TYPE__tempuri__GetPower ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__GetPower(struct soap *soap, const char *URL, _tempuri__GetPower const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetPower", p->soap_type() == SOAP_TYPE__tempuri__GetPower ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__GetPower(struct soap *soap, const char *URL, _tempuri__GetPower const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetPower", p->soap_type() == SOAP_TYPE__tempuri__GetPower ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__GetPower * SOAP_FMAC4 soap_get__tempuri__GetPower(struct soap*, _tempuri__GetPower *, const char*, const char*);

inline int soap_read__tempuri__GetPower(struct soap *soap, _tempuri__GetPower *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tempuri__GetPower(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__GetPower(struct soap *soap, const char *URL, _tempuri__GetPower *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__tempuri__GetPower(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__tempuri__GetPower(struct soap *soap, _tempuri__GetPower *p)
{
	if (soap_read__tempuri__GetPower(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tempuri__GetDeptResponse_DEFINED
#define SOAP_TYPE__tempuri__GetDeptResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetDeptResponse(struct soap*, const char*, int, const _tempuri__GetDeptResponse *, const char*);
SOAP_FMAC3 _tempuri__GetDeptResponse * SOAP_FMAC4 soap_in__tempuri__GetDeptResponse(struct soap*, const char*, _tempuri__GetDeptResponse *, const char*);
SOAP_FMAC1 _tempuri__GetDeptResponse * SOAP_FMAC2 soap_instantiate__tempuri__GetDeptResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__GetDeptResponse * soap_new__tempuri__GetDeptResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__GetDeptResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__GetDeptResponse * soap_new_req__tempuri__GetDeptResponse(
	struct soap *soap)
{
	_tempuri__GetDeptResponse *_p = soap_new__tempuri__GetDeptResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__GetDeptResponse * soap_new_set__tempuri__GetDeptResponse(
	struct soap *soap,
	char *GetDeptResult)
{
	_tempuri__GetDeptResponse *_p = soap_new__tempuri__GetDeptResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__GetDeptResponse::GetDeptResult = GetDeptResult;
	}
	return _p;
}

inline int soap_write__tempuri__GetDeptResponse(struct soap *soap, _tempuri__GetDeptResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetDeptResponse", p->soap_type() == SOAP_TYPE__tempuri__GetDeptResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__GetDeptResponse(struct soap *soap, const char *URL, _tempuri__GetDeptResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetDeptResponse", p->soap_type() == SOAP_TYPE__tempuri__GetDeptResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__GetDeptResponse(struct soap *soap, const char *URL, _tempuri__GetDeptResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetDeptResponse", p->soap_type() == SOAP_TYPE__tempuri__GetDeptResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__GetDeptResponse * SOAP_FMAC4 soap_get__tempuri__GetDeptResponse(struct soap*, _tempuri__GetDeptResponse *, const char*, const char*);

inline int soap_read__tempuri__GetDeptResponse(struct soap *soap, _tempuri__GetDeptResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tempuri__GetDeptResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__GetDeptResponse(struct soap *soap, const char *URL, _tempuri__GetDeptResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__tempuri__GetDeptResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__tempuri__GetDeptResponse(struct soap *soap, _tempuri__GetDeptResponse *p)
{
	if (soap_read__tempuri__GetDeptResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tempuri__GetDept_DEFINED
#define SOAP_TYPE__tempuri__GetDept_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetDept(struct soap*, const char*, int, const _tempuri__GetDept *, const char*);
SOAP_FMAC3 _tempuri__GetDept * SOAP_FMAC4 soap_in__tempuri__GetDept(struct soap*, const char*, _tempuri__GetDept *, const char*);
SOAP_FMAC1 _tempuri__GetDept * SOAP_FMAC2 soap_instantiate__tempuri__GetDept(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__GetDept * soap_new__tempuri__GetDept(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__GetDept(soap, n, NULL, NULL, NULL);
}

inline _tempuri__GetDept * soap_new_req__tempuri__GetDept(
	struct soap *soap)
{
	_tempuri__GetDept *_p = soap_new__tempuri__GetDept(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__GetDept * soap_new_set__tempuri__GetDept(
	struct soap *soap)
{
	_tempuri__GetDept *_p = soap_new__tempuri__GetDept(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tempuri__GetDept(struct soap *soap, _tempuri__GetDept const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetDept", p->soap_type() == SOAP_TYPE__tempuri__GetDept ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__GetDept(struct soap *soap, const char *URL, _tempuri__GetDept const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetDept", p->soap_type() == SOAP_TYPE__tempuri__GetDept ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__GetDept(struct soap *soap, const char *URL, _tempuri__GetDept const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetDept", p->soap_type() == SOAP_TYPE__tempuri__GetDept ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__GetDept * SOAP_FMAC4 soap_get__tempuri__GetDept(struct soap*, _tempuri__GetDept *, const char*, const char*);

inline int soap_read__tempuri__GetDept(struct soap *soap, _tempuri__GetDept *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tempuri__GetDept(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__GetDept(struct soap *soap, const char *URL, _tempuri__GetDept *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__tempuri__GetDept(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__tempuri__GetDept(struct soap *soap, _tempuri__GetDept *p)
{
	if (soap_read__tempuri__GetDept(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tempuri__SetExMailResponse_DEFINED
#define SOAP_TYPE__tempuri__SetExMailResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__SetExMailResponse(struct soap*, const char*, int, const _tempuri__SetExMailResponse *, const char*);
SOAP_FMAC3 _tempuri__SetExMailResponse * SOAP_FMAC4 soap_in__tempuri__SetExMailResponse(struct soap*, const char*, _tempuri__SetExMailResponse *, const char*);
SOAP_FMAC1 _tempuri__SetExMailResponse * SOAP_FMAC2 soap_instantiate__tempuri__SetExMailResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__SetExMailResponse * soap_new__tempuri__SetExMailResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__SetExMailResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__SetExMailResponse * soap_new_req__tempuri__SetExMailResponse(
	struct soap *soap)
{
	_tempuri__SetExMailResponse *_p = soap_new__tempuri__SetExMailResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__SetExMailResponse * soap_new_set__tempuri__SetExMailResponse(
	struct soap *soap)
{
	_tempuri__SetExMailResponse *_p = soap_new__tempuri__SetExMailResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tempuri__SetExMailResponse(struct soap *soap, _tempuri__SetExMailResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:SetExMailResponse", p->soap_type() == SOAP_TYPE__tempuri__SetExMailResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__SetExMailResponse(struct soap *soap, const char *URL, _tempuri__SetExMailResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:SetExMailResponse", p->soap_type() == SOAP_TYPE__tempuri__SetExMailResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__SetExMailResponse(struct soap *soap, const char *URL, _tempuri__SetExMailResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:SetExMailResponse", p->soap_type() == SOAP_TYPE__tempuri__SetExMailResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__SetExMailResponse * SOAP_FMAC4 soap_get__tempuri__SetExMailResponse(struct soap*, _tempuri__SetExMailResponse *, const char*, const char*);

inline int soap_read__tempuri__SetExMailResponse(struct soap *soap, _tempuri__SetExMailResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tempuri__SetExMailResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__SetExMailResponse(struct soap *soap, const char *URL, _tempuri__SetExMailResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__tempuri__SetExMailResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__tempuri__SetExMailResponse(struct soap *soap, _tempuri__SetExMailResponse *p)
{
	if (soap_read__tempuri__SetExMailResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tempuri__SetExMail_DEFINED
#define SOAP_TYPE__tempuri__SetExMail_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__SetExMail(struct soap*, const char*, int, const _tempuri__SetExMail *, const char*);
SOAP_FMAC3 _tempuri__SetExMail * SOAP_FMAC4 soap_in__tempuri__SetExMail(struct soap*, const char*, _tempuri__SetExMail *, const char*);
SOAP_FMAC1 _tempuri__SetExMail * SOAP_FMAC2 soap_instantiate__tempuri__SetExMail(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__SetExMail * soap_new__tempuri__SetExMail(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__SetExMail(soap, n, NULL, NULL, NULL);
}

inline _tempuri__SetExMail * soap_new_req__tempuri__SetExMail(
	struct soap *soap)
{
	_tempuri__SetExMail *_p = soap_new__tempuri__SetExMail(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__SetExMail * soap_new_set__tempuri__SetExMail(
	struct soap *soap,
	char *to,
	char *title,
	char *body)
{
	_tempuri__SetExMail *_p = soap_new__tempuri__SetExMail(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__SetExMail::to = to;
		_p->_tempuri__SetExMail::title = title;
		_p->_tempuri__SetExMail::body = body;
	}
	return _p;
}

inline int soap_write__tempuri__SetExMail(struct soap *soap, _tempuri__SetExMail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:SetExMail", p->soap_type() == SOAP_TYPE__tempuri__SetExMail ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__SetExMail(struct soap *soap, const char *URL, _tempuri__SetExMail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:SetExMail", p->soap_type() == SOAP_TYPE__tempuri__SetExMail ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__SetExMail(struct soap *soap, const char *URL, _tempuri__SetExMail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:SetExMail", p->soap_type() == SOAP_TYPE__tempuri__SetExMail ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__SetExMail * SOAP_FMAC4 soap_get__tempuri__SetExMail(struct soap*, _tempuri__SetExMail *, const char*, const char*);

inline int soap_read__tempuri__SetExMail(struct soap *soap, _tempuri__SetExMail *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tempuri__SetExMail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__SetExMail(struct soap *soap, const char *URL, _tempuri__SetExMail *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__tempuri__SetExMail(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__tempuri__SetExMail(struct soap *soap, _tempuri__SetExMail *p)
{
	if (soap_read__tempuri__SetExMail(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tempuri__DocAddResponse_DEFINED
#define SOAP_TYPE__tempuri__DocAddResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__DocAddResponse(struct soap*, const char*, int, const _tempuri__DocAddResponse *, const char*);
SOAP_FMAC3 _tempuri__DocAddResponse * SOAP_FMAC4 soap_in__tempuri__DocAddResponse(struct soap*, const char*, _tempuri__DocAddResponse *, const char*);
SOAP_FMAC1 _tempuri__DocAddResponse * SOAP_FMAC2 soap_instantiate__tempuri__DocAddResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__DocAddResponse * soap_new__tempuri__DocAddResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__DocAddResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__DocAddResponse * soap_new_req__tempuri__DocAddResponse(
	struct soap *soap)
{
	_tempuri__DocAddResponse *_p = soap_new__tempuri__DocAddResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__DocAddResponse * soap_new_set__tempuri__DocAddResponse(
	struct soap *soap,
	char *DocAddResult)
{
	_tempuri__DocAddResponse *_p = soap_new__tempuri__DocAddResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__DocAddResponse::DocAddResult = DocAddResult;
	}
	return _p;
}

inline int soap_write__tempuri__DocAddResponse(struct soap *soap, _tempuri__DocAddResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:DocAddResponse", p->soap_type() == SOAP_TYPE__tempuri__DocAddResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__DocAddResponse(struct soap *soap, const char *URL, _tempuri__DocAddResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:DocAddResponse", p->soap_type() == SOAP_TYPE__tempuri__DocAddResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__DocAddResponse(struct soap *soap, const char *URL, _tempuri__DocAddResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:DocAddResponse", p->soap_type() == SOAP_TYPE__tempuri__DocAddResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__DocAddResponse * SOAP_FMAC4 soap_get__tempuri__DocAddResponse(struct soap*, _tempuri__DocAddResponse *, const char*, const char*);

inline int soap_read__tempuri__DocAddResponse(struct soap *soap, _tempuri__DocAddResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tempuri__DocAddResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__DocAddResponse(struct soap *soap, const char *URL, _tempuri__DocAddResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__tempuri__DocAddResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__tempuri__DocAddResponse(struct soap *soap, _tempuri__DocAddResponse *p)
{
	if (soap_read__tempuri__DocAddResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tempuri__DocAdd_DEFINED
#define SOAP_TYPE__tempuri__DocAdd_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__DocAdd(struct soap*, const char*, int, const _tempuri__DocAdd *, const char*);
SOAP_FMAC3 _tempuri__DocAdd * SOAP_FMAC4 soap_in__tempuri__DocAdd(struct soap*, const char*, _tempuri__DocAdd *, const char*);
SOAP_FMAC1 _tempuri__DocAdd * SOAP_FMAC2 soap_instantiate__tempuri__DocAdd(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__DocAdd * soap_new__tempuri__DocAdd(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__DocAdd(soap, n, NULL, NULL, NULL);
}

inline _tempuri__DocAdd * soap_new_req__tempuri__DocAdd(
	struct soap *soap)
{
	_tempuri__DocAdd *_p = soap_new__tempuri__DocAdd(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__DocAdd * soap_new_set__tempuri__DocAdd(
	struct soap *soap,
	char *DocTypeCode,
	char *DocXmlMaster,
	char *DocXmlItems)
{
	_tempuri__DocAdd *_p = soap_new__tempuri__DocAdd(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__DocAdd::DocTypeCode = DocTypeCode;
		_p->_tempuri__DocAdd::DocXmlMaster = DocXmlMaster;
		_p->_tempuri__DocAdd::DocXmlItems = DocXmlItems;
	}
	return _p;
}

inline int soap_write__tempuri__DocAdd(struct soap *soap, _tempuri__DocAdd const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:DocAdd", p->soap_type() == SOAP_TYPE__tempuri__DocAdd ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__DocAdd(struct soap *soap, const char *URL, _tempuri__DocAdd const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:DocAdd", p->soap_type() == SOAP_TYPE__tempuri__DocAdd ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__DocAdd(struct soap *soap, const char *URL, _tempuri__DocAdd const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:DocAdd", p->soap_type() == SOAP_TYPE__tempuri__DocAdd ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__DocAdd * SOAP_FMAC4 soap_get__tempuri__DocAdd(struct soap*, _tempuri__DocAdd *, const char*, const char*);

inline int soap_read__tempuri__DocAdd(struct soap *soap, _tempuri__DocAdd *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tempuri__DocAdd(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__DocAdd(struct soap *soap, const char *URL, _tempuri__DocAdd *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__tempuri__DocAdd(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__tempuri__DocAdd(struct soap *soap, _tempuri__DocAdd *p)
{
	if (soap_read__tempuri__DocAdd(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tempuri__ItemsAddResponse_DEFINED
#define SOAP_TYPE__tempuri__ItemsAddResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__ItemsAddResponse(struct soap*, const char*, int, const _tempuri__ItemsAddResponse *, const char*);
SOAP_FMAC3 _tempuri__ItemsAddResponse * SOAP_FMAC4 soap_in__tempuri__ItemsAddResponse(struct soap*, const char*, _tempuri__ItemsAddResponse *, const char*);
SOAP_FMAC1 _tempuri__ItemsAddResponse * SOAP_FMAC2 soap_instantiate__tempuri__ItemsAddResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__ItemsAddResponse * soap_new__tempuri__ItemsAddResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__ItemsAddResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__ItemsAddResponse * soap_new_req__tempuri__ItemsAddResponse(
	struct soap *soap)
{
	_tempuri__ItemsAddResponse *_p = soap_new__tempuri__ItemsAddResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__ItemsAddResponse * soap_new_set__tempuri__ItemsAddResponse(
	struct soap *soap,
	char *ItemsAddResult)
{
	_tempuri__ItemsAddResponse *_p = soap_new__tempuri__ItemsAddResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__ItemsAddResponse::ItemsAddResult = ItemsAddResult;
	}
	return _p;
}

inline int soap_write__tempuri__ItemsAddResponse(struct soap *soap, _tempuri__ItemsAddResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:ItemsAddResponse", p->soap_type() == SOAP_TYPE__tempuri__ItemsAddResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__ItemsAddResponse(struct soap *soap, const char *URL, _tempuri__ItemsAddResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:ItemsAddResponse", p->soap_type() == SOAP_TYPE__tempuri__ItemsAddResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__ItemsAddResponse(struct soap *soap, const char *URL, _tempuri__ItemsAddResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:ItemsAddResponse", p->soap_type() == SOAP_TYPE__tempuri__ItemsAddResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__ItemsAddResponse * SOAP_FMAC4 soap_get__tempuri__ItemsAddResponse(struct soap*, _tempuri__ItemsAddResponse *, const char*, const char*);

inline int soap_read__tempuri__ItemsAddResponse(struct soap *soap, _tempuri__ItemsAddResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tempuri__ItemsAddResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__ItemsAddResponse(struct soap *soap, const char *URL, _tempuri__ItemsAddResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__tempuri__ItemsAddResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__tempuri__ItemsAddResponse(struct soap *soap, _tempuri__ItemsAddResponse *p)
{
	if (soap_read__tempuri__ItemsAddResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tempuri__ItemsAdd_DEFINED
#define SOAP_TYPE__tempuri__ItemsAdd_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__ItemsAdd(struct soap*, const char*, int, const _tempuri__ItemsAdd *, const char*);
SOAP_FMAC3 _tempuri__ItemsAdd * SOAP_FMAC4 soap_in__tempuri__ItemsAdd(struct soap*, const char*, _tempuri__ItemsAdd *, const char*);
SOAP_FMAC1 _tempuri__ItemsAdd * SOAP_FMAC2 soap_instantiate__tempuri__ItemsAdd(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__ItemsAdd * soap_new__tempuri__ItemsAdd(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__ItemsAdd(soap, n, NULL, NULL, NULL);
}

inline _tempuri__ItemsAdd * soap_new_req__tempuri__ItemsAdd(
	struct soap *soap)
{
	_tempuri__ItemsAdd *_p = soap_new__tempuri__ItemsAdd(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__ItemsAdd * soap_new_set__tempuri__ItemsAdd(
	struct soap *soap,
	char *itemDocXml)
{
	_tempuri__ItemsAdd *_p = soap_new__tempuri__ItemsAdd(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__ItemsAdd::itemDocXml = itemDocXml;
	}
	return _p;
}

inline int soap_write__tempuri__ItemsAdd(struct soap *soap, _tempuri__ItemsAdd const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:ItemsAdd", p->soap_type() == SOAP_TYPE__tempuri__ItemsAdd ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__ItemsAdd(struct soap *soap, const char *URL, _tempuri__ItemsAdd const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:ItemsAdd", p->soap_type() == SOAP_TYPE__tempuri__ItemsAdd ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__ItemsAdd(struct soap *soap, const char *URL, _tempuri__ItemsAdd const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:ItemsAdd", p->soap_type() == SOAP_TYPE__tempuri__ItemsAdd ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__ItemsAdd * SOAP_FMAC4 soap_get__tempuri__ItemsAdd(struct soap*, _tempuri__ItemsAdd *, const char*, const char*);

inline int soap_read__tempuri__ItemsAdd(struct soap *soap, _tempuri__ItemsAdd *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tempuri__ItemsAdd(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__ItemsAdd(struct soap *soap, const char *URL, _tempuri__ItemsAdd *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__tempuri__ItemsAdd(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__tempuri__ItemsAdd(struct soap *soap, _tempuri__ItemsAdd *p)
{
	if (soap_read__tempuri__ItemsAdd(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tempuri__AnDonTestResponse_DEFINED
#define SOAP_TYPE__tempuri__AnDonTestResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__AnDonTestResponse(struct soap*, const char*, int, const _tempuri__AnDonTestResponse *, const char*);
SOAP_FMAC3 _tempuri__AnDonTestResponse * SOAP_FMAC4 soap_in__tempuri__AnDonTestResponse(struct soap*, const char*, _tempuri__AnDonTestResponse *, const char*);
SOAP_FMAC1 _tempuri__AnDonTestResponse * SOAP_FMAC2 soap_instantiate__tempuri__AnDonTestResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__AnDonTestResponse * soap_new__tempuri__AnDonTestResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__AnDonTestResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__AnDonTestResponse * soap_new_req__tempuri__AnDonTestResponse(
	struct soap *soap)
{
	_tempuri__AnDonTestResponse *_p = soap_new__tempuri__AnDonTestResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__AnDonTestResponse * soap_new_set__tempuri__AnDonTestResponse(
	struct soap *soap,
	char *AnDonTestResult)
{
	_tempuri__AnDonTestResponse *_p = soap_new__tempuri__AnDonTestResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__AnDonTestResponse::AnDonTestResult = AnDonTestResult;
	}
	return _p;
}

inline int soap_write__tempuri__AnDonTestResponse(struct soap *soap, _tempuri__AnDonTestResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:AnDonTestResponse", p->soap_type() == SOAP_TYPE__tempuri__AnDonTestResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__AnDonTestResponse(struct soap *soap, const char *URL, _tempuri__AnDonTestResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:AnDonTestResponse", p->soap_type() == SOAP_TYPE__tempuri__AnDonTestResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__AnDonTestResponse(struct soap *soap, const char *URL, _tempuri__AnDonTestResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:AnDonTestResponse", p->soap_type() == SOAP_TYPE__tempuri__AnDonTestResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__AnDonTestResponse * SOAP_FMAC4 soap_get__tempuri__AnDonTestResponse(struct soap*, _tempuri__AnDonTestResponse *, const char*, const char*);

inline int soap_read__tempuri__AnDonTestResponse(struct soap *soap, _tempuri__AnDonTestResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tempuri__AnDonTestResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__AnDonTestResponse(struct soap *soap, const char *URL, _tempuri__AnDonTestResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__tempuri__AnDonTestResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__tempuri__AnDonTestResponse(struct soap *soap, _tempuri__AnDonTestResponse *p)
{
	if (soap_read__tempuri__AnDonTestResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tempuri__AnDonTest_DEFINED
#define SOAP_TYPE__tempuri__AnDonTest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__AnDonTest(struct soap*, const char*, int, const _tempuri__AnDonTest *, const char*);
SOAP_FMAC3 _tempuri__AnDonTest * SOAP_FMAC4 soap_in__tempuri__AnDonTest(struct soap*, const char*, _tempuri__AnDonTest *, const char*);
SOAP_FMAC1 _tempuri__AnDonTest * SOAP_FMAC2 soap_instantiate__tempuri__AnDonTest(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__AnDonTest * soap_new__tempuri__AnDonTest(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__AnDonTest(soap, n, NULL, NULL, NULL);
}

inline _tempuri__AnDonTest * soap_new_req__tempuri__AnDonTest(
	struct soap *soap,
	int i)
{
	_tempuri__AnDonTest *_p = soap_new__tempuri__AnDonTest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__AnDonTest::i = i;
	}
	return _p;
}

inline _tempuri__AnDonTest * soap_new_set__tempuri__AnDonTest(
	struct soap *soap,
	int i)
{
	_tempuri__AnDonTest *_p = soap_new__tempuri__AnDonTest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__AnDonTest::i = i;
	}
	return _p;
}

inline int soap_write__tempuri__AnDonTest(struct soap *soap, _tempuri__AnDonTest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:AnDonTest", p->soap_type() == SOAP_TYPE__tempuri__AnDonTest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__AnDonTest(struct soap *soap, const char *URL, _tempuri__AnDonTest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:AnDonTest", p->soap_type() == SOAP_TYPE__tempuri__AnDonTest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__AnDonTest(struct soap *soap, const char *URL, _tempuri__AnDonTest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:AnDonTest", p->soap_type() == SOAP_TYPE__tempuri__AnDonTest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__AnDonTest * SOAP_FMAC4 soap_get__tempuri__AnDonTest(struct soap*, _tempuri__AnDonTest *, const char*, const char*);

inline int soap_read__tempuri__AnDonTest(struct soap *soap, _tempuri__AnDonTest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tempuri__AnDonTest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__AnDonTest(struct soap *soap, const char *URL, _tempuri__AnDonTest *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__tempuri__AnDonTest(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__tempuri__AnDonTest(struct soap *soap, _tempuri__AnDonTest *p)
{
	if (soap_read__tempuri__AnDonTest(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tempuri__AnDonCallResponse_DEFINED
#define SOAP_TYPE__tempuri__AnDonCallResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__AnDonCallResponse(struct soap*, const char*, int, const _tempuri__AnDonCallResponse *, const char*);
SOAP_FMAC3 _tempuri__AnDonCallResponse * SOAP_FMAC4 soap_in__tempuri__AnDonCallResponse(struct soap*, const char*, _tempuri__AnDonCallResponse *, const char*);
SOAP_FMAC1 _tempuri__AnDonCallResponse * SOAP_FMAC2 soap_instantiate__tempuri__AnDonCallResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__AnDonCallResponse * soap_new__tempuri__AnDonCallResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__AnDonCallResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__AnDonCallResponse * soap_new_req__tempuri__AnDonCallResponse(
	struct soap *soap)
{
	_tempuri__AnDonCallResponse *_p = soap_new__tempuri__AnDonCallResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__AnDonCallResponse * soap_new_set__tempuri__AnDonCallResponse(
	struct soap *soap,
	char *AnDonCallResult)
{
	_tempuri__AnDonCallResponse *_p = soap_new__tempuri__AnDonCallResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__AnDonCallResponse::AnDonCallResult = AnDonCallResult;
	}
	return _p;
}

inline int soap_write__tempuri__AnDonCallResponse(struct soap *soap, _tempuri__AnDonCallResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:AnDonCallResponse", p->soap_type() == SOAP_TYPE__tempuri__AnDonCallResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__AnDonCallResponse(struct soap *soap, const char *URL, _tempuri__AnDonCallResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:AnDonCallResponse", p->soap_type() == SOAP_TYPE__tempuri__AnDonCallResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__AnDonCallResponse(struct soap *soap, const char *URL, _tempuri__AnDonCallResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:AnDonCallResponse", p->soap_type() == SOAP_TYPE__tempuri__AnDonCallResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__AnDonCallResponse * SOAP_FMAC4 soap_get__tempuri__AnDonCallResponse(struct soap*, _tempuri__AnDonCallResponse *, const char*, const char*);

inline int soap_read__tempuri__AnDonCallResponse(struct soap *soap, _tempuri__AnDonCallResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tempuri__AnDonCallResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__AnDonCallResponse(struct soap *soap, const char *URL, _tempuri__AnDonCallResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__tempuri__AnDonCallResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__tempuri__AnDonCallResponse(struct soap *soap, _tempuri__AnDonCallResponse *p)
{
	if (soap_read__tempuri__AnDonCallResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tempuri__AnDonCall_DEFINED
#define SOAP_TYPE__tempuri__AnDonCall_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__AnDonCall(struct soap*, const char*, int, const _tempuri__AnDonCall *, const char*);
SOAP_FMAC3 _tempuri__AnDonCall * SOAP_FMAC4 soap_in__tempuri__AnDonCall(struct soap*, const char*, _tempuri__AnDonCall *, const char*);
SOAP_FMAC1 _tempuri__AnDonCall * SOAP_FMAC2 soap_instantiate__tempuri__AnDonCall(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__AnDonCall * soap_new__tempuri__AnDonCall(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__AnDonCall(soap, n, NULL, NULL, NULL);
}

inline _tempuri__AnDonCall * soap_new_req__tempuri__AnDonCall(
	struct soap *soap)
{
	_tempuri__AnDonCall *_p = soap_new__tempuri__AnDonCall(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__AnDonCall * soap_new_set__tempuri__AnDonCall(
	struct soap *soap,
	char *AnDonCallXml)
{
	_tempuri__AnDonCall *_p = soap_new__tempuri__AnDonCall(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__AnDonCall::AnDonCallXml = AnDonCallXml;
	}
	return _p;
}

inline int soap_write__tempuri__AnDonCall(struct soap *soap, _tempuri__AnDonCall const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:AnDonCall", p->soap_type() == SOAP_TYPE__tempuri__AnDonCall ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__AnDonCall(struct soap *soap, const char *URL, _tempuri__AnDonCall const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:AnDonCall", p->soap_type() == SOAP_TYPE__tempuri__AnDonCall ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__AnDonCall(struct soap *soap, const char *URL, _tempuri__AnDonCall const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:AnDonCall", p->soap_type() == SOAP_TYPE__tempuri__AnDonCall ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__AnDonCall * SOAP_FMAC4 soap_get__tempuri__AnDonCall(struct soap*, _tempuri__AnDonCall *, const char*, const char*);

inline int soap_read__tempuri__AnDonCall(struct soap *soap, _tempuri__AnDonCall *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tempuri__AnDonCall(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__AnDonCall(struct soap *soap, const char *URL, _tempuri__AnDonCall *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__tempuri__AnDonCall(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__tempuri__AnDonCall(struct soap *soap, _tempuri__AnDonCall *p)
{
	if (soap_read__tempuri__AnDonCall(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tempuri__AnDonResponse_DEFINED
#define SOAP_TYPE__tempuri__AnDonResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__AnDonResponse(struct soap*, const char*, int, const _tempuri__AnDonResponse *, const char*);
SOAP_FMAC3 _tempuri__AnDonResponse * SOAP_FMAC4 soap_in__tempuri__AnDonResponse(struct soap*, const char*, _tempuri__AnDonResponse *, const char*);
SOAP_FMAC1 _tempuri__AnDonResponse * SOAP_FMAC2 soap_instantiate__tempuri__AnDonResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__AnDonResponse * soap_new__tempuri__AnDonResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__AnDonResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__AnDonResponse * soap_new_req__tempuri__AnDonResponse(
	struct soap *soap)
{
	_tempuri__AnDonResponse *_p = soap_new__tempuri__AnDonResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__AnDonResponse * soap_new_set__tempuri__AnDonResponse(
	struct soap *soap,
	char *AnDonResult)
{
	_tempuri__AnDonResponse *_p = soap_new__tempuri__AnDonResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__AnDonResponse::AnDonResult = AnDonResult;
	}
	return _p;
}

inline int soap_write__tempuri__AnDonResponse(struct soap *soap, _tempuri__AnDonResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:AnDonResponse", p->soap_type() == SOAP_TYPE__tempuri__AnDonResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__AnDonResponse(struct soap *soap, const char *URL, _tempuri__AnDonResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:AnDonResponse", p->soap_type() == SOAP_TYPE__tempuri__AnDonResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__AnDonResponse(struct soap *soap, const char *URL, _tempuri__AnDonResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:AnDonResponse", p->soap_type() == SOAP_TYPE__tempuri__AnDonResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__AnDonResponse * SOAP_FMAC4 soap_get__tempuri__AnDonResponse(struct soap*, _tempuri__AnDonResponse *, const char*, const char*);

inline int soap_read__tempuri__AnDonResponse(struct soap *soap, _tempuri__AnDonResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tempuri__AnDonResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__AnDonResponse(struct soap *soap, const char *URL, _tempuri__AnDonResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__tempuri__AnDonResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__tempuri__AnDonResponse(struct soap *soap, _tempuri__AnDonResponse *p)
{
	if (soap_read__tempuri__AnDonResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tempuri__AnDon_DEFINED
#define SOAP_TYPE__tempuri__AnDon_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__AnDon(struct soap*, const char*, int, const _tempuri__AnDon *, const char*);
SOAP_FMAC3 _tempuri__AnDon * SOAP_FMAC4 soap_in__tempuri__AnDon(struct soap*, const char*, _tempuri__AnDon *, const char*);
SOAP_FMAC1 _tempuri__AnDon * SOAP_FMAC2 soap_instantiate__tempuri__AnDon(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__AnDon * soap_new__tempuri__AnDon(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__AnDon(soap, n, NULL, NULL, NULL);
}

inline _tempuri__AnDon * soap_new_req__tempuri__AnDon(
	struct soap *soap)
{
	_tempuri__AnDon *_p = soap_new__tempuri__AnDon(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__AnDon * soap_new_set__tempuri__AnDon(
	struct soap *soap,
	char *Type,
	char *DocXmlMaster,
	char *DocXmlList,
	char *DocXmlSLList)
{
	_tempuri__AnDon *_p = soap_new__tempuri__AnDon(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__AnDon::Type = Type;
		_p->_tempuri__AnDon::DocXmlMaster = DocXmlMaster;
		_p->_tempuri__AnDon::DocXmlList = DocXmlList;
		_p->_tempuri__AnDon::DocXmlSLList = DocXmlSLList;
	}
	return _p;
}

inline int soap_write__tempuri__AnDon(struct soap *soap, _tempuri__AnDon const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:AnDon", p->soap_type() == SOAP_TYPE__tempuri__AnDon ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__AnDon(struct soap *soap, const char *URL, _tempuri__AnDon const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:AnDon", p->soap_type() == SOAP_TYPE__tempuri__AnDon ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__AnDon(struct soap *soap, const char *URL, _tempuri__AnDon const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:AnDon", p->soap_type() == SOAP_TYPE__tempuri__AnDon ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__AnDon * SOAP_FMAC4 soap_get__tempuri__AnDon(struct soap*, _tempuri__AnDon *, const char*, const char*);

inline int soap_read__tempuri__AnDon(struct soap *soap, _tempuri__AnDon *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tempuri__AnDon(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__AnDon(struct soap *soap, const char *URL, _tempuri__AnDon *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__tempuri__AnDon(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__tempuri__AnDon(struct soap *soap, _tempuri__AnDon *p)
{
	if (soap_read__tempuri__AnDon(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tempuri__LineInventoryReturnResponse_DEFINED
#define SOAP_TYPE__tempuri__LineInventoryReturnResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__LineInventoryReturnResponse(struct soap*, const char*, int, const _tempuri__LineInventoryReturnResponse *, const char*);
SOAP_FMAC3 _tempuri__LineInventoryReturnResponse * SOAP_FMAC4 soap_in__tempuri__LineInventoryReturnResponse(struct soap*, const char*, _tempuri__LineInventoryReturnResponse *, const char*);
SOAP_FMAC1 _tempuri__LineInventoryReturnResponse * SOAP_FMAC2 soap_instantiate__tempuri__LineInventoryReturnResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__LineInventoryReturnResponse * soap_new__tempuri__LineInventoryReturnResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__LineInventoryReturnResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__LineInventoryReturnResponse * soap_new_req__tempuri__LineInventoryReturnResponse(
	struct soap *soap)
{
	_tempuri__LineInventoryReturnResponse *_p = soap_new__tempuri__LineInventoryReturnResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__LineInventoryReturnResponse * soap_new_set__tempuri__LineInventoryReturnResponse(
	struct soap *soap,
	char *LineInventoryReturnResult)
{
	_tempuri__LineInventoryReturnResponse *_p = soap_new__tempuri__LineInventoryReturnResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__LineInventoryReturnResponse::LineInventoryReturnResult = LineInventoryReturnResult;
	}
	return _p;
}

inline int soap_write__tempuri__LineInventoryReturnResponse(struct soap *soap, _tempuri__LineInventoryReturnResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:LineInventoryReturnResponse", p->soap_type() == SOAP_TYPE__tempuri__LineInventoryReturnResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__LineInventoryReturnResponse(struct soap *soap, const char *URL, _tempuri__LineInventoryReturnResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:LineInventoryReturnResponse", p->soap_type() == SOAP_TYPE__tempuri__LineInventoryReturnResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__LineInventoryReturnResponse(struct soap *soap, const char *URL, _tempuri__LineInventoryReturnResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:LineInventoryReturnResponse", p->soap_type() == SOAP_TYPE__tempuri__LineInventoryReturnResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__LineInventoryReturnResponse * SOAP_FMAC4 soap_get__tempuri__LineInventoryReturnResponse(struct soap*, _tempuri__LineInventoryReturnResponse *, const char*, const char*);

inline int soap_read__tempuri__LineInventoryReturnResponse(struct soap *soap, _tempuri__LineInventoryReturnResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tempuri__LineInventoryReturnResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__LineInventoryReturnResponse(struct soap *soap, const char *URL, _tempuri__LineInventoryReturnResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__tempuri__LineInventoryReturnResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__tempuri__LineInventoryReturnResponse(struct soap *soap, _tempuri__LineInventoryReturnResponse *p)
{
	if (soap_read__tempuri__LineInventoryReturnResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tempuri__LineInventoryReturn_DEFINED
#define SOAP_TYPE__tempuri__LineInventoryReturn_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__LineInventoryReturn(struct soap*, const char*, int, const _tempuri__LineInventoryReturn *, const char*);
SOAP_FMAC3 _tempuri__LineInventoryReturn * SOAP_FMAC4 soap_in__tempuri__LineInventoryReturn(struct soap*, const char*, _tempuri__LineInventoryReturn *, const char*);
SOAP_FMAC1 _tempuri__LineInventoryReturn * SOAP_FMAC2 soap_instantiate__tempuri__LineInventoryReturn(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__LineInventoryReturn * soap_new__tempuri__LineInventoryReturn(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__LineInventoryReturn(soap, n, NULL, NULL, NULL);
}

inline _tempuri__LineInventoryReturn * soap_new_req__tempuri__LineInventoryReturn(
	struct soap *soap)
{
	_tempuri__LineInventoryReturn *_p = soap_new__tempuri__LineInventoryReturn(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__LineInventoryReturn * soap_new_set__tempuri__LineInventoryReturn(
	struct soap *soap,
	char *LRXml)
{
	_tempuri__LineInventoryReturn *_p = soap_new__tempuri__LineInventoryReturn(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__LineInventoryReturn::LRXml = LRXml;
	}
	return _p;
}

inline int soap_write__tempuri__LineInventoryReturn(struct soap *soap, _tempuri__LineInventoryReturn const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:LineInventoryReturn", p->soap_type() == SOAP_TYPE__tempuri__LineInventoryReturn ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__LineInventoryReturn(struct soap *soap, const char *URL, _tempuri__LineInventoryReturn const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:LineInventoryReturn", p->soap_type() == SOAP_TYPE__tempuri__LineInventoryReturn ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__LineInventoryReturn(struct soap *soap, const char *URL, _tempuri__LineInventoryReturn const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:LineInventoryReturn", p->soap_type() == SOAP_TYPE__tempuri__LineInventoryReturn ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__LineInventoryReturn * SOAP_FMAC4 soap_get__tempuri__LineInventoryReturn(struct soap*, _tempuri__LineInventoryReturn *, const char*, const char*);

inline int soap_read__tempuri__LineInventoryReturn(struct soap *soap, _tempuri__LineInventoryReturn *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tempuri__LineInventoryReturn(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__LineInventoryReturn(struct soap *soap, const char *URL, _tempuri__LineInventoryReturn *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__tempuri__LineInventoryReturn(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__tempuri__LineInventoryReturn(struct soap *soap, _tempuri__LineInventoryReturn *p)
{
	if (soap_read__tempuri__LineInventoryReturn(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tempuri__LineInventoryUpdateResponse_DEFINED
#define SOAP_TYPE__tempuri__LineInventoryUpdateResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__LineInventoryUpdateResponse(struct soap*, const char*, int, const _tempuri__LineInventoryUpdateResponse *, const char*);
SOAP_FMAC3 _tempuri__LineInventoryUpdateResponse * SOAP_FMAC4 soap_in__tempuri__LineInventoryUpdateResponse(struct soap*, const char*, _tempuri__LineInventoryUpdateResponse *, const char*);
SOAP_FMAC1 _tempuri__LineInventoryUpdateResponse * SOAP_FMAC2 soap_instantiate__tempuri__LineInventoryUpdateResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__LineInventoryUpdateResponse * soap_new__tempuri__LineInventoryUpdateResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__LineInventoryUpdateResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__LineInventoryUpdateResponse * soap_new_req__tempuri__LineInventoryUpdateResponse(
	struct soap *soap)
{
	_tempuri__LineInventoryUpdateResponse *_p = soap_new__tempuri__LineInventoryUpdateResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__LineInventoryUpdateResponse * soap_new_set__tempuri__LineInventoryUpdateResponse(
	struct soap *soap,
	char *LineInventoryUpdateResult)
{
	_tempuri__LineInventoryUpdateResponse *_p = soap_new__tempuri__LineInventoryUpdateResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__LineInventoryUpdateResponse::LineInventoryUpdateResult = LineInventoryUpdateResult;
	}
	return _p;
}

inline int soap_write__tempuri__LineInventoryUpdateResponse(struct soap *soap, _tempuri__LineInventoryUpdateResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:LineInventoryUpdateResponse", p->soap_type() == SOAP_TYPE__tempuri__LineInventoryUpdateResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__LineInventoryUpdateResponse(struct soap *soap, const char *URL, _tempuri__LineInventoryUpdateResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:LineInventoryUpdateResponse", p->soap_type() == SOAP_TYPE__tempuri__LineInventoryUpdateResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__LineInventoryUpdateResponse(struct soap *soap, const char *URL, _tempuri__LineInventoryUpdateResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:LineInventoryUpdateResponse", p->soap_type() == SOAP_TYPE__tempuri__LineInventoryUpdateResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__LineInventoryUpdateResponse * SOAP_FMAC4 soap_get__tempuri__LineInventoryUpdateResponse(struct soap*, _tempuri__LineInventoryUpdateResponse *, const char*, const char*);

inline int soap_read__tempuri__LineInventoryUpdateResponse(struct soap *soap, _tempuri__LineInventoryUpdateResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tempuri__LineInventoryUpdateResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__LineInventoryUpdateResponse(struct soap *soap, const char *URL, _tempuri__LineInventoryUpdateResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__tempuri__LineInventoryUpdateResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__tempuri__LineInventoryUpdateResponse(struct soap *soap, _tempuri__LineInventoryUpdateResponse *p)
{
	if (soap_read__tempuri__LineInventoryUpdateResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tempuri__LineInventoryUpdate_DEFINED
#define SOAP_TYPE__tempuri__LineInventoryUpdate_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__LineInventoryUpdate(struct soap*, const char*, int, const _tempuri__LineInventoryUpdate *, const char*);
SOAP_FMAC3 _tempuri__LineInventoryUpdate * SOAP_FMAC4 soap_in__tempuri__LineInventoryUpdate(struct soap*, const char*, _tempuri__LineInventoryUpdate *, const char*);
SOAP_FMAC1 _tempuri__LineInventoryUpdate * SOAP_FMAC2 soap_instantiate__tempuri__LineInventoryUpdate(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__LineInventoryUpdate * soap_new__tempuri__LineInventoryUpdate(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__LineInventoryUpdate(soap, n, NULL, NULL, NULL);
}

inline _tempuri__LineInventoryUpdate * soap_new_req__tempuri__LineInventoryUpdate(
	struct soap *soap)
{
	_tempuri__LineInventoryUpdate *_p = soap_new__tempuri__LineInventoryUpdate(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__LineInventoryUpdate * soap_new_set__tempuri__LineInventoryUpdate(
	struct soap *soap,
	char *LIXml)
{
	_tempuri__LineInventoryUpdate *_p = soap_new__tempuri__LineInventoryUpdate(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__LineInventoryUpdate::LIXml = LIXml;
	}
	return _p;
}

inline int soap_write__tempuri__LineInventoryUpdate(struct soap *soap, _tempuri__LineInventoryUpdate const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:LineInventoryUpdate", p->soap_type() == SOAP_TYPE__tempuri__LineInventoryUpdate ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__LineInventoryUpdate(struct soap *soap, const char *URL, _tempuri__LineInventoryUpdate const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:LineInventoryUpdate", p->soap_type() == SOAP_TYPE__tempuri__LineInventoryUpdate ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__LineInventoryUpdate(struct soap *soap, const char *URL, _tempuri__LineInventoryUpdate const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:LineInventoryUpdate", p->soap_type() == SOAP_TYPE__tempuri__LineInventoryUpdate ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__LineInventoryUpdate * SOAP_FMAC4 soap_get__tempuri__LineInventoryUpdate(struct soap*, _tempuri__LineInventoryUpdate *, const char*, const char*);

inline int soap_read__tempuri__LineInventoryUpdate(struct soap *soap, _tempuri__LineInventoryUpdate *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tempuri__LineInventoryUpdate(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__LineInventoryUpdate(struct soap *soap, const char *URL, _tempuri__LineInventoryUpdate *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__tempuri__LineInventoryUpdate(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__tempuri__LineInventoryUpdate(struct soap *soap, _tempuri__LineInventoryUpdate *p)
{
	if (soap_read__tempuri__LineInventoryUpdate(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tempuri__LineInventoryResponse_DEFINED
#define SOAP_TYPE__tempuri__LineInventoryResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__LineInventoryResponse(struct soap*, const char*, int, const _tempuri__LineInventoryResponse *, const char*);
SOAP_FMAC3 _tempuri__LineInventoryResponse * SOAP_FMAC4 soap_in__tempuri__LineInventoryResponse(struct soap*, const char*, _tempuri__LineInventoryResponse *, const char*);
SOAP_FMAC1 _tempuri__LineInventoryResponse * SOAP_FMAC2 soap_instantiate__tempuri__LineInventoryResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__LineInventoryResponse * soap_new__tempuri__LineInventoryResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__LineInventoryResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__LineInventoryResponse * soap_new_req__tempuri__LineInventoryResponse(
	struct soap *soap)
{
	_tempuri__LineInventoryResponse *_p = soap_new__tempuri__LineInventoryResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__LineInventoryResponse * soap_new_set__tempuri__LineInventoryResponse(
	struct soap *soap,
	char *LineInventoryResult)
{
	_tempuri__LineInventoryResponse *_p = soap_new__tempuri__LineInventoryResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__LineInventoryResponse::LineInventoryResult = LineInventoryResult;
	}
	return _p;
}

inline int soap_write__tempuri__LineInventoryResponse(struct soap *soap, _tempuri__LineInventoryResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:LineInventoryResponse", p->soap_type() == SOAP_TYPE__tempuri__LineInventoryResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__LineInventoryResponse(struct soap *soap, const char *URL, _tempuri__LineInventoryResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:LineInventoryResponse", p->soap_type() == SOAP_TYPE__tempuri__LineInventoryResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__LineInventoryResponse(struct soap *soap, const char *URL, _tempuri__LineInventoryResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:LineInventoryResponse", p->soap_type() == SOAP_TYPE__tempuri__LineInventoryResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__LineInventoryResponse * SOAP_FMAC4 soap_get__tempuri__LineInventoryResponse(struct soap*, _tempuri__LineInventoryResponse *, const char*, const char*);

inline int soap_read__tempuri__LineInventoryResponse(struct soap *soap, _tempuri__LineInventoryResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tempuri__LineInventoryResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__LineInventoryResponse(struct soap *soap, const char *URL, _tempuri__LineInventoryResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__tempuri__LineInventoryResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__tempuri__LineInventoryResponse(struct soap *soap, _tempuri__LineInventoryResponse *p)
{
	if (soap_read__tempuri__LineInventoryResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tempuri__LineInventory_DEFINED
#define SOAP_TYPE__tempuri__LineInventory_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__LineInventory(struct soap*, const char*, int, const _tempuri__LineInventory *, const char*);
SOAP_FMAC3 _tempuri__LineInventory * SOAP_FMAC4 soap_in__tempuri__LineInventory(struct soap*, const char*, _tempuri__LineInventory *, const char*);
SOAP_FMAC1 _tempuri__LineInventory * SOAP_FMAC2 soap_instantiate__tempuri__LineInventory(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__LineInventory * soap_new__tempuri__LineInventory(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__LineInventory(soap, n, NULL, NULL, NULL);
}

inline _tempuri__LineInventory * soap_new_req__tempuri__LineInventory(
	struct soap *soap)
{
	_tempuri__LineInventory *_p = soap_new__tempuri__LineInventory(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__LineInventory * soap_new_set__tempuri__LineInventory(
	struct soap *soap,
	char *WorkLineCode,
	char *MCode,
	char *BatchNo,
	char *BarCode)
{
	_tempuri__LineInventory *_p = soap_new__tempuri__LineInventory(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__LineInventory::WorkLineCode = WorkLineCode;
		_p->_tempuri__LineInventory::MCode = MCode;
		_p->_tempuri__LineInventory::BatchNo = BatchNo;
		_p->_tempuri__LineInventory::BarCode = BarCode;
	}
	return _p;
}

inline int soap_write__tempuri__LineInventory(struct soap *soap, _tempuri__LineInventory const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:LineInventory", p->soap_type() == SOAP_TYPE__tempuri__LineInventory ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__LineInventory(struct soap *soap, const char *URL, _tempuri__LineInventory const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:LineInventory", p->soap_type() == SOAP_TYPE__tempuri__LineInventory ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__LineInventory(struct soap *soap, const char *URL, _tempuri__LineInventory const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:LineInventory", p->soap_type() == SOAP_TYPE__tempuri__LineInventory ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__LineInventory * SOAP_FMAC4 soap_get__tempuri__LineInventory(struct soap*, _tempuri__LineInventory *, const char*, const char*);

inline int soap_read__tempuri__LineInventory(struct soap *soap, _tempuri__LineInventory *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tempuri__LineInventory(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__LineInventory(struct soap *soap, const char *URL, _tempuri__LineInventory *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__tempuri__LineInventory(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__tempuri__LineInventory(struct soap *soap, _tempuri__LineInventory *p)
{
	if (soap_read__tempuri__LineInventory(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tempuri__WorkOrderResponse_DEFINED
#define SOAP_TYPE__tempuri__WorkOrderResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__WorkOrderResponse(struct soap*, const char*, int, const _tempuri__WorkOrderResponse *, const char*);
SOAP_FMAC3 _tempuri__WorkOrderResponse * SOAP_FMAC4 soap_in__tempuri__WorkOrderResponse(struct soap*, const char*, _tempuri__WorkOrderResponse *, const char*);
SOAP_FMAC1 _tempuri__WorkOrderResponse * SOAP_FMAC2 soap_instantiate__tempuri__WorkOrderResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__WorkOrderResponse * soap_new__tempuri__WorkOrderResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__WorkOrderResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__WorkOrderResponse * soap_new_req__tempuri__WorkOrderResponse(
	struct soap *soap)
{
	_tempuri__WorkOrderResponse *_p = soap_new__tempuri__WorkOrderResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__WorkOrderResponse * soap_new_set__tempuri__WorkOrderResponse(
	struct soap *soap,
	char *WorkOrderResult)
{
	_tempuri__WorkOrderResponse *_p = soap_new__tempuri__WorkOrderResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__WorkOrderResponse::WorkOrderResult = WorkOrderResult;
	}
	return _p;
}

inline int soap_write__tempuri__WorkOrderResponse(struct soap *soap, _tempuri__WorkOrderResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:WorkOrderResponse", p->soap_type() == SOAP_TYPE__tempuri__WorkOrderResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__WorkOrderResponse(struct soap *soap, const char *URL, _tempuri__WorkOrderResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:WorkOrderResponse", p->soap_type() == SOAP_TYPE__tempuri__WorkOrderResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__WorkOrderResponse(struct soap *soap, const char *URL, _tempuri__WorkOrderResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:WorkOrderResponse", p->soap_type() == SOAP_TYPE__tempuri__WorkOrderResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__WorkOrderResponse * SOAP_FMAC4 soap_get__tempuri__WorkOrderResponse(struct soap*, _tempuri__WorkOrderResponse *, const char*, const char*);

inline int soap_read__tempuri__WorkOrderResponse(struct soap *soap, _tempuri__WorkOrderResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tempuri__WorkOrderResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__WorkOrderResponse(struct soap *soap, const char *URL, _tempuri__WorkOrderResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__tempuri__WorkOrderResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__tempuri__WorkOrderResponse(struct soap *soap, _tempuri__WorkOrderResponse *p)
{
	if (soap_read__tempuri__WorkOrderResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tempuri__WorkOrder_DEFINED
#define SOAP_TYPE__tempuri__WorkOrder_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__WorkOrder(struct soap*, const char*, int, const _tempuri__WorkOrder *, const char*);
SOAP_FMAC3 _tempuri__WorkOrder * SOAP_FMAC4 soap_in__tempuri__WorkOrder(struct soap*, const char*, _tempuri__WorkOrder *, const char*);
SOAP_FMAC1 _tempuri__WorkOrder * SOAP_FMAC2 soap_instantiate__tempuri__WorkOrder(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__WorkOrder * soap_new__tempuri__WorkOrder(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__WorkOrder(soap, n, NULL, NULL, NULL);
}

inline _tempuri__WorkOrder * soap_new_req__tempuri__WorkOrder(
	struct soap *soap)
{
	_tempuri__WorkOrder *_p = soap_new__tempuri__WorkOrder(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__WorkOrder * soap_new_set__tempuri__WorkOrder(
	struct soap *soap,
	char *WorkOrderXml)
{
	_tempuri__WorkOrder *_p = soap_new__tempuri__WorkOrder(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__WorkOrder::WorkOrderXml = WorkOrderXml;
	}
	return _p;
}

inline int soap_write__tempuri__WorkOrder(struct soap *soap, _tempuri__WorkOrder const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:WorkOrder", p->soap_type() == SOAP_TYPE__tempuri__WorkOrder ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__WorkOrder(struct soap *soap, const char *URL, _tempuri__WorkOrder const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:WorkOrder", p->soap_type() == SOAP_TYPE__tempuri__WorkOrder ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__WorkOrder(struct soap *soap, const char *URL, _tempuri__WorkOrder const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:WorkOrder", p->soap_type() == SOAP_TYPE__tempuri__WorkOrder ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__WorkOrder * SOAP_FMAC4 soap_get__tempuri__WorkOrder(struct soap*, _tempuri__WorkOrder *, const char*, const char*);

inline int soap_read__tempuri__WorkOrder(struct soap *soap, _tempuri__WorkOrder *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tempuri__WorkOrder(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__WorkOrder(struct soap *soap, const char *URL, _tempuri__WorkOrder *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__tempuri__WorkOrder(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__tempuri__WorkOrder(struct soap *soap, _tempuri__WorkOrder *p)
{
	if (soap_read__tempuri__WorkOrder(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tempuri__ToolingTimesResponse_DEFINED
#define SOAP_TYPE__tempuri__ToolingTimesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__ToolingTimesResponse(struct soap*, const char*, int, const _tempuri__ToolingTimesResponse *, const char*);
SOAP_FMAC3 _tempuri__ToolingTimesResponse * SOAP_FMAC4 soap_in__tempuri__ToolingTimesResponse(struct soap*, const char*, _tempuri__ToolingTimesResponse *, const char*);
SOAP_FMAC1 _tempuri__ToolingTimesResponse * SOAP_FMAC2 soap_instantiate__tempuri__ToolingTimesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__ToolingTimesResponse * soap_new__tempuri__ToolingTimesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__ToolingTimesResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__ToolingTimesResponse * soap_new_req__tempuri__ToolingTimesResponse(
	struct soap *soap)
{
	_tempuri__ToolingTimesResponse *_p = soap_new__tempuri__ToolingTimesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__ToolingTimesResponse * soap_new_set__tempuri__ToolingTimesResponse(
	struct soap *soap,
	char *ToolingTimesResult)
{
	_tempuri__ToolingTimesResponse *_p = soap_new__tempuri__ToolingTimesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__ToolingTimesResponse::ToolingTimesResult = ToolingTimesResult;
	}
	return _p;
}

inline int soap_write__tempuri__ToolingTimesResponse(struct soap *soap, _tempuri__ToolingTimesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:ToolingTimesResponse", p->soap_type() == SOAP_TYPE__tempuri__ToolingTimesResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__ToolingTimesResponse(struct soap *soap, const char *URL, _tempuri__ToolingTimesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:ToolingTimesResponse", p->soap_type() == SOAP_TYPE__tempuri__ToolingTimesResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__ToolingTimesResponse(struct soap *soap, const char *URL, _tempuri__ToolingTimesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:ToolingTimesResponse", p->soap_type() == SOAP_TYPE__tempuri__ToolingTimesResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__ToolingTimesResponse * SOAP_FMAC4 soap_get__tempuri__ToolingTimesResponse(struct soap*, _tempuri__ToolingTimesResponse *, const char*, const char*);

inline int soap_read__tempuri__ToolingTimesResponse(struct soap *soap, _tempuri__ToolingTimesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tempuri__ToolingTimesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__ToolingTimesResponse(struct soap *soap, const char *URL, _tempuri__ToolingTimesResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__tempuri__ToolingTimesResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__tempuri__ToolingTimesResponse(struct soap *soap, _tempuri__ToolingTimesResponse *p)
{
	if (soap_read__tempuri__ToolingTimesResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tempuri__ToolingTimes_DEFINED
#define SOAP_TYPE__tempuri__ToolingTimes_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__ToolingTimes(struct soap*, const char*, int, const _tempuri__ToolingTimes *, const char*);
SOAP_FMAC3 _tempuri__ToolingTimes * SOAP_FMAC4 soap_in__tempuri__ToolingTimes(struct soap*, const char*, _tempuri__ToolingTimes *, const char*);
SOAP_FMAC1 _tempuri__ToolingTimes * SOAP_FMAC2 soap_instantiate__tempuri__ToolingTimes(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__ToolingTimes * soap_new__tempuri__ToolingTimes(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__ToolingTimes(soap, n, NULL, NULL, NULL);
}

inline _tempuri__ToolingTimes * soap_new_req__tempuri__ToolingTimes(
	struct soap *soap,
	int Times)
{
	_tempuri__ToolingTimes *_p = soap_new__tempuri__ToolingTimes(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__ToolingTimes::Times = Times;
	}
	return _p;
}

inline _tempuri__ToolingTimes * soap_new_set__tempuri__ToolingTimes(
	struct soap *soap,
	char *BillCode,
	char *DeviceCode,
	int Times)
{
	_tempuri__ToolingTimes *_p = soap_new__tempuri__ToolingTimes(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__ToolingTimes::BillCode = BillCode;
		_p->_tempuri__ToolingTimes::DeviceCode = DeviceCode;
		_p->_tempuri__ToolingTimes::Times = Times;
	}
	return _p;
}

inline int soap_write__tempuri__ToolingTimes(struct soap *soap, _tempuri__ToolingTimes const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:ToolingTimes", p->soap_type() == SOAP_TYPE__tempuri__ToolingTimes ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__ToolingTimes(struct soap *soap, const char *URL, _tempuri__ToolingTimes const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:ToolingTimes", p->soap_type() == SOAP_TYPE__tempuri__ToolingTimes ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__ToolingTimes(struct soap *soap, const char *URL, _tempuri__ToolingTimes const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:ToolingTimes", p->soap_type() == SOAP_TYPE__tempuri__ToolingTimes ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__ToolingTimes * SOAP_FMAC4 soap_get__tempuri__ToolingTimes(struct soap*, _tempuri__ToolingTimes *, const char*, const char*);

inline int soap_read__tempuri__ToolingTimes(struct soap *soap, _tempuri__ToolingTimes *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tempuri__ToolingTimes(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__ToolingTimes(struct soap *soap, const char *URL, _tempuri__ToolingTimes *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__tempuri__ToolingTimes(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__tempuri__ToolingTimes(struct soap *soap, _tempuri__ToolingTimes *p)
{
	if (soap_read__tempuri__ToolingTimes(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tempuri__GetDocCodeResponse_DEFINED
#define SOAP_TYPE__tempuri__GetDocCodeResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetDocCodeResponse(struct soap*, const char*, int, const _tempuri__GetDocCodeResponse *, const char*);
SOAP_FMAC3 _tempuri__GetDocCodeResponse * SOAP_FMAC4 soap_in__tempuri__GetDocCodeResponse(struct soap*, const char*, _tempuri__GetDocCodeResponse *, const char*);
SOAP_FMAC1 _tempuri__GetDocCodeResponse * SOAP_FMAC2 soap_instantiate__tempuri__GetDocCodeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__GetDocCodeResponse * soap_new__tempuri__GetDocCodeResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__GetDocCodeResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__GetDocCodeResponse * soap_new_req__tempuri__GetDocCodeResponse(
	struct soap *soap)
{
	_tempuri__GetDocCodeResponse *_p = soap_new__tempuri__GetDocCodeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__GetDocCodeResponse * soap_new_set__tempuri__GetDocCodeResponse(
	struct soap *soap,
	char *GetDocCodeResult)
{
	_tempuri__GetDocCodeResponse *_p = soap_new__tempuri__GetDocCodeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__GetDocCodeResponse::GetDocCodeResult = GetDocCodeResult;
	}
	return _p;
}

inline int soap_write__tempuri__GetDocCodeResponse(struct soap *soap, _tempuri__GetDocCodeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetDocCodeResponse", p->soap_type() == SOAP_TYPE__tempuri__GetDocCodeResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__GetDocCodeResponse(struct soap *soap, const char *URL, _tempuri__GetDocCodeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetDocCodeResponse", p->soap_type() == SOAP_TYPE__tempuri__GetDocCodeResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__GetDocCodeResponse(struct soap *soap, const char *URL, _tempuri__GetDocCodeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetDocCodeResponse", p->soap_type() == SOAP_TYPE__tempuri__GetDocCodeResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__GetDocCodeResponse * SOAP_FMAC4 soap_get__tempuri__GetDocCodeResponse(struct soap*, _tempuri__GetDocCodeResponse *, const char*, const char*);

inline int soap_read__tempuri__GetDocCodeResponse(struct soap *soap, _tempuri__GetDocCodeResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tempuri__GetDocCodeResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__GetDocCodeResponse(struct soap *soap, const char *URL, _tempuri__GetDocCodeResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__tempuri__GetDocCodeResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__tempuri__GetDocCodeResponse(struct soap *soap, _tempuri__GetDocCodeResponse *p)
{
	if (soap_read__tempuri__GetDocCodeResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tempuri__GetDocCode_DEFINED
#define SOAP_TYPE__tempuri__GetDocCode_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetDocCode(struct soap*, const char*, int, const _tempuri__GetDocCode *, const char*);
SOAP_FMAC3 _tempuri__GetDocCode * SOAP_FMAC4 soap_in__tempuri__GetDocCode(struct soap*, const char*, _tempuri__GetDocCode *, const char*);
SOAP_FMAC1 _tempuri__GetDocCode * SOAP_FMAC2 soap_instantiate__tempuri__GetDocCode(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__GetDocCode * soap_new__tempuri__GetDocCode(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__GetDocCode(soap, n, NULL, NULL, NULL);
}

inline _tempuri__GetDocCode * soap_new_req__tempuri__GetDocCode(
	struct soap *soap)
{
	_tempuri__GetDocCode *_p = soap_new__tempuri__GetDocCode(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__GetDocCode * soap_new_set__tempuri__GetDocCode(
	struct soap *soap,
	char *DocName)
{
	_tempuri__GetDocCode *_p = soap_new__tempuri__GetDocCode(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__GetDocCode::DocName = DocName;
	}
	return _p;
}

inline int soap_write__tempuri__GetDocCode(struct soap *soap, _tempuri__GetDocCode const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetDocCode", p->soap_type() == SOAP_TYPE__tempuri__GetDocCode ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__GetDocCode(struct soap *soap, const char *URL, _tempuri__GetDocCode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetDocCode", p->soap_type() == SOAP_TYPE__tempuri__GetDocCode ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__GetDocCode(struct soap *soap, const char *URL, _tempuri__GetDocCode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetDocCode", p->soap_type() == SOAP_TYPE__tempuri__GetDocCode ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__GetDocCode * SOAP_FMAC4 soap_get__tempuri__GetDocCode(struct soap*, _tempuri__GetDocCode *, const char*, const char*);

inline int soap_read__tempuri__GetDocCode(struct soap *soap, _tempuri__GetDocCode *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tempuri__GetDocCode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__GetDocCode(struct soap *soap, const char *URL, _tempuri__GetDocCode *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__tempuri__GetDocCode(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__tempuri__GetDocCode(struct soap *soap, _tempuri__GetDocCode *p)
{
	if (soap_read__tempuri__GetDocCode(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tempuri__GetDateResponse_DEFINED
#define SOAP_TYPE__tempuri__GetDateResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetDateResponse(struct soap*, const char*, int, const _tempuri__GetDateResponse *, const char*);
SOAP_FMAC3 _tempuri__GetDateResponse * SOAP_FMAC4 soap_in__tempuri__GetDateResponse(struct soap*, const char*, _tempuri__GetDateResponse *, const char*);
SOAP_FMAC1 _tempuri__GetDateResponse * SOAP_FMAC2 soap_instantiate__tempuri__GetDateResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__GetDateResponse * soap_new__tempuri__GetDateResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__GetDateResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__GetDateResponse * soap_new_req__tempuri__GetDateResponse(
	struct soap *soap)
{
	_tempuri__GetDateResponse *_p = soap_new__tempuri__GetDateResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__GetDateResponse * soap_new_set__tempuri__GetDateResponse(
	struct soap *soap,
	char *GetDateResult)
{
	_tempuri__GetDateResponse *_p = soap_new__tempuri__GetDateResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__GetDateResponse::GetDateResult = GetDateResult;
	}
	return _p;
}

inline int soap_write__tempuri__GetDateResponse(struct soap *soap, _tempuri__GetDateResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetDateResponse", p->soap_type() == SOAP_TYPE__tempuri__GetDateResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__GetDateResponse(struct soap *soap, const char *URL, _tempuri__GetDateResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetDateResponse", p->soap_type() == SOAP_TYPE__tempuri__GetDateResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__GetDateResponse(struct soap *soap, const char *URL, _tempuri__GetDateResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetDateResponse", p->soap_type() == SOAP_TYPE__tempuri__GetDateResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__GetDateResponse * SOAP_FMAC4 soap_get__tempuri__GetDateResponse(struct soap*, _tempuri__GetDateResponse *, const char*, const char*);

inline int soap_read__tempuri__GetDateResponse(struct soap *soap, _tempuri__GetDateResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tempuri__GetDateResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__GetDateResponse(struct soap *soap, const char *URL, _tempuri__GetDateResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__tempuri__GetDateResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__tempuri__GetDateResponse(struct soap *soap, _tempuri__GetDateResponse *p)
{
	if (soap_read__tempuri__GetDateResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tempuri__GetDate_DEFINED
#define SOAP_TYPE__tempuri__GetDate_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetDate(struct soap*, const char*, int, const _tempuri__GetDate *, const char*);
SOAP_FMAC3 _tempuri__GetDate * SOAP_FMAC4 soap_in__tempuri__GetDate(struct soap*, const char*, _tempuri__GetDate *, const char*);
SOAP_FMAC1 _tempuri__GetDate * SOAP_FMAC2 soap_instantiate__tempuri__GetDate(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__GetDate * soap_new__tempuri__GetDate(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__GetDate(soap, n, NULL, NULL, NULL);
}

inline _tempuri__GetDate * soap_new_req__tempuri__GetDate(
	struct soap *soap)
{
	_tempuri__GetDate *_p = soap_new__tempuri__GetDate(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__GetDate * soap_new_set__tempuri__GetDate(
	struct soap *soap)
{
	_tempuri__GetDate *_p = soap_new__tempuri__GetDate(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tempuri__GetDate(struct soap *soap, _tempuri__GetDate const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetDate", p->soap_type() == SOAP_TYPE__tempuri__GetDate ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__GetDate(struct soap *soap, const char *URL, _tempuri__GetDate const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetDate", p->soap_type() == SOAP_TYPE__tempuri__GetDate ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__GetDate(struct soap *soap, const char *URL, _tempuri__GetDate const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetDate", p->soap_type() == SOAP_TYPE__tempuri__GetDate ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__GetDate * SOAP_FMAC4 soap_get__tempuri__GetDate(struct soap*, _tempuri__GetDate *, const char*, const char*);

inline int soap_read__tempuri__GetDate(struct soap *soap, _tempuri__GetDate *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__tempuri__GetDate(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__GetDate(struct soap *soap, const char *URL, _tempuri__GetDate *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__tempuri__GetDate(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__tempuri__GetDate(struct soap *soap, _tempuri__GetDate *p)
{
	if (soap_read__tempuri__GetDate(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Fault(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (soap_read_SOAP_ENV__Fault(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Reason(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (soap_read_SOAP_ENV__Reason(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Detail(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (soap_read_SOAP_ENV__Detail(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Code(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (soap_read_SOAP_ENV__Code(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Header(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (soap_read_SOAP_ENV__Header(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef SOAP_TYPE___tempuri__Login__DEFINED
#define SOAP_TYPE___tempuri__Login__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__Login_(struct soap*, struct __tempuri__Login_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__Login_(struct soap*, const struct __tempuri__Login_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__Login_(struct soap*, const char*, int, const struct __tempuri__Login_ *, const char*);
SOAP_FMAC3 struct __tempuri__Login_ * SOAP_FMAC4 soap_in___tempuri__Login_(struct soap*, const char*, struct __tempuri__Login_ *, const char*);
SOAP_FMAC1 struct __tempuri__Login_ * SOAP_FMAC2 soap_instantiate___tempuri__Login_(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__Login_ * soap_new___tempuri__Login_(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__Login_(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__Login_ * soap_new_req___tempuri__Login_(
	struct soap *soap)
{
	struct __tempuri__Login_ *_p = soap_new___tempuri__Login_(soap);
	if (_p)
	{	soap_default___tempuri__Login_(soap, _p);
	}
	return _p;
}

inline struct __tempuri__Login_ * soap_new_set___tempuri__Login_(
	struct soap *soap,
	_tempuri__Login *tempuri__Login)
{
	struct __tempuri__Login_ *_p = soap_new___tempuri__Login_(soap);
	if (_p)
	{	soap_default___tempuri__Login_(soap, _p);
		_p->tempuri__Login = tempuri__Login;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__Login_(struct soap*, const struct __tempuri__Login_ *, const char*, const char*);

inline int soap_write___tempuri__Login_(struct soap *soap, struct __tempuri__Login_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___tempuri__Login_(soap, p), 0) || soap_put___tempuri__Login_(soap, p, "-tempuri:Login", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__Login_(struct soap *soap, const char *URL, struct __tempuri__Login_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__Login_(soap, p), 0) || soap_put___tempuri__Login_(soap, p, "-tempuri:Login", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__Login_(struct soap *soap, const char *URL, struct __tempuri__Login_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__Login_(soap, p), 0) || soap_put___tempuri__Login_(soap, p, "-tempuri:Login", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__Login_ * SOAP_FMAC4 soap_get___tempuri__Login_(struct soap*, struct __tempuri__Login_ *, const char*, const char*);

inline int soap_read___tempuri__Login_(struct soap *soap, struct __tempuri__Login_ *p)
{
	if (p)
	{	soap_default___tempuri__Login_(soap, p);
		if (soap_begin_recv(soap) || soap_get___tempuri__Login_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__Login_(struct soap *soap, const char *URL, struct __tempuri__Login_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___tempuri__Login_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___tempuri__Login_(struct soap *soap, struct __tempuri__Login_ *p)
{
	if (soap_read___tempuri__Login_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tempuri__GetPower__DEFINED
#define SOAP_TYPE___tempuri__GetPower__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__GetPower_(struct soap*, struct __tempuri__GetPower_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__GetPower_(struct soap*, const struct __tempuri__GetPower_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__GetPower_(struct soap*, const char*, int, const struct __tempuri__GetPower_ *, const char*);
SOAP_FMAC3 struct __tempuri__GetPower_ * SOAP_FMAC4 soap_in___tempuri__GetPower_(struct soap*, const char*, struct __tempuri__GetPower_ *, const char*);
SOAP_FMAC1 struct __tempuri__GetPower_ * SOAP_FMAC2 soap_instantiate___tempuri__GetPower_(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__GetPower_ * soap_new___tempuri__GetPower_(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__GetPower_(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__GetPower_ * soap_new_req___tempuri__GetPower_(
	struct soap *soap)
{
	struct __tempuri__GetPower_ *_p = soap_new___tempuri__GetPower_(soap);
	if (_p)
	{	soap_default___tempuri__GetPower_(soap, _p);
	}
	return _p;
}

inline struct __tempuri__GetPower_ * soap_new_set___tempuri__GetPower_(
	struct soap *soap,
	_tempuri__GetPower *tempuri__GetPower)
{
	struct __tempuri__GetPower_ *_p = soap_new___tempuri__GetPower_(soap);
	if (_p)
	{	soap_default___tempuri__GetPower_(soap, _p);
		_p->tempuri__GetPower = tempuri__GetPower;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__GetPower_(struct soap*, const struct __tempuri__GetPower_ *, const char*, const char*);

inline int soap_write___tempuri__GetPower_(struct soap *soap, struct __tempuri__GetPower_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___tempuri__GetPower_(soap, p), 0) || soap_put___tempuri__GetPower_(soap, p, "-tempuri:GetPower", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__GetPower_(struct soap *soap, const char *URL, struct __tempuri__GetPower_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__GetPower_(soap, p), 0) || soap_put___tempuri__GetPower_(soap, p, "-tempuri:GetPower", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__GetPower_(struct soap *soap, const char *URL, struct __tempuri__GetPower_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__GetPower_(soap, p), 0) || soap_put___tempuri__GetPower_(soap, p, "-tempuri:GetPower", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__GetPower_ * SOAP_FMAC4 soap_get___tempuri__GetPower_(struct soap*, struct __tempuri__GetPower_ *, const char*, const char*);

inline int soap_read___tempuri__GetPower_(struct soap *soap, struct __tempuri__GetPower_ *p)
{
	if (p)
	{	soap_default___tempuri__GetPower_(soap, p);
		if (soap_begin_recv(soap) || soap_get___tempuri__GetPower_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__GetPower_(struct soap *soap, const char *URL, struct __tempuri__GetPower_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___tempuri__GetPower_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___tempuri__GetPower_(struct soap *soap, struct __tempuri__GetPower_ *p)
{
	if (soap_read___tempuri__GetPower_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tempuri__GetDept__DEFINED
#define SOAP_TYPE___tempuri__GetDept__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__GetDept_(struct soap*, struct __tempuri__GetDept_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__GetDept_(struct soap*, const struct __tempuri__GetDept_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__GetDept_(struct soap*, const char*, int, const struct __tempuri__GetDept_ *, const char*);
SOAP_FMAC3 struct __tempuri__GetDept_ * SOAP_FMAC4 soap_in___tempuri__GetDept_(struct soap*, const char*, struct __tempuri__GetDept_ *, const char*);
SOAP_FMAC1 struct __tempuri__GetDept_ * SOAP_FMAC2 soap_instantiate___tempuri__GetDept_(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__GetDept_ * soap_new___tempuri__GetDept_(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__GetDept_(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__GetDept_ * soap_new_req___tempuri__GetDept_(
	struct soap *soap)
{
	struct __tempuri__GetDept_ *_p = soap_new___tempuri__GetDept_(soap);
	if (_p)
	{	soap_default___tempuri__GetDept_(soap, _p);
	}
	return _p;
}

inline struct __tempuri__GetDept_ * soap_new_set___tempuri__GetDept_(
	struct soap *soap,
	_tempuri__GetDept *tempuri__GetDept)
{
	struct __tempuri__GetDept_ *_p = soap_new___tempuri__GetDept_(soap);
	if (_p)
	{	soap_default___tempuri__GetDept_(soap, _p);
		_p->tempuri__GetDept = tempuri__GetDept;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__GetDept_(struct soap*, const struct __tempuri__GetDept_ *, const char*, const char*);

inline int soap_write___tempuri__GetDept_(struct soap *soap, struct __tempuri__GetDept_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___tempuri__GetDept_(soap, p), 0) || soap_put___tempuri__GetDept_(soap, p, "-tempuri:GetDept", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__GetDept_(struct soap *soap, const char *URL, struct __tempuri__GetDept_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__GetDept_(soap, p), 0) || soap_put___tempuri__GetDept_(soap, p, "-tempuri:GetDept", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__GetDept_(struct soap *soap, const char *URL, struct __tempuri__GetDept_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__GetDept_(soap, p), 0) || soap_put___tempuri__GetDept_(soap, p, "-tempuri:GetDept", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__GetDept_ * SOAP_FMAC4 soap_get___tempuri__GetDept_(struct soap*, struct __tempuri__GetDept_ *, const char*, const char*);

inline int soap_read___tempuri__GetDept_(struct soap *soap, struct __tempuri__GetDept_ *p)
{
	if (p)
	{	soap_default___tempuri__GetDept_(soap, p);
		if (soap_begin_recv(soap) || soap_get___tempuri__GetDept_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__GetDept_(struct soap *soap, const char *URL, struct __tempuri__GetDept_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___tempuri__GetDept_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___tempuri__GetDept_(struct soap *soap, struct __tempuri__GetDept_ *p)
{
	if (soap_read___tempuri__GetDept_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tempuri__SetExMail__DEFINED
#define SOAP_TYPE___tempuri__SetExMail__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__SetExMail_(struct soap*, struct __tempuri__SetExMail_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__SetExMail_(struct soap*, const struct __tempuri__SetExMail_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__SetExMail_(struct soap*, const char*, int, const struct __tempuri__SetExMail_ *, const char*);
SOAP_FMAC3 struct __tempuri__SetExMail_ * SOAP_FMAC4 soap_in___tempuri__SetExMail_(struct soap*, const char*, struct __tempuri__SetExMail_ *, const char*);
SOAP_FMAC1 struct __tempuri__SetExMail_ * SOAP_FMAC2 soap_instantiate___tempuri__SetExMail_(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__SetExMail_ * soap_new___tempuri__SetExMail_(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__SetExMail_(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__SetExMail_ * soap_new_req___tempuri__SetExMail_(
	struct soap *soap)
{
	struct __tempuri__SetExMail_ *_p = soap_new___tempuri__SetExMail_(soap);
	if (_p)
	{	soap_default___tempuri__SetExMail_(soap, _p);
	}
	return _p;
}

inline struct __tempuri__SetExMail_ * soap_new_set___tempuri__SetExMail_(
	struct soap *soap,
	_tempuri__SetExMail *tempuri__SetExMail)
{
	struct __tempuri__SetExMail_ *_p = soap_new___tempuri__SetExMail_(soap);
	if (_p)
	{	soap_default___tempuri__SetExMail_(soap, _p);
		_p->tempuri__SetExMail = tempuri__SetExMail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__SetExMail_(struct soap*, const struct __tempuri__SetExMail_ *, const char*, const char*);

inline int soap_write___tempuri__SetExMail_(struct soap *soap, struct __tempuri__SetExMail_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___tempuri__SetExMail_(soap, p), 0) || soap_put___tempuri__SetExMail_(soap, p, "-tempuri:SetExMail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__SetExMail_(struct soap *soap, const char *URL, struct __tempuri__SetExMail_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__SetExMail_(soap, p), 0) || soap_put___tempuri__SetExMail_(soap, p, "-tempuri:SetExMail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__SetExMail_(struct soap *soap, const char *URL, struct __tempuri__SetExMail_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__SetExMail_(soap, p), 0) || soap_put___tempuri__SetExMail_(soap, p, "-tempuri:SetExMail", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__SetExMail_ * SOAP_FMAC4 soap_get___tempuri__SetExMail_(struct soap*, struct __tempuri__SetExMail_ *, const char*, const char*);

inline int soap_read___tempuri__SetExMail_(struct soap *soap, struct __tempuri__SetExMail_ *p)
{
	if (p)
	{	soap_default___tempuri__SetExMail_(soap, p);
		if (soap_begin_recv(soap) || soap_get___tempuri__SetExMail_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__SetExMail_(struct soap *soap, const char *URL, struct __tempuri__SetExMail_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___tempuri__SetExMail_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___tempuri__SetExMail_(struct soap *soap, struct __tempuri__SetExMail_ *p)
{
	if (soap_read___tempuri__SetExMail_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tempuri__DocAdd__DEFINED
#define SOAP_TYPE___tempuri__DocAdd__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__DocAdd_(struct soap*, struct __tempuri__DocAdd_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__DocAdd_(struct soap*, const struct __tempuri__DocAdd_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__DocAdd_(struct soap*, const char*, int, const struct __tempuri__DocAdd_ *, const char*);
SOAP_FMAC3 struct __tempuri__DocAdd_ * SOAP_FMAC4 soap_in___tempuri__DocAdd_(struct soap*, const char*, struct __tempuri__DocAdd_ *, const char*);
SOAP_FMAC1 struct __tempuri__DocAdd_ * SOAP_FMAC2 soap_instantiate___tempuri__DocAdd_(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__DocAdd_ * soap_new___tempuri__DocAdd_(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__DocAdd_(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__DocAdd_ * soap_new_req___tempuri__DocAdd_(
	struct soap *soap)
{
	struct __tempuri__DocAdd_ *_p = soap_new___tempuri__DocAdd_(soap);
	if (_p)
	{	soap_default___tempuri__DocAdd_(soap, _p);
	}
	return _p;
}

inline struct __tempuri__DocAdd_ * soap_new_set___tempuri__DocAdd_(
	struct soap *soap,
	_tempuri__DocAdd *tempuri__DocAdd)
{
	struct __tempuri__DocAdd_ *_p = soap_new___tempuri__DocAdd_(soap);
	if (_p)
	{	soap_default___tempuri__DocAdd_(soap, _p);
		_p->tempuri__DocAdd = tempuri__DocAdd;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__DocAdd_(struct soap*, const struct __tempuri__DocAdd_ *, const char*, const char*);

inline int soap_write___tempuri__DocAdd_(struct soap *soap, struct __tempuri__DocAdd_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___tempuri__DocAdd_(soap, p), 0) || soap_put___tempuri__DocAdd_(soap, p, "-tempuri:DocAdd", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__DocAdd_(struct soap *soap, const char *URL, struct __tempuri__DocAdd_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__DocAdd_(soap, p), 0) || soap_put___tempuri__DocAdd_(soap, p, "-tempuri:DocAdd", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__DocAdd_(struct soap *soap, const char *URL, struct __tempuri__DocAdd_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__DocAdd_(soap, p), 0) || soap_put___tempuri__DocAdd_(soap, p, "-tempuri:DocAdd", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__DocAdd_ * SOAP_FMAC4 soap_get___tempuri__DocAdd_(struct soap*, struct __tempuri__DocAdd_ *, const char*, const char*);

inline int soap_read___tempuri__DocAdd_(struct soap *soap, struct __tempuri__DocAdd_ *p)
{
	if (p)
	{	soap_default___tempuri__DocAdd_(soap, p);
		if (soap_begin_recv(soap) || soap_get___tempuri__DocAdd_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__DocAdd_(struct soap *soap, const char *URL, struct __tempuri__DocAdd_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___tempuri__DocAdd_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___tempuri__DocAdd_(struct soap *soap, struct __tempuri__DocAdd_ *p)
{
	if (soap_read___tempuri__DocAdd_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tempuri__ItemsAdd__DEFINED
#define SOAP_TYPE___tempuri__ItemsAdd__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__ItemsAdd_(struct soap*, struct __tempuri__ItemsAdd_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__ItemsAdd_(struct soap*, const struct __tempuri__ItemsAdd_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__ItemsAdd_(struct soap*, const char*, int, const struct __tempuri__ItemsAdd_ *, const char*);
SOAP_FMAC3 struct __tempuri__ItemsAdd_ * SOAP_FMAC4 soap_in___tempuri__ItemsAdd_(struct soap*, const char*, struct __tempuri__ItemsAdd_ *, const char*);
SOAP_FMAC1 struct __tempuri__ItemsAdd_ * SOAP_FMAC2 soap_instantiate___tempuri__ItemsAdd_(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__ItemsAdd_ * soap_new___tempuri__ItemsAdd_(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__ItemsAdd_(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__ItemsAdd_ * soap_new_req___tempuri__ItemsAdd_(
	struct soap *soap)
{
	struct __tempuri__ItemsAdd_ *_p = soap_new___tempuri__ItemsAdd_(soap);
	if (_p)
	{	soap_default___tempuri__ItemsAdd_(soap, _p);
	}
	return _p;
}

inline struct __tempuri__ItemsAdd_ * soap_new_set___tempuri__ItemsAdd_(
	struct soap *soap,
	_tempuri__ItemsAdd *tempuri__ItemsAdd)
{
	struct __tempuri__ItemsAdd_ *_p = soap_new___tempuri__ItemsAdd_(soap);
	if (_p)
	{	soap_default___tempuri__ItemsAdd_(soap, _p);
		_p->tempuri__ItemsAdd = tempuri__ItemsAdd;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__ItemsAdd_(struct soap*, const struct __tempuri__ItemsAdd_ *, const char*, const char*);

inline int soap_write___tempuri__ItemsAdd_(struct soap *soap, struct __tempuri__ItemsAdd_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___tempuri__ItemsAdd_(soap, p), 0) || soap_put___tempuri__ItemsAdd_(soap, p, "-tempuri:ItemsAdd", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__ItemsAdd_(struct soap *soap, const char *URL, struct __tempuri__ItemsAdd_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__ItemsAdd_(soap, p), 0) || soap_put___tempuri__ItemsAdd_(soap, p, "-tempuri:ItemsAdd", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__ItemsAdd_(struct soap *soap, const char *URL, struct __tempuri__ItemsAdd_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__ItemsAdd_(soap, p), 0) || soap_put___tempuri__ItemsAdd_(soap, p, "-tempuri:ItemsAdd", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__ItemsAdd_ * SOAP_FMAC4 soap_get___tempuri__ItemsAdd_(struct soap*, struct __tempuri__ItemsAdd_ *, const char*, const char*);

inline int soap_read___tempuri__ItemsAdd_(struct soap *soap, struct __tempuri__ItemsAdd_ *p)
{
	if (p)
	{	soap_default___tempuri__ItemsAdd_(soap, p);
		if (soap_begin_recv(soap) || soap_get___tempuri__ItemsAdd_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__ItemsAdd_(struct soap *soap, const char *URL, struct __tempuri__ItemsAdd_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___tempuri__ItemsAdd_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___tempuri__ItemsAdd_(struct soap *soap, struct __tempuri__ItemsAdd_ *p)
{
	if (soap_read___tempuri__ItemsAdd_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tempuri__AnDonTest__DEFINED
#define SOAP_TYPE___tempuri__AnDonTest__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__AnDonTest_(struct soap*, struct __tempuri__AnDonTest_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__AnDonTest_(struct soap*, const struct __tempuri__AnDonTest_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__AnDonTest_(struct soap*, const char*, int, const struct __tempuri__AnDonTest_ *, const char*);
SOAP_FMAC3 struct __tempuri__AnDonTest_ * SOAP_FMAC4 soap_in___tempuri__AnDonTest_(struct soap*, const char*, struct __tempuri__AnDonTest_ *, const char*);
SOAP_FMAC1 struct __tempuri__AnDonTest_ * SOAP_FMAC2 soap_instantiate___tempuri__AnDonTest_(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__AnDonTest_ * soap_new___tempuri__AnDonTest_(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__AnDonTest_(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__AnDonTest_ * soap_new_req___tempuri__AnDonTest_(
	struct soap *soap)
{
	struct __tempuri__AnDonTest_ *_p = soap_new___tempuri__AnDonTest_(soap);
	if (_p)
	{	soap_default___tempuri__AnDonTest_(soap, _p);
	}
	return _p;
}

inline struct __tempuri__AnDonTest_ * soap_new_set___tempuri__AnDonTest_(
	struct soap *soap,
	_tempuri__AnDonTest *tempuri__AnDonTest)
{
	struct __tempuri__AnDonTest_ *_p = soap_new___tempuri__AnDonTest_(soap);
	if (_p)
	{	soap_default___tempuri__AnDonTest_(soap, _p);
		_p->tempuri__AnDonTest = tempuri__AnDonTest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__AnDonTest_(struct soap*, const struct __tempuri__AnDonTest_ *, const char*, const char*);

inline int soap_write___tempuri__AnDonTest_(struct soap *soap, struct __tempuri__AnDonTest_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___tempuri__AnDonTest_(soap, p), 0) || soap_put___tempuri__AnDonTest_(soap, p, "-tempuri:AnDonTest", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__AnDonTest_(struct soap *soap, const char *URL, struct __tempuri__AnDonTest_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__AnDonTest_(soap, p), 0) || soap_put___tempuri__AnDonTest_(soap, p, "-tempuri:AnDonTest", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__AnDonTest_(struct soap *soap, const char *URL, struct __tempuri__AnDonTest_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__AnDonTest_(soap, p), 0) || soap_put___tempuri__AnDonTest_(soap, p, "-tempuri:AnDonTest", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__AnDonTest_ * SOAP_FMAC4 soap_get___tempuri__AnDonTest_(struct soap*, struct __tempuri__AnDonTest_ *, const char*, const char*);

inline int soap_read___tempuri__AnDonTest_(struct soap *soap, struct __tempuri__AnDonTest_ *p)
{
	if (p)
	{	soap_default___tempuri__AnDonTest_(soap, p);
		if (soap_begin_recv(soap) || soap_get___tempuri__AnDonTest_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__AnDonTest_(struct soap *soap, const char *URL, struct __tempuri__AnDonTest_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___tempuri__AnDonTest_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___tempuri__AnDonTest_(struct soap *soap, struct __tempuri__AnDonTest_ *p)
{
	if (soap_read___tempuri__AnDonTest_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tempuri__AnDonCall__DEFINED
#define SOAP_TYPE___tempuri__AnDonCall__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__AnDonCall_(struct soap*, struct __tempuri__AnDonCall_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__AnDonCall_(struct soap*, const struct __tempuri__AnDonCall_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__AnDonCall_(struct soap*, const char*, int, const struct __tempuri__AnDonCall_ *, const char*);
SOAP_FMAC3 struct __tempuri__AnDonCall_ * SOAP_FMAC4 soap_in___tempuri__AnDonCall_(struct soap*, const char*, struct __tempuri__AnDonCall_ *, const char*);
SOAP_FMAC1 struct __tempuri__AnDonCall_ * SOAP_FMAC2 soap_instantiate___tempuri__AnDonCall_(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__AnDonCall_ * soap_new___tempuri__AnDonCall_(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__AnDonCall_(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__AnDonCall_ * soap_new_req___tempuri__AnDonCall_(
	struct soap *soap)
{
	struct __tempuri__AnDonCall_ *_p = soap_new___tempuri__AnDonCall_(soap);
	if (_p)
	{	soap_default___tempuri__AnDonCall_(soap, _p);
	}
	return _p;
}

inline struct __tempuri__AnDonCall_ * soap_new_set___tempuri__AnDonCall_(
	struct soap *soap,
	_tempuri__AnDonCall *tempuri__AnDonCall)
{
	struct __tempuri__AnDonCall_ *_p = soap_new___tempuri__AnDonCall_(soap);
	if (_p)
	{	soap_default___tempuri__AnDonCall_(soap, _p);
		_p->tempuri__AnDonCall = tempuri__AnDonCall;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__AnDonCall_(struct soap*, const struct __tempuri__AnDonCall_ *, const char*, const char*);

inline int soap_write___tempuri__AnDonCall_(struct soap *soap, struct __tempuri__AnDonCall_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___tempuri__AnDonCall_(soap, p), 0) || soap_put___tempuri__AnDonCall_(soap, p, "-tempuri:AnDonCall", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__AnDonCall_(struct soap *soap, const char *URL, struct __tempuri__AnDonCall_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__AnDonCall_(soap, p), 0) || soap_put___tempuri__AnDonCall_(soap, p, "-tempuri:AnDonCall", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__AnDonCall_(struct soap *soap, const char *URL, struct __tempuri__AnDonCall_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__AnDonCall_(soap, p), 0) || soap_put___tempuri__AnDonCall_(soap, p, "-tempuri:AnDonCall", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__AnDonCall_ * SOAP_FMAC4 soap_get___tempuri__AnDonCall_(struct soap*, struct __tempuri__AnDonCall_ *, const char*, const char*);

inline int soap_read___tempuri__AnDonCall_(struct soap *soap, struct __tempuri__AnDonCall_ *p)
{
	if (p)
	{	soap_default___tempuri__AnDonCall_(soap, p);
		if (soap_begin_recv(soap) || soap_get___tempuri__AnDonCall_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__AnDonCall_(struct soap *soap, const char *URL, struct __tempuri__AnDonCall_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___tempuri__AnDonCall_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___tempuri__AnDonCall_(struct soap *soap, struct __tempuri__AnDonCall_ *p)
{
	if (soap_read___tempuri__AnDonCall_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tempuri__AnDon__DEFINED
#define SOAP_TYPE___tempuri__AnDon__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__AnDon_(struct soap*, struct __tempuri__AnDon_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__AnDon_(struct soap*, const struct __tempuri__AnDon_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__AnDon_(struct soap*, const char*, int, const struct __tempuri__AnDon_ *, const char*);
SOAP_FMAC3 struct __tempuri__AnDon_ * SOAP_FMAC4 soap_in___tempuri__AnDon_(struct soap*, const char*, struct __tempuri__AnDon_ *, const char*);
SOAP_FMAC1 struct __tempuri__AnDon_ * SOAP_FMAC2 soap_instantiate___tempuri__AnDon_(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__AnDon_ * soap_new___tempuri__AnDon_(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__AnDon_(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__AnDon_ * soap_new_req___tempuri__AnDon_(
	struct soap *soap)
{
	struct __tempuri__AnDon_ *_p = soap_new___tempuri__AnDon_(soap);
	if (_p)
	{	soap_default___tempuri__AnDon_(soap, _p);
	}
	return _p;
}

inline struct __tempuri__AnDon_ * soap_new_set___tempuri__AnDon_(
	struct soap *soap,
	_tempuri__AnDon *tempuri__AnDon)
{
	struct __tempuri__AnDon_ *_p = soap_new___tempuri__AnDon_(soap);
	if (_p)
	{	soap_default___tempuri__AnDon_(soap, _p);
		_p->tempuri__AnDon = tempuri__AnDon;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__AnDon_(struct soap*, const struct __tempuri__AnDon_ *, const char*, const char*);

inline int soap_write___tempuri__AnDon_(struct soap *soap, struct __tempuri__AnDon_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___tempuri__AnDon_(soap, p), 0) || soap_put___tempuri__AnDon_(soap, p, "-tempuri:AnDon", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__AnDon_(struct soap *soap, const char *URL, struct __tempuri__AnDon_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__AnDon_(soap, p), 0) || soap_put___tempuri__AnDon_(soap, p, "-tempuri:AnDon", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__AnDon_(struct soap *soap, const char *URL, struct __tempuri__AnDon_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__AnDon_(soap, p), 0) || soap_put___tempuri__AnDon_(soap, p, "-tempuri:AnDon", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__AnDon_ * SOAP_FMAC4 soap_get___tempuri__AnDon_(struct soap*, struct __tempuri__AnDon_ *, const char*, const char*);

inline int soap_read___tempuri__AnDon_(struct soap *soap, struct __tempuri__AnDon_ *p)
{
	if (p)
	{	soap_default___tempuri__AnDon_(soap, p);
		if (soap_begin_recv(soap) || soap_get___tempuri__AnDon_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__AnDon_(struct soap *soap, const char *URL, struct __tempuri__AnDon_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___tempuri__AnDon_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___tempuri__AnDon_(struct soap *soap, struct __tempuri__AnDon_ *p)
{
	if (soap_read___tempuri__AnDon_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tempuri__LineInventoryReturn__DEFINED
#define SOAP_TYPE___tempuri__LineInventoryReturn__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__LineInventoryReturn_(struct soap*, struct __tempuri__LineInventoryReturn_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__LineInventoryReturn_(struct soap*, const struct __tempuri__LineInventoryReturn_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__LineInventoryReturn_(struct soap*, const char*, int, const struct __tempuri__LineInventoryReturn_ *, const char*);
SOAP_FMAC3 struct __tempuri__LineInventoryReturn_ * SOAP_FMAC4 soap_in___tempuri__LineInventoryReturn_(struct soap*, const char*, struct __tempuri__LineInventoryReturn_ *, const char*);
SOAP_FMAC1 struct __tempuri__LineInventoryReturn_ * SOAP_FMAC2 soap_instantiate___tempuri__LineInventoryReturn_(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__LineInventoryReturn_ * soap_new___tempuri__LineInventoryReturn_(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__LineInventoryReturn_(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__LineInventoryReturn_ * soap_new_req___tempuri__LineInventoryReturn_(
	struct soap *soap)
{
	struct __tempuri__LineInventoryReturn_ *_p = soap_new___tempuri__LineInventoryReturn_(soap);
	if (_p)
	{	soap_default___tempuri__LineInventoryReturn_(soap, _p);
	}
	return _p;
}

inline struct __tempuri__LineInventoryReturn_ * soap_new_set___tempuri__LineInventoryReturn_(
	struct soap *soap,
	_tempuri__LineInventoryReturn *tempuri__LineInventoryReturn)
{
	struct __tempuri__LineInventoryReturn_ *_p = soap_new___tempuri__LineInventoryReturn_(soap);
	if (_p)
	{	soap_default___tempuri__LineInventoryReturn_(soap, _p);
		_p->tempuri__LineInventoryReturn = tempuri__LineInventoryReturn;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__LineInventoryReturn_(struct soap*, const struct __tempuri__LineInventoryReturn_ *, const char*, const char*);

inline int soap_write___tempuri__LineInventoryReturn_(struct soap *soap, struct __tempuri__LineInventoryReturn_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___tempuri__LineInventoryReturn_(soap, p), 0) || soap_put___tempuri__LineInventoryReturn_(soap, p, "-tempuri:LineInventoryReturn", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__LineInventoryReturn_(struct soap *soap, const char *URL, struct __tempuri__LineInventoryReturn_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__LineInventoryReturn_(soap, p), 0) || soap_put___tempuri__LineInventoryReturn_(soap, p, "-tempuri:LineInventoryReturn", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__LineInventoryReturn_(struct soap *soap, const char *URL, struct __tempuri__LineInventoryReturn_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__LineInventoryReturn_(soap, p), 0) || soap_put___tempuri__LineInventoryReturn_(soap, p, "-tempuri:LineInventoryReturn", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__LineInventoryReturn_ * SOAP_FMAC4 soap_get___tempuri__LineInventoryReturn_(struct soap*, struct __tempuri__LineInventoryReturn_ *, const char*, const char*);

inline int soap_read___tempuri__LineInventoryReturn_(struct soap *soap, struct __tempuri__LineInventoryReturn_ *p)
{
	if (p)
	{	soap_default___tempuri__LineInventoryReturn_(soap, p);
		if (soap_begin_recv(soap) || soap_get___tempuri__LineInventoryReturn_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__LineInventoryReturn_(struct soap *soap, const char *URL, struct __tempuri__LineInventoryReturn_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___tempuri__LineInventoryReturn_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___tempuri__LineInventoryReturn_(struct soap *soap, struct __tempuri__LineInventoryReturn_ *p)
{
	if (soap_read___tempuri__LineInventoryReturn_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tempuri__LineInventoryUpdate__DEFINED
#define SOAP_TYPE___tempuri__LineInventoryUpdate__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__LineInventoryUpdate_(struct soap*, struct __tempuri__LineInventoryUpdate_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__LineInventoryUpdate_(struct soap*, const struct __tempuri__LineInventoryUpdate_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__LineInventoryUpdate_(struct soap*, const char*, int, const struct __tempuri__LineInventoryUpdate_ *, const char*);
SOAP_FMAC3 struct __tempuri__LineInventoryUpdate_ * SOAP_FMAC4 soap_in___tempuri__LineInventoryUpdate_(struct soap*, const char*, struct __tempuri__LineInventoryUpdate_ *, const char*);
SOAP_FMAC1 struct __tempuri__LineInventoryUpdate_ * SOAP_FMAC2 soap_instantiate___tempuri__LineInventoryUpdate_(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__LineInventoryUpdate_ * soap_new___tempuri__LineInventoryUpdate_(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__LineInventoryUpdate_(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__LineInventoryUpdate_ * soap_new_req___tempuri__LineInventoryUpdate_(
	struct soap *soap)
{
	struct __tempuri__LineInventoryUpdate_ *_p = soap_new___tempuri__LineInventoryUpdate_(soap);
	if (_p)
	{	soap_default___tempuri__LineInventoryUpdate_(soap, _p);
	}
	return _p;
}

inline struct __tempuri__LineInventoryUpdate_ * soap_new_set___tempuri__LineInventoryUpdate_(
	struct soap *soap,
	_tempuri__LineInventoryUpdate *tempuri__LineInventoryUpdate)
{
	struct __tempuri__LineInventoryUpdate_ *_p = soap_new___tempuri__LineInventoryUpdate_(soap);
	if (_p)
	{	soap_default___tempuri__LineInventoryUpdate_(soap, _p);
		_p->tempuri__LineInventoryUpdate = tempuri__LineInventoryUpdate;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__LineInventoryUpdate_(struct soap*, const struct __tempuri__LineInventoryUpdate_ *, const char*, const char*);

inline int soap_write___tempuri__LineInventoryUpdate_(struct soap *soap, struct __tempuri__LineInventoryUpdate_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___tempuri__LineInventoryUpdate_(soap, p), 0) || soap_put___tempuri__LineInventoryUpdate_(soap, p, "-tempuri:LineInventoryUpdate", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__LineInventoryUpdate_(struct soap *soap, const char *URL, struct __tempuri__LineInventoryUpdate_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__LineInventoryUpdate_(soap, p), 0) || soap_put___tempuri__LineInventoryUpdate_(soap, p, "-tempuri:LineInventoryUpdate", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__LineInventoryUpdate_(struct soap *soap, const char *URL, struct __tempuri__LineInventoryUpdate_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__LineInventoryUpdate_(soap, p), 0) || soap_put___tempuri__LineInventoryUpdate_(soap, p, "-tempuri:LineInventoryUpdate", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__LineInventoryUpdate_ * SOAP_FMAC4 soap_get___tempuri__LineInventoryUpdate_(struct soap*, struct __tempuri__LineInventoryUpdate_ *, const char*, const char*);

inline int soap_read___tempuri__LineInventoryUpdate_(struct soap *soap, struct __tempuri__LineInventoryUpdate_ *p)
{
	if (p)
	{	soap_default___tempuri__LineInventoryUpdate_(soap, p);
		if (soap_begin_recv(soap) || soap_get___tempuri__LineInventoryUpdate_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__LineInventoryUpdate_(struct soap *soap, const char *URL, struct __tempuri__LineInventoryUpdate_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___tempuri__LineInventoryUpdate_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___tempuri__LineInventoryUpdate_(struct soap *soap, struct __tempuri__LineInventoryUpdate_ *p)
{
	if (soap_read___tempuri__LineInventoryUpdate_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tempuri__LineInventory__DEFINED
#define SOAP_TYPE___tempuri__LineInventory__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__LineInventory_(struct soap*, struct __tempuri__LineInventory_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__LineInventory_(struct soap*, const struct __tempuri__LineInventory_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__LineInventory_(struct soap*, const char*, int, const struct __tempuri__LineInventory_ *, const char*);
SOAP_FMAC3 struct __tempuri__LineInventory_ * SOAP_FMAC4 soap_in___tempuri__LineInventory_(struct soap*, const char*, struct __tempuri__LineInventory_ *, const char*);
SOAP_FMAC1 struct __tempuri__LineInventory_ * SOAP_FMAC2 soap_instantiate___tempuri__LineInventory_(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__LineInventory_ * soap_new___tempuri__LineInventory_(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__LineInventory_(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__LineInventory_ * soap_new_req___tempuri__LineInventory_(
	struct soap *soap)
{
	struct __tempuri__LineInventory_ *_p = soap_new___tempuri__LineInventory_(soap);
	if (_p)
	{	soap_default___tempuri__LineInventory_(soap, _p);
	}
	return _p;
}

inline struct __tempuri__LineInventory_ * soap_new_set___tempuri__LineInventory_(
	struct soap *soap,
	_tempuri__LineInventory *tempuri__LineInventory)
{
	struct __tempuri__LineInventory_ *_p = soap_new___tempuri__LineInventory_(soap);
	if (_p)
	{	soap_default___tempuri__LineInventory_(soap, _p);
		_p->tempuri__LineInventory = tempuri__LineInventory;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__LineInventory_(struct soap*, const struct __tempuri__LineInventory_ *, const char*, const char*);

inline int soap_write___tempuri__LineInventory_(struct soap *soap, struct __tempuri__LineInventory_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___tempuri__LineInventory_(soap, p), 0) || soap_put___tempuri__LineInventory_(soap, p, "-tempuri:LineInventory", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__LineInventory_(struct soap *soap, const char *URL, struct __tempuri__LineInventory_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__LineInventory_(soap, p), 0) || soap_put___tempuri__LineInventory_(soap, p, "-tempuri:LineInventory", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__LineInventory_(struct soap *soap, const char *URL, struct __tempuri__LineInventory_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__LineInventory_(soap, p), 0) || soap_put___tempuri__LineInventory_(soap, p, "-tempuri:LineInventory", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__LineInventory_ * SOAP_FMAC4 soap_get___tempuri__LineInventory_(struct soap*, struct __tempuri__LineInventory_ *, const char*, const char*);

inline int soap_read___tempuri__LineInventory_(struct soap *soap, struct __tempuri__LineInventory_ *p)
{
	if (p)
	{	soap_default___tempuri__LineInventory_(soap, p);
		if (soap_begin_recv(soap) || soap_get___tempuri__LineInventory_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__LineInventory_(struct soap *soap, const char *URL, struct __tempuri__LineInventory_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___tempuri__LineInventory_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___tempuri__LineInventory_(struct soap *soap, struct __tempuri__LineInventory_ *p)
{
	if (soap_read___tempuri__LineInventory_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tempuri__WorkOrder__DEFINED
#define SOAP_TYPE___tempuri__WorkOrder__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__WorkOrder_(struct soap*, struct __tempuri__WorkOrder_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__WorkOrder_(struct soap*, const struct __tempuri__WorkOrder_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__WorkOrder_(struct soap*, const char*, int, const struct __tempuri__WorkOrder_ *, const char*);
SOAP_FMAC3 struct __tempuri__WorkOrder_ * SOAP_FMAC4 soap_in___tempuri__WorkOrder_(struct soap*, const char*, struct __tempuri__WorkOrder_ *, const char*);
SOAP_FMAC1 struct __tempuri__WorkOrder_ * SOAP_FMAC2 soap_instantiate___tempuri__WorkOrder_(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__WorkOrder_ * soap_new___tempuri__WorkOrder_(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__WorkOrder_(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__WorkOrder_ * soap_new_req___tempuri__WorkOrder_(
	struct soap *soap)
{
	struct __tempuri__WorkOrder_ *_p = soap_new___tempuri__WorkOrder_(soap);
	if (_p)
	{	soap_default___tempuri__WorkOrder_(soap, _p);
	}
	return _p;
}

inline struct __tempuri__WorkOrder_ * soap_new_set___tempuri__WorkOrder_(
	struct soap *soap,
	_tempuri__WorkOrder *tempuri__WorkOrder)
{
	struct __tempuri__WorkOrder_ *_p = soap_new___tempuri__WorkOrder_(soap);
	if (_p)
	{	soap_default___tempuri__WorkOrder_(soap, _p);
		_p->tempuri__WorkOrder = tempuri__WorkOrder;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__WorkOrder_(struct soap*, const struct __tempuri__WorkOrder_ *, const char*, const char*);

inline int soap_write___tempuri__WorkOrder_(struct soap *soap, struct __tempuri__WorkOrder_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___tempuri__WorkOrder_(soap, p), 0) || soap_put___tempuri__WorkOrder_(soap, p, "-tempuri:WorkOrder", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__WorkOrder_(struct soap *soap, const char *URL, struct __tempuri__WorkOrder_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__WorkOrder_(soap, p), 0) || soap_put___tempuri__WorkOrder_(soap, p, "-tempuri:WorkOrder", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__WorkOrder_(struct soap *soap, const char *URL, struct __tempuri__WorkOrder_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__WorkOrder_(soap, p), 0) || soap_put___tempuri__WorkOrder_(soap, p, "-tempuri:WorkOrder", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__WorkOrder_ * SOAP_FMAC4 soap_get___tempuri__WorkOrder_(struct soap*, struct __tempuri__WorkOrder_ *, const char*, const char*);

inline int soap_read___tempuri__WorkOrder_(struct soap *soap, struct __tempuri__WorkOrder_ *p)
{
	if (p)
	{	soap_default___tempuri__WorkOrder_(soap, p);
		if (soap_begin_recv(soap) || soap_get___tempuri__WorkOrder_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__WorkOrder_(struct soap *soap, const char *URL, struct __tempuri__WorkOrder_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___tempuri__WorkOrder_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___tempuri__WorkOrder_(struct soap *soap, struct __tempuri__WorkOrder_ *p)
{
	if (soap_read___tempuri__WorkOrder_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tempuri__ToolingTimes__DEFINED
#define SOAP_TYPE___tempuri__ToolingTimes__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__ToolingTimes_(struct soap*, struct __tempuri__ToolingTimes_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__ToolingTimes_(struct soap*, const struct __tempuri__ToolingTimes_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__ToolingTimes_(struct soap*, const char*, int, const struct __tempuri__ToolingTimes_ *, const char*);
SOAP_FMAC3 struct __tempuri__ToolingTimes_ * SOAP_FMAC4 soap_in___tempuri__ToolingTimes_(struct soap*, const char*, struct __tempuri__ToolingTimes_ *, const char*);
SOAP_FMAC1 struct __tempuri__ToolingTimes_ * SOAP_FMAC2 soap_instantiate___tempuri__ToolingTimes_(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__ToolingTimes_ * soap_new___tempuri__ToolingTimes_(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__ToolingTimes_(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__ToolingTimes_ * soap_new_req___tempuri__ToolingTimes_(
	struct soap *soap)
{
	struct __tempuri__ToolingTimes_ *_p = soap_new___tempuri__ToolingTimes_(soap);
	if (_p)
	{	soap_default___tempuri__ToolingTimes_(soap, _p);
	}
	return _p;
}

inline struct __tempuri__ToolingTimes_ * soap_new_set___tempuri__ToolingTimes_(
	struct soap *soap,
	_tempuri__ToolingTimes *tempuri__ToolingTimes)
{
	struct __tempuri__ToolingTimes_ *_p = soap_new___tempuri__ToolingTimes_(soap);
	if (_p)
	{	soap_default___tempuri__ToolingTimes_(soap, _p);
		_p->tempuri__ToolingTimes = tempuri__ToolingTimes;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__ToolingTimes_(struct soap*, const struct __tempuri__ToolingTimes_ *, const char*, const char*);

inline int soap_write___tempuri__ToolingTimes_(struct soap *soap, struct __tempuri__ToolingTimes_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___tempuri__ToolingTimes_(soap, p), 0) || soap_put___tempuri__ToolingTimes_(soap, p, "-tempuri:ToolingTimes", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__ToolingTimes_(struct soap *soap, const char *URL, struct __tempuri__ToolingTimes_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__ToolingTimes_(soap, p), 0) || soap_put___tempuri__ToolingTimes_(soap, p, "-tempuri:ToolingTimes", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__ToolingTimes_(struct soap *soap, const char *URL, struct __tempuri__ToolingTimes_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__ToolingTimes_(soap, p), 0) || soap_put___tempuri__ToolingTimes_(soap, p, "-tempuri:ToolingTimes", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__ToolingTimes_ * SOAP_FMAC4 soap_get___tempuri__ToolingTimes_(struct soap*, struct __tempuri__ToolingTimes_ *, const char*, const char*);

inline int soap_read___tempuri__ToolingTimes_(struct soap *soap, struct __tempuri__ToolingTimes_ *p)
{
	if (p)
	{	soap_default___tempuri__ToolingTimes_(soap, p);
		if (soap_begin_recv(soap) || soap_get___tempuri__ToolingTimes_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__ToolingTimes_(struct soap *soap, const char *URL, struct __tempuri__ToolingTimes_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___tempuri__ToolingTimes_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___tempuri__ToolingTimes_(struct soap *soap, struct __tempuri__ToolingTimes_ *p)
{
	if (soap_read___tempuri__ToolingTimes_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tempuri__GetDocCode__DEFINED
#define SOAP_TYPE___tempuri__GetDocCode__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__GetDocCode_(struct soap*, struct __tempuri__GetDocCode_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__GetDocCode_(struct soap*, const struct __tempuri__GetDocCode_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__GetDocCode_(struct soap*, const char*, int, const struct __tempuri__GetDocCode_ *, const char*);
SOAP_FMAC3 struct __tempuri__GetDocCode_ * SOAP_FMAC4 soap_in___tempuri__GetDocCode_(struct soap*, const char*, struct __tempuri__GetDocCode_ *, const char*);
SOAP_FMAC1 struct __tempuri__GetDocCode_ * SOAP_FMAC2 soap_instantiate___tempuri__GetDocCode_(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__GetDocCode_ * soap_new___tempuri__GetDocCode_(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__GetDocCode_(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__GetDocCode_ * soap_new_req___tempuri__GetDocCode_(
	struct soap *soap)
{
	struct __tempuri__GetDocCode_ *_p = soap_new___tempuri__GetDocCode_(soap);
	if (_p)
	{	soap_default___tempuri__GetDocCode_(soap, _p);
	}
	return _p;
}

inline struct __tempuri__GetDocCode_ * soap_new_set___tempuri__GetDocCode_(
	struct soap *soap,
	_tempuri__GetDocCode *tempuri__GetDocCode)
{
	struct __tempuri__GetDocCode_ *_p = soap_new___tempuri__GetDocCode_(soap);
	if (_p)
	{	soap_default___tempuri__GetDocCode_(soap, _p);
		_p->tempuri__GetDocCode = tempuri__GetDocCode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__GetDocCode_(struct soap*, const struct __tempuri__GetDocCode_ *, const char*, const char*);

inline int soap_write___tempuri__GetDocCode_(struct soap *soap, struct __tempuri__GetDocCode_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___tempuri__GetDocCode_(soap, p), 0) || soap_put___tempuri__GetDocCode_(soap, p, "-tempuri:GetDocCode", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__GetDocCode_(struct soap *soap, const char *URL, struct __tempuri__GetDocCode_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__GetDocCode_(soap, p), 0) || soap_put___tempuri__GetDocCode_(soap, p, "-tempuri:GetDocCode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__GetDocCode_(struct soap *soap, const char *URL, struct __tempuri__GetDocCode_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__GetDocCode_(soap, p), 0) || soap_put___tempuri__GetDocCode_(soap, p, "-tempuri:GetDocCode", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__GetDocCode_ * SOAP_FMAC4 soap_get___tempuri__GetDocCode_(struct soap*, struct __tempuri__GetDocCode_ *, const char*, const char*);

inline int soap_read___tempuri__GetDocCode_(struct soap *soap, struct __tempuri__GetDocCode_ *p)
{
	if (p)
	{	soap_default___tempuri__GetDocCode_(soap, p);
		if (soap_begin_recv(soap) || soap_get___tempuri__GetDocCode_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__GetDocCode_(struct soap *soap, const char *URL, struct __tempuri__GetDocCode_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___tempuri__GetDocCode_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___tempuri__GetDocCode_(struct soap *soap, struct __tempuri__GetDocCode_ *p)
{
	if (soap_read___tempuri__GetDocCode_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tempuri__GetDate__DEFINED
#define SOAP_TYPE___tempuri__GetDate__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__GetDate_(struct soap*, struct __tempuri__GetDate_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__GetDate_(struct soap*, const struct __tempuri__GetDate_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__GetDate_(struct soap*, const char*, int, const struct __tempuri__GetDate_ *, const char*);
SOAP_FMAC3 struct __tempuri__GetDate_ * SOAP_FMAC4 soap_in___tempuri__GetDate_(struct soap*, const char*, struct __tempuri__GetDate_ *, const char*);
SOAP_FMAC1 struct __tempuri__GetDate_ * SOAP_FMAC2 soap_instantiate___tempuri__GetDate_(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__GetDate_ * soap_new___tempuri__GetDate_(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__GetDate_(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__GetDate_ * soap_new_req___tempuri__GetDate_(
	struct soap *soap)
{
	struct __tempuri__GetDate_ *_p = soap_new___tempuri__GetDate_(soap);
	if (_p)
	{	soap_default___tempuri__GetDate_(soap, _p);
	}
	return _p;
}

inline struct __tempuri__GetDate_ * soap_new_set___tempuri__GetDate_(
	struct soap *soap,
	_tempuri__GetDate *tempuri__GetDate)
{
	struct __tempuri__GetDate_ *_p = soap_new___tempuri__GetDate_(soap);
	if (_p)
	{	soap_default___tempuri__GetDate_(soap, _p);
		_p->tempuri__GetDate = tempuri__GetDate;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__GetDate_(struct soap*, const struct __tempuri__GetDate_ *, const char*, const char*);

inline int soap_write___tempuri__GetDate_(struct soap *soap, struct __tempuri__GetDate_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___tempuri__GetDate_(soap, p), 0) || soap_put___tempuri__GetDate_(soap, p, "-tempuri:GetDate", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__GetDate_(struct soap *soap, const char *URL, struct __tempuri__GetDate_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__GetDate_(soap, p), 0) || soap_put___tempuri__GetDate_(soap, p, "-tempuri:GetDate", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__GetDate_(struct soap *soap, const char *URL, struct __tempuri__GetDate_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__GetDate_(soap, p), 0) || soap_put___tempuri__GetDate_(soap, p, "-tempuri:GetDate", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__GetDate_ * SOAP_FMAC4 soap_get___tempuri__GetDate_(struct soap*, struct __tempuri__GetDate_ *, const char*, const char*);

inline int soap_read___tempuri__GetDate_(struct soap *soap, struct __tempuri__GetDate_ *p)
{
	if (p)
	{	soap_default___tempuri__GetDate_(soap, p);
		if (soap_begin_recv(soap) || soap_get___tempuri__GetDate_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__GetDate_(struct soap *soap, const char *URL, struct __tempuri__GetDate_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___tempuri__GetDate_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___tempuri__GetDate_(struct soap *soap, struct __tempuri__GetDate_ *p)
{
	if (soap_read___tempuri__GetDate_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tempuri__Login_DEFINED
#define SOAP_TYPE___tempuri__Login_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__Login(struct soap*, struct __tempuri__Login *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__Login(struct soap*, const struct __tempuri__Login *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__Login(struct soap*, const char*, int, const struct __tempuri__Login *, const char*);
SOAP_FMAC3 struct __tempuri__Login * SOAP_FMAC4 soap_in___tempuri__Login(struct soap*, const char*, struct __tempuri__Login *, const char*);
SOAP_FMAC1 struct __tempuri__Login * SOAP_FMAC2 soap_instantiate___tempuri__Login(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__Login * soap_new___tempuri__Login(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__Login(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__Login * soap_new_req___tempuri__Login(
	struct soap *soap)
{
	struct __tempuri__Login *_p = soap_new___tempuri__Login(soap);
	if (_p)
	{	soap_default___tempuri__Login(soap, _p);
	}
	return _p;
}

inline struct __tempuri__Login * soap_new_set___tempuri__Login(
	struct soap *soap,
	_tempuri__Login *tempuri__Login)
{
	struct __tempuri__Login *_p = soap_new___tempuri__Login(soap);
	if (_p)
	{	soap_default___tempuri__Login(soap, _p);
		_p->tempuri__Login = tempuri__Login;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__Login(struct soap*, const struct __tempuri__Login *, const char*, const char*);

inline int soap_write___tempuri__Login(struct soap *soap, struct __tempuri__Login const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___tempuri__Login(soap, p), 0) || soap_put___tempuri__Login(soap, p, "-tempuri:Login", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__Login(struct soap *soap, const char *URL, struct __tempuri__Login const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__Login(soap, p), 0) || soap_put___tempuri__Login(soap, p, "-tempuri:Login", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__Login(struct soap *soap, const char *URL, struct __tempuri__Login const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__Login(soap, p), 0) || soap_put___tempuri__Login(soap, p, "-tempuri:Login", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__Login * SOAP_FMAC4 soap_get___tempuri__Login(struct soap*, struct __tempuri__Login *, const char*, const char*);

inline int soap_read___tempuri__Login(struct soap *soap, struct __tempuri__Login *p)
{
	if (p)
	{	soap_default___tempuri__Login(soap, p);
		if (soap_begin_recv(soap) || soap_get___tempuri__Login(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__Login(struct soap *soap, const char *URL, struct __tempuri__Login *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___tempuri__Login(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___tempuri__Login(struct soap *soap, struct __tempuri__Login *p)
{
	if (soap_read___tempuri__Login(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tempuri__GetPower_DEFINED
#define SOAP_TYPE___tempuri__GetPower_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__GetPower(struct soap*, struct __tempuri__GetPower *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__GetPower(struct soap*, const struct __tempuri__GetPower *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__GetPower(struct soap*, const char*, int, const struct __tempuri__GetPower *, const char*);
SOAP_FMAC3 struct __tempuri__GetPower * SOAP_FMAC4 soap_in___tempuri__GetPower(struct soap*, const char*, struct __tempuri__GetPower *, const char*);
SOAP_FMAC1 struct __tempuri__GetPower * SOAP_FMAC2 soap_instantiate___tempuri__GetPower(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__GetPower * soap_new___tempuri__GetPower(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__GetPower(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__GetPower * soap_new_req___tempuri__GetPower(
	struct soap *soap)
{
	struct __tempuri__GetPower *_p = soap_new___tempuri__GetPower(soap);
	if (_p)
	{	soap_default___tempuri__GetPower(soap, _p);
	}
	return _p;
}

inline struct __tempuri__GetPower * soap_new_set___tempuri__GetPower(
	struct soap *soap,
	_tempuri__GetPower *tempuri__GetPower)
{
	struct __tempuri__GetPower *_p = soap_new___tempuri__GetPower(soap);
	if (_p)
	{	soap_default___tempuri__GetPower(soap, _p);
		_p->tempuri__GetPower = tempuri__GetPower;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__GetPower(struct soap*, const struct __tempuri__GetPower *, const char*, const char*);

inline int soap_write___tempuri__GetPower(struct soap *soap, struct __tempuri__GetPower const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___tempuri__GetPower(soap, p), 0) || soap_put___tempuri__GetPower(soap, p, "-tempuri:GetPower", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__GetPower(struct soap *soap, const char *URL, struct __tempuri__GetPower const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__GetPower(soap, p), 0) || soap_put___tempuri__GetPower(soap, p, "-tempuri:GetPower", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__GetPower(struct soap *soap, const char *URL, struct __tempuri__GetPower const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__GetPower(soap, p), 0) || soap_put___tempuri__GetPower(soap, p, "-tempuri:GetPower", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__GetPower * SOAP_FMAC4 soap_get___tempuri__GetPower(struct soap*, struct __tempuri__GetPower *, const char*, const char*);

inline int soap_read___tempuri__GetPower(struct soap *soap, struct __tempuri__GetPower *p)
{
	if (p)
	{	soap_default___tempuri__GetPower(soap, p);
		if (soap_begin_recv(soap) || soap_get___tempuri__GetPower(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__GetPower(struct soap *soap, const char *URL, struct __tempuri__GetPower *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___tempuri__GetPower(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___tempuri__GetPower(struct soap *soap, struct __tempuri__GetPower *p)
{
	if (soap_read___tempuri__GetPower(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tempuri__GetDept_DEFINED
#define SOAP_TYPE___tempuri__GetDept_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__GetDept(struct soap*, struct __tempuri__GetDept *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__GetDept(struct soap*, const struct __tempuri__GetDept *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__GetDept(struct soap*, const char*, int, const struct __tempuri__GetDept *, const char*);
SOAP_FMAC3 struct __tempuri__GetDept * SOAP_FMAC4 soap_in___tempuri__GetDept(struct soap*, const char*, struct __tempuri__GetDept *, const char*);
SOAP_FMAC1 struct __tempuri__GetDept * SOAP_FMAC2 soap_instantiate___tempuri__GetDept(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__GetDept * soap_new___tempuri__GetDept(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__GetDept(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__GetDept * soap_new_req___tempuri__GetDept(
	struct soap *soap)
{
	struct __tempuri__GetDept *_p = soap_new___tempuri__GetDept(soap);
	if (_p)
	{	soap_default___tempuri__GetDept(soap, _p);
	}
	return _p;
}

inline struct __tempuri__GetDept * soap_new_set___tempuri__GetDept(
	struct soap *soap,
	_tempuri__GetDept *tempuri__GetDept)
{
	struct __tempuri__GetDept *_p = soap_new___tempuri__GetDept(soap);
	if (_p)
	{	soap_default___tempuri__GetDept(soap, _p);
		_p->tempuri__GetDept = tempuri__GetDept;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__GetDept(struct soap*, const struct __tempuri__GetDept *, const char*, const char*);

inline int soap_write___tempuri__GetDept(struct soap *soap, struct __tempuri__GetDept const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___tempuri__GetDept(soap, p), 0) || soap_put___tempuri__GetDept(soap, p, "-tempuri:GetDept", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__GetDept(struct soap *soap, const char *URL, struct __tempuri__GetDept const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__GetDept(soap, p), 0) || soap_put___tempuri__GetDept(soap, p, "-tempuri:GetDept", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__GetDept(struct soap *soap, const char *URL, struct __tempuri__GetDept const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__GetDept(soap, p), 0) || soap_put___tempuri__GetDept(soap, p, "-tempuri:GetDept", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__GetDept * SOAP_FMAC4 soap_get___tempuri__GetDept(struct soap*, struct __tempuri__GetDept *, const char*, const char*);

inline int soap_read___tempuri__GetDept(struct soap *soap, struct __tempuri__GetDept *p)
{
	if (p)
	{	soap_default___tempuri__GetDept(soap, p);
		if (soap_begin_recv(soap) || soap_get___tempuri__GetDept(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__GetDept(struct soap *soap, const char *URL, struct __tempuri__GetDept *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___tempuri__GetDept(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___tempuri__GetDept(struct soap *soap, struct __tempuri__GetDept *p)
{
	if (soap_read___tempuri__GetDept(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tempuri__SetExMail_DEFINED
#define SOAP_TYPE___tempuri__SetExMail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__SetExMail(struct soap*, struct __tempuri__SetExMail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__SetExMail(struct soap*, const struct __tempuri__SetExMail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__SetExMail(struct soap*, const char*, int, const struct __tempuri__SetExMail *, const char*);
SOAP_FMAC3 struct __tempuri__SetExMail * SOAP_FMAC4 soap_in___tempuri__SetExMail(struct soap*, const char*, struct __tempuri__SetExMail *, const char*);
SOAP_FMAC1 struct __tempuri__SetExMail * SOAP_FMAC2 soap_instantiate___tempuri__SetExMail(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__SetExMail * soap_new___tempuri__SetExMail(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__SetExMail(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__SetExMail * soap_new_req___tempuri__SetExMail(
	struct soap *soap)
{
	struct __tempuri__SetExMail *_p = soap_new___tempuri__SetExMail(soap);
	if (_p)
	{	soap_default___tempuri__SetExMail(soap, _p);
	}
	return _p;
}

inline struct __tempuri__SetExMail * soap_new_set___tempuri__SetExMail(
	struct soap *soap,
	_tempuri__SetExMail *tempuri__SetExMail)
{
	struct __tempuri__SetExMail *_p = soap_new___tempuri__SetExMail(soap);
	if (_p)
	{	soap_default___tempuri__SetExMail(soap, _p);
		_p->tempuri__SetExMail = tempuri__SetExMail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__SetExMail(struct soap*, const struct __tempuri__SetExMail *, const char*, const char*);

inline int soap_write___tempuri__SetExMail(struct soap *soap, struct __tempuri__SetExMail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___tempuri__SetExMail(soap, p), 0) || soap_put___tempuri__SetExMail(soap, p, "-tempuri:SetExMail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__SetExMail(struct soap *soap, const char *URL, struct __tempuri__SetExMail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__SetExMail(soap, p), 0) || soap_put___tempuri__SetExMail(soap, p, "-tempuri:SetExMail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__SetExMail(struct soap *soap, const char *URL, struct __tempuri__SetExMail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__SetExMail(soap, p), 0) || soap_put___tempuri__SetExMail(soap, p, "-tempuri:SetExMail", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__SetExMail * SOAP_FMAC4 soap_get___tempuri__SetExMail(struct soap*, struct __tempuri__SetExMail *, const char*, const char*);

inline int soap_read___tempuri__SetExMail(struct soap *soap, struct __tempuri__SetExMail *p)
{
	if (p)
	{	soap_default___tempuri__SetExMail(soap, p);
		if (soap_begin_recv(soap) || soap_get___tempuri__SetExMail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__SetExMail(struct soap *soap, const char *URL, struct __tempuri__SetExMail *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___tempuri__SetExMail(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___tempuri__SetExMail(struct soap *soap, struct __tempuri__SetExMail *p)
{
	if (soap_read___tempuri__SetExMail(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tempuri__DocAdd_DEFINED
#define SOAP_TYPE___tempuri__DocAdd_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__DocAdd(struct soap*, struct __tempuri__DocAdd *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__DocAdd(struct soap*, const struct __tempuri__DocAdd *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__DocAdd(struct soap*, const char*, int, const struct __tempuri__DocAdd *, const char*);
SOAP_FMAC3 struct __tempuri__DocAdd * SOAP_FMAC4 soap_in___tempuri__DocAdd(struct soap*, const char*, struct __tempuri__DocAdd *, const char*);
SOAP_FMAC1 struct __tempuri__DocAdd * SOAP_FMAC2 soap_instantiate___tempuri__DocAdd(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__DocAdd * soap_new___tempuri__DocAdd(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__DocAdd(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__DocAdd * soap_new_req___tempuri__DocAdd(
	struct soap *soap)
{
	struct __tempuri__DocAdd *_p = soap_new___tempuri__DocAdd(soap);
	if (_p)
	{	soap_default___tempuri__DocAdd(soap, _p);
	}
	return _p;
}

inline struct __tempuri__DocAdd * soap_new_set___tempuri__DocAdd(
	struct soap *soap,
	_tempuri__DocAdd *tempuri__DocAdd)
{
	struct __tempuri__DocAdd *_p = soap_new___tempuri__DocAdd(soap);
	if (_p)
	{	soap_default___tempuri__DocAdd(soap, _p);
		_p->tempuri__DocAdd = tempuri__DocAdd;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__DocAdd(struct soap*, const struct __tempuri__DocAdd *, const char*, const char*);

inline int soap_write___tempuri__DocAdd(struct soap *soap, struct __tempuri__DocAdd const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___tempuri__DocAdd(soap, p), 0) || soap_put___tempuri__DocAdd(soap, p, "-tempuri:DocAdd", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__DocAdd(struct soap *soap, const char *URL, struct __tempuri__DocAdd const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__DocAdd(soap, p), 0) || soap_put___tempuri__DocAdd(soap, p, "-tempuri:DocAdd", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__DocAdd(struct soap *soap, const char *URL, struct __tempuri__DocAdd const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__DocAdd(soap, p), 0) || soap_put___tempuri__DocAdd(soap, p, "-tempuri:DocAdd", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__DocAdd * SOAP_FMAC4 soap_get___tempuri__DocAdd(struct soap*, struct __tempuri__DocAdd *, const char*, const char*);

inline int soap_read___tempuri__DocAdd(struct soap *soap, struct __tempuri__DocAdd *p)
{
	if (p)
	{	soap_default___tempuri__DocAdd(soap, p);
		if (soap_begin_recv(soap) || soap_get___tempuri__DocAdd(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__DocAdd(struct soap *soap, const char *URL, struct __tempuri__DocAdd *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___tempuri__DocAdd(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___tempuri__DocAdd(struct soap *soap, struct __tempuri__DocAdd *p)
{
	if (soap_read___tempuri__DocAdd(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tempuri__ItemsAdd_DEFINED
#define SOAP_TYPE___tempuri__ItemsAdd_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__ItemsAdd(struct soap*, struct __tempuri__ItemsAdd *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__ItemsAdd(struct soap*, const struct __tempuri__ItemsAdd *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__ItemsAdd(struct soap*, const char*, int, const struct __tempuri__ItemsAdd *, const char*);
SOAP_FMAC3 struct __tempuri__ItemsAdd * SOAP_FMAC4 soap_in___tempuri__ItemsAdd(struct soap*, const char*, struct __tempuri__ItemsAdd *, const char*);
SOAP_FMAC1 struct __tempuri__ItemsAdd * SOAP_FMAC2 soap_instantiate___tempuri__ItemsAdd(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__ItemsAdd * soap_new___tempuri__ItemsAdd(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__ItemsAdd(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__ItemsAdd * soap_new_req___tempuri__ItemsAdd(
	struct soap *soap)
{
	struct __tempuri__ItemsAdd *_p = soap_new___tempuri__ItemsAdd(soap);
	if (_p)
	{	soap_default___tempuri__ItemsAdd(soap, _p);
	}
	return _p;
}

inline struct __tempuri__ItemsAdd * soap_new_set___tempuri__ItemsAdd(
	struct soap *soap,
	_tempuri__ItemsAdd *tempuri__ItemsAdd)
{
	struct __tempuri__ItemsAdd *_p = soap_new___tempuri__ItemsAdd(soap);
	if (_p)
	{	soap_default___tempuri__ItemsAdd(soap, _p);
		_p->tempuri__ItemsAdd = tempuri__ItemsAdd;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__ItemsAdd(struct soap*, const struct __tempuri__ItemsAdd *, const char*, const char*);

inline int soap_write___tempuri__ItemsAdd(struct soap *soap, struct __tempuri__ItemsAdd const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___tempuri__ItemsAdd(soap, p), 0) || soap_put___tempuri__ItemsAdd(soap, p, "-tempuri:ItemsAdd", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__ItemsAdd(struct soap *soap, const char *URL, struct __tempuri__ItemsAdd const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__ItemsAdd(soap, p), 0) || soap_put___tempuri__ItemsAdd(soap, p, "-tempuri:ItemsAdd", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__ItemsAdd(struct soap *soap, const char *URL, struct __tempuri__ItemsAdd const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__ItemsAdd(soap, p), 0) || soap_put___tempuri__ItemsAdd(soap, p, "-tempuri:ItemsAdd", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__ItemsAdd * SOAP_FMAC4 soap_get___tempuri__ItemsAdd(struct soap*, struct __tempuri__ItemsAdd *, const char*, const char*);

inline int soap_read___tempuri__ItemsAdd(struct soap *soap, struct __tempuri__ItemsAdd *p)
{
	if (p)
	{	soap_default___tempuri__ItemsAdd(soap, p);
		if (soap_begin_recv(soap) || soap_get___tempuri__ItemsAdd(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__ItemsAdd(struct soap *soap, const char *URL, struct __tempuri__ItemsAdd *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___tempuri__ItemsAdd(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___tempuri__ItemsAdd(struct soap *soap, struct __tempuri__ItemsAdd *p)
{
	if (soap_read___tempuri__ItemsAdd(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tempuri__AnDonTest_DEFINED
#define SOAP_TYPE___tempuri__AnDonTest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__AnDonTest(struct soap*, struct __tempuri__AnDonTest *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__AnDonTest(struct soap*, const struct __tempuri__AnDonTest *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__AnDonTest(struct soap*, const char*, int, const struct __tempuri__AnDonTest *, const char*);
SOAP_FMAC3 struct __tempuri__AnDonTest * SOAP_FMAC4 soap_in___tempuri__AnDonTest(struct soap*, const char*, struct __tempuri__AnDonTest *, const char*);
SOAP_FMAC1 struct __tempuri__AnDonTest * SOAP_FMAC2 soap_instantiate___tempuri__AnDonTest(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__AnDonTest * soap_new___tempuri__AnDonTest(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__AnDonTest(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__AnDonTest * soap_new_req___tempuri__AnDonTest(
	struct soap *soap)
{
	struct __tempuri__AnDonTest *_p = soap_new___tempuri__AnDonTest(soap);
	if (_p)
	{	soap_default___tempuri__AnDonTest(soap, _p);
	}
	return _p;
}

inline struct __tempuri__AnDonTest * soap_new_set___tempuri__AnDonTest(
	struct soap *soap,
	_tempuri__AnDonTest *tempuri__AnDonTest)
{
	struct __tempuri__AnDonTest *_p = soap_new___tempuri__AnDonTest(soap);
	if (_p)
	{	soap_default___tempuri__AnDonTest(soap, _p);
		_p->tempuri__AnDonTest = tempuri__AnDonTest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__AnDonTest(struct soap*, const struct __tempuri__AnDonTest *, const char*, const char*);

inline int soap_write___tempuri__AnDonTest(struct soap *soap, struct __tempuri__AnDonTest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___tempuri__AnDonTest(soap, p), 0) || soap_put___tempuri__AnDonTest(soap, p, "-tempuri:AnDonTest", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__AnDonTest(struct soap *soap, const char *URL, struct __tempuri__AnDonTest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__AnDonTest(soap, p), 0) || soap_put___tempuri__AnDonTest(soap, p, "-tempuri:AnDonTest", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__AnDonTest(struct soap *soap, const char *URL, struct __tempuri__AnDonTest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__AnDonTest(soap, p), 0) || soap_put___tempuri__AnDonTest(soap, p, "-tempuri:AnDonTest", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__AnDonTest * SOAP_FMAC4 soap_get___tempuri__AnDonTest(struct soap*, struct __tempuri__AnDonTest *, const char*, const char*);

inline int soap_read___tempuri__AnDonTest(struct soap *soap, struct __tempuri__AnDonTest *p)
{
	if (p)
	{	soap_default___tempuri__AnDonTest(soap, p);
		if (soap_begin_recv(soap) || soap_get___tempuri__AnDonTest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__AnDonTest(struct soap *soap, const char *URL, struct __tempuri__AnDonTest *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___tempuri__AnDonTest(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___tempuri__AnDonTest(struct soap *soap, struct __tempuri__AnDonTest *p)
{
	if (soap_read___tempuri__AnDonTest(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tempuri__AnDonCall_DEFINED
#define SOAP_TYPE___tempuri__AnDonCall_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__AnDonCall(struct soap*, struct __tempuri__AnDonCall *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__AnDonCall(struct soap*, const struct __tempuri__AnDonCall *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__AnDonCall(struct soap*, const char*, int, const struct __tempuri__AnDonCall *, const char*);
SOAP_FMAC3 struct __tempuri__AnDonCall * SOAP_FMAC4 soap_in___tempuri__AnDonCall(struct soap*, const char*, struct __tempuri__AnDonCall *, const char*);
SOAP_FMAC1 struct __tempuri__AnDonCall * SOAP_FMAC2 soap_instantiate___tempuri__AnDonCall(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__AnDonCall * soap_new___tempuri__AnDonCall(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__AnDonCall(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__AnDonCall * soap_new_req___tempuri__AnDonCall(
	struct soap *soap)
{
	struct __tempuri__AnDonCall *_p = soap_new___tempuri__AnDonCall(soap);
	if (_p)
	{	soap_default___tempuri__AnDonCall(soap, _p);
	}
	return _p;
}

inline struct __tempuri__AnDonCall * soap_new_set___tempuri__AnDonCall(
	struct soap *soap,
	_tempuri__AnDonCall *tempuri__AnDonCall)
{
	struct __tempuri__AnDonCall *_p = soap_new___tempuri__AnDonCall(soap);
	if (_p)
	{	soap_default___tempuri__AnDonCall(soap, _p);
		_p->tempuri__AnDonCall = tempuri__AnDonCall;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__AnDonCall(struct soap*, const struct __tempuri__AnDonCall *, const char*, const char*);

inline int soap_write___tempuri__AnDonCall(struct soap *soap, struct __tempuri__AnDonCall const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___tempuri__AnDonCall(soap, p), 0) || soap_put___tempuri__AnDonCall(soap, p, "-tempuri:AnDonCall", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__AnDonCall(struct soap *soap, const char *URL, struct __tempuri__AnDonCall const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__AnDonCall(soap, p), 0) || soap_put___tempuri__AnDonCall(soap, p, "-tempuri:AnDonCall", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__AnDonCall(struct soap *soap, const char *URL, struct __tempuri__AnDonCall const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__AnDonCall(soap, p), 0) || soap_put___tempuri__AnDonCall(soap, p, "-tempuri:AnDonCall", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__AnDonCall * SOAP_FMAC4 soap_get___tempuri__AnDonCall(struct soap*, struct __tempuri__AnDonCall *, const char*, const char*);

inline int soap_read___tempuri__AnDonCall(struct soap *soap, struct __tempuri__AnDonCall *p)
{
	if (p)
	{	soap_default___tempuri__AnDonCall(soap, p);
		if (soap_begin_recv(soap) || soap_get___tempuri__AnDonCall(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__AnDonCall(struct soap *soap, const char *URL, struct __tempuri__AnDonCall *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___tempuri__AnDonCall(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___tempuri__AnDonCall(struct soap *soap, struct __tempuri__AnDonCall *p)
{
	if (soap_read___tempuri__AnDonCall(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tempuri__AnDon_DEFINED
#define SOAP_TYPE___tempuri__AnDon_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__AnDon(struct soap*, struct __tempuri__AnDon *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__AnDon(struct soap*, const struct __tempuri__AnDon *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__AnDon(struct soap*, const char*, int, const struct __tempuri__AnDon *, const char*);
SOAP_FMAC3 struct __tempuri__AnDon * SOAP_FMAC4 soap_in___tempuri__AnDon(struct soap*, const char*, struct __tempuri__AnDon *, const char*);
SOAP_FMAC1 struct __tempuri__AnDon * SOAP_FMAC2 soap_instantiate___tempuri__AnDon(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__AnDon * soap_new___tempuri__AnDon(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__AnDon(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__AnDon * soap_new_req___tempuri__AnDon(
	struct soap *soap)
{
	struct __tempuri__AnDon *_p = soap_new___tempuri__AnDon(soap);
	if (_p)
	{	soap_default___tempuri__AnDon(soap, _p);
	}
	return _p;
}

inline struct __tempuri__AnDon * soap_new_set___tempuri__AnDon(
	struct soap *soap,
	_tempuri__AnDon *tempuri__AnDon)
{
	struct __tempuri__AnDon *_p = soap_new___tempuri__AnDon(soap);
	if (_p)
	{	soap_default___tempuri__AnDon(soap, _p);
		_p->tempuri__AnDon = tempuri__AnDon;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__AnDon(struct soap*, const struct __tempuri__AnDon *, const char*, const char*);

inline int soap_write___tempuri__AnDon(struct soap *soap, struct __tempuri__AnDon const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___tempuri__AnDon(soap, p), 0) || soap_put___tempuri__AnDon(soap, p, "-tempuri:AnDon", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__AnDon(struct soap *soap, const char *URL, struct __tempuri__AnDon const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__AnDon(soap, p), 0) || soap_put___tempuri__AnDon(soap, p, "-tempuri:AnDon", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__AnDon(struct soap *soap, const char *URL, struct __tempuri__AnDon const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__AnDon(soap, p), 0) || soap_put___tempuri__AnDon(soap, p, "-tempuri:AnDon", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__AnDon * SOAP_FMAC4 soap_get___tempuri__AnDon(struct soap*, struct __tempuri__AnDon *, const char*, const char*);

inline int soap_read___tempuri__AnDon(struct soap *soap, struct __tempuri__AnDon *p)
{
	if (p)
	{	soap_default___tempuri__AnDon(soap, p);
		if (soap_begin_recv(soap) || soap_get___tempuri__AnDon(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__AnDon(struct soap *soap, const char *URL, struct __tempuri__AnDon *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___tempuri__AnDon(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___tempuri__AnDon(struct soap *soap, struct __tempuri__AnDon *p)
{
	if (soap_read___tempuri__AnDon(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tempuri__LineInventoryReturn_DEFINED
#define SOAP_TYPE___tempuri__LineInventoryReturn_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__LineInventoryReturn(struct soap*, struct __tempuri__LineInventoryReturn *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__LineInventoryReturn(struct soap*, const struct __tempuri__LineInventoryReturn *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__LineInventoryReturn(struct soap*, const char*, int, const struct __tempuri__LineInventoryReturn *, const char*);
SOAP_FMAC3 struct __tempuri__LineInventoryReturn * SOAP_FMAC4 soap_in___tempuri__LineInventoryReturn(struct soap*, const char*, struct __tempuri__LineInventoryReturn *, const char*);
SOAP_FMAC1 struct __tempuri__LineInventoryReturn * SOAP_FMAC2 soap_instantiate___tempuri__LineInventoryReturn(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__LineInventoryReturn * soap_new___tempuri__LineInventoryReturn(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__LineInventoryReturn(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__LineInventoryReturn * soap_new_req___tempuri__LineInventoryReturn(
	struct soap *soap)
{
	struct __tempuri__LineInventoryReturn *_p = soap_new___tempuri__LineInventoryReturn(soap);
	if (_p)
	{	soap_default___tempuri__LineInventoryReturn(soap, _p);
	}
	return _p;
}

inline struct __tempuri__LineInventoryReturn * soap_new_set___tempuri__LineInventoryReturn(
	struct soap *soap,
	_tempuri__LineInventoryReturn *tempuri__LineInventoryReturn)
{
	struct __tempuri__LineInventoryReturn *_p = soap_new___tempuri__LineInventoryReturn(soap);
	if (_p)
	{	soap_default___tempuri__LineInventoryReturn(soap, _p);
		_p->tempuri__LineInventoryReturn = tempuri__LineInventoryReturn;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__LineInventoryReturn(struct soap*, const struct __tempuri__LineInventoryReturn *, const char*, const char*);

inline int soap_write___tempuri__LineInventoryReturn(struct soap *soap, struct __tempuri__LineInventoryReturn const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___tempuri__LineInventoryReturn(soap, p), 0) || soap_put___tempuri__LineInventoryReturn(soap, p, "-tempuri:LineInventoryReturn", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__LineInventoryReturn(struct soap *soap, const char *URL, struct __tempuri__LineInventoryReturn const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__LineInventoryReturn(soap, p), 0) || soap_put___tempuri__LineInventoryReturn(soap, p, "-tempuri:LineInventoryReturn", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__LineInventoryReturn(struct soap *soap, const char *URL, struct __tempuri__LineInventoryReturn const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__LineInventoryReturn(soap, p), 0) || soap_put___tempuri__LineInventoryReturn(soap, p, "-tempuri:LineInventoryReturn", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__LineInventoryReturn * SOAP_FMAC4 soap_get___tempuri__LineInventoryReturn(struct soap*, struct __tempuri__LineInventoryReturn *, const char*, const char*);

inline int soap_read___tempuri__LineInventoryReturn(struct soap *soap, struct __tempuri__LineInventoryReturn *p)
{
	if (p)
	{	soap_default___tempuri__LineInventoryReturn(soap, p);
		if (soap_begin_recv(soap) || soap_get___tempuri__LineInventoryReturn(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__LineInventoryReturn(struct soap *soap, const char *URL, struct __tempuri__LineInventoryReturn *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___tempuri__LineInventoryReturn(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___tempuri__LineInventoryReturn(struct soap *soap, struct __tempuri__LineInventoryReturn *p)
{
	if (soap_read___tempuri__LineInventoryReturn(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tempuri__LineInventoryUpdate_DEFINED
#define SOAP_TYPE___tempuri__LineInventoryUpdate_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__LineInventoryUpdate(struct soap*, struct __tempuri__LineInventoryUpdate *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__LineInventoryUpdate(struct soap*, const struct __tempuri__LineInventoryUpdate *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__LineInventoryUpdate(struct soap*, const char*, int, const struct __tempuri__LineInventoryUpdate *, const char*);
SOAP_FMAC3 struct __tempuri__LineInventoryUpdate * SOAP_FMAC4 soap_in___tempuri__LineInventoryUpdate(struct soap*, const char*, struct __tempuri__LineInventoryUpdate *, const char*);
SOAP_FMAC1 struct __tempuri__LineInventoryUpdate * SOAP_FMAC2 soap_instantiate___tempuri__LineInventoryUpdate(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__LineInventoryUpdate * soap_new___tempuri__LineInventoryUpdate(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__LineInventoryUpdate(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__LineInventoryUpdate * soap_new_req___tempuri__LineInventoryUpdate(
	struct soap *soap)
{
	struct __tempuri__LineInventoryUpdate *_p = soap_new___tempuri__LineInventoryUpdate(soap);
	if (_p)
	{	soap_default___tempuri__LineInventoryUpdate(soap, _p);
	}
	return _p;
}

inline struct __tempuri__LineInventoryUpdate * soap_new_set___tempuri__LineInventoryUpdate(
	struct soap *soap,
	_tempuri__LineInventoryUpdate *tempuri__LineInventoryUpdate)
{
	struct __tempuri__LineInventoryUpdate *_p = soap_new___tempuri__LineInventoryUpdate(soap);
	if (_p)
	{	soap_default___tempuri__LineInventoryUpdate(soap, _p);
		_p->tempuri__LineInventoryUpdate = tempuri__LineInventoryUpdate;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__LineInventoryUpdate(struct soap*, const struct __tempuri__LineInventoryUpdate *, const char*, const char*);

inline int soap_write___tempuri__LineInventoryUpdate(struct soap *soap, struct __tempuri__LineInventoryUpdate const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___tempuri__LineInventoryUpdate(soap, p), 0) || soap_put___tempuri__LineInventoryUpdate(soap, p, "-tempuri:LineInventoryUpdate", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__LineInventoryUpdate(struct soap *soap, const char *URL, struct __tempuri__LineInventoryUpdate const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__LineInventoryUpdate(soap, p), 0) || soap_put___tempuri__LineInventoryUpdate(soap, p, "-tempuri:LineInventoryUpdate", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__LineInventoryUpdate(struct soap *soap, const char *URL, struct __tempuri__LineInventoryUpdate const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__LineInventoryUpdate(soap, p), 0) || soap_put___tempuri__LineInventoryUpdate(soap, p, "-tempuri:LineInventoryUpdate", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__LineInventoryUpdate * SOAP_FMAC4 soap_get___tempuri__LineInventoryUpdate(struct soap*, struct __tempuri__LineInventoryUpdate *, const char*, const char*);

inline int soap_read___tempuri__LineInventoryUpdate(struct soap *soap, struct __tempuri__LineInventoryUpdate *p)
{
	if (p)
	{	soap_default___tempuri__LineInventoryUpdate(soap, p);
		if (soap_begin_recv(soap) || soap_get___tempuri__LineInventoryUpdate(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__LineInventoryUpdate(struct soap *soap, const char *URL, struct __tempuri__LineInventoryUpdate *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___tempuri__LineInventoryUpdate(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___tempuri__LineInventoryUpdate(struct soap *soap, struct __tempuri__LineInventoryUpdate *p)
{
	if (soap_read___tempuri__LineInventoryUpdate(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tempuri__LineInventory_DEFINED
#define SOAP_TYPE___tempuri__LineInventory_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__LineInventory(struct soap*, struct __tempuri__LineInventory *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__LineInventory(struct soap*, const struct __tempuri__LineInventory *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__LineInventory(struct soap*, const char*, int, const struct __tempuri__LineInventory *, const char*);
SOAP_FMAC3 struct __tempuri__LineInventory * SOAP_FMAC4 soap_in___tempuri__LineInventory(struct soap*, const char*, struct __tempuri__LineInventory *, const char*);
SOAP_FMAC1 struct __tempuri__LineInventory * SOAP_FMAC2 soap_instantiate___tempuri__LineInventory(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__LineInventory * soap_new___tempuri__LineInventory(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__LineInventory(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__LineInventory * soap_new_req___tempuri__LineInventory(
	struct soap *soap)
{
	struct __tempuri__LineInventory *_p = soap_new___tempuri__LineInventory(soap);
	if (_p)
	{	soap_default___tempuri__LineInventory(soap, _p);
	}
	return _p;
}

inline struct __tempuri__LineInventory * soap_new_set___tempuri__LineInventory(
	struct soap *soap,
	_tempuri__LineInventory *tempuri__LineInventory)
{
	struct __tempuri__LineInventory *_p = soap_new___tempuri__LineInventory(soap);
	if (_p)
	{	soap_default___tempuri__LineInventory(soap, _p);
		_p->tempuri__LineInventory = tempuri__LineInventory;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__LineInventory(struct soap*, const struct __tempuri__LineInventory *, const char*, const char*);

inline int soap_write___tempuri__LineInventory(struct soap *soap, struct __tempuri__LineInventory const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___tempuri__LineInventory(soap, p), 0) || soap_put___tempuri__LineInventory(soap, p, "-tempuri:LineInventory", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__LineInventory(struct soap *soap, const char *URL, struct __tempuri__LineInventory const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__LineInventory(soap, p), 0) || soap_put___tempuri__LineInventory(soap, p, "-tempuri:LineInventory", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__LineInventory(struct soap *soap, const char *URL, struct __tempuri__LineInventory const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__LineInventory(soap, p), 0) || soap_put___tempuri__LineInventory(soap, p, "-tempuri:LineInventory", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__LineInventory * SOAP_FMAC4 soap_get___tempuri__LineInventory(struct soap*, struct __tempuri__LineInventory *, const char*, const char*);

inline int soap_read___tempuri__LineInventory(struct soap *soap, struct __tempuri__LineInventory *p)
{
	if (p)
	{	soap_default___tempuri__LineInventory(soap, p);
		if (soap_begin_recv(soap) || soap_get___tempuri__LineInventory(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__LineInventory(struct soap *soap, const char *URL, struct __tempuri__LineInventory *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___tempuri__LineInventory(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___tempuri__LineInventory(struct soap *soap, struct __tempuri__LineInventory *p)
{
	if (soap_read___tempuri__LineInventory(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tempuri__WorkOrder_DEFINED
#define SOAP_TYPE___tempuri__WorkOrder_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__WorkOrder(struct soap*, struct __tempuri__WorkOrder *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__WorkOrder(struct soap*, const struct __tempuri__WorkOrder *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__WorkOrder(struct soap*, const char*, int, const struct __tempuri__WorkOrder *, const char*);
SOAP_FMAC3 struct __tempuri__WorkOrder * SOAP_FMAC4 soap_in___tempuri__WorkOrder(struct soap*, const char*, struct __tempuri__WorkOrder *, const char*);
SOAP_FMAC1 struct __tempuri__WorkOrder * SOAP_FMAC2 soap_instantiate___tempuri__WorkOrder(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__WorkOrder * soap_new___tempuri__WorkOrder(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__WorkOrder(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__WorkOrder * soap_new_req___tempuri__WorkOrder(
	struct soap *soap)
{
	struct __tempuri__WorkOrder *_p = soap_new___tempuri__WorkOrder(soap);
	if (_p)
	{	soap_default___tempuri__WorkOrder(soap, _p);
	}
	return _p;
}

inline struct __tempuri__WorkOrder * soap_new_set___tempuri__WorkOrder(
	struct soap *soap,
	_tempuri__WorkOrder *tempuri__WorkOrder)
{
	struct __tempuri__WorkOrder *_p = soap_new___tempuri__WorkOrder(soap);
	if (_p)
	{	soap_default___tempuri__WorkOrder(soap, _p);
		_p->tempuri__WorkOrder = tempuri__WorkOrder;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__WorkOrder(struct soap*, const struct __tempuri__WorkOrder *, const char*, const char*);

inline int soap_write___tempuri__WorkOrder(struct soap *soap, struct __tempuri__WorkOrder const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___tempuri__WorkOrder(soap, p), 0) || soap_put___tempuri__WorkOrder(soap, p, "-tempuri:WorkOrder", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__WorkOrder(struct soap *soap, const char *URL, struct __tempuri__WorkOrder const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__WorkOrder(soap, p), 0) || soap_put___tempuri__WorkOrder(soap, p, "-tempuri:WorkOrder", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__WorkOrder(struct soap *soap, const char *URL, struct __tempuri__WorkOrder const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__WorkOrder(soap, p), 0) || soap_put___tempuri__WorkOrder(soap, p, "-tempuri:WorkOrder", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__WorkOrder * SOAP_FMAC4 soap_get___tempuri__WorkOrder(struct soap*, struct __tempuri__WorkOrder *, const char*, const char*);

inline int soap_read___tempuri__WorkOrder(struct soap *soap, struct __tempuri__WorkOrder *p)
{
	if (p)
	{	soap_default___tempuri__WorkOrder(soap, p);
		if (soap_begin_recv(soap) || soap_get___tempuri__WorkOrder(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__WorkOrder(struct soap *soap, const char *URL, struct __tempuri__WorkOrder *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___tempuri__WorkOrder(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___tempuri__WorkOrder(struct soap *soap, struct __tempuri__WorkOrder *p)
{
	if (soap_read___tempuri__WorkOrder(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tempuri__ToolingTimes_DEFINED
#define SOAP_TYPE___tempuri__ToolingTimes_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__ToolingTimes(struct soap*, struct __tempuri__ToolingTimes *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__ToolingTimes(struct soap*, const struct __tempuri__ToolingTimes *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__ToolingTimes(struct soap*, const char*, int, const struct __tempuri__ToolingTimes *, const char*);
SOAP_FMAC3 struct __tempuri__ToolingTimes * SOAP_FMAC4 soap_in___tempuri__ToolingTimes(struct soap*, const char*, struct __tempuri__ToolingTimes *, const char*);
SOAP_FMAC1 struct __tempuri__ToolingTimes * SOAP_FMAC2 soap_instantiate___tempuri__ToolingTimes(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__ToolingTimes * soap_new___tempuri__ToolingTimes(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__ToolingTimes(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__ToolingTimes * soap_new_req___tempuri__ToolingTimes(
	struct soap *soap)
{
	struct __tempuri__ToolingTimes *_p = soap_new___tempuri__ToolingTimes(soap);
	if (_p)
	{	soap_default___tempuri__ToolingTimes(soap, _p);
	}
	return _p;
}

inline struct __tempuri__ToolingTimes * soap_new_set___tempuri__ToolingTimes(
	struct soap *soap,
	_tempuri__ToolingTimes *tempuri__ToolingTimes)
{
	struct __tempuri__ToolingTimes *_p = soap_new___tempuri__ToolingTimes(soap);
	if (_p)
	{	soap_default___tempuri__ToolingTimes(soap, _p);
		_p->tempuri__ToolingTimes = tempuri__ToolingTimes;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__ToolingTimes(struct soap*, const struct __tempuri__ToolingTimes *, const char*, const char*);

inline int soap_write___tempuri__ToolingTimes(struct soap *soap, struct __tempuri__ToolingTimes const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___tempuri__ToolingTimes(soap, p), 0) || soap_put___tempuri__ToolingTimes(soap, p, "-tempuri:ToolingTimes", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__ToolingTimes(struct soap *soap, const char *URL, struct __tempuri__ToolingTimes const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__ToolingTimes(soap, p), 0) || soap_put___tempuri__ToolingTimes(soap, p, "-tempuri:ToolingTimes", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__ToolingTimes(struct soap *soap, const char *URL, struct __tempuri__ToolingTimes const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__ToolingTimes(soap, p), 0) || soap_put___tempuri__ToolingTimes(soap, p, "-tempuri:ToolingTimes", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__ToolingTimes * SOAP_FMAC4 soap_get___tempuri__ToolingTimes(struct soap*, struct __tempuri__ToolingTimes *, const char*, const char*);

inline int soap_read___tempuri__ToolingTimes(struct soap *soap, struct __tempuri__ToolingTimes *p)
{
	if (p)
	{	soap_default___tempuri__ToolingTimes(soap, p);
		if (soap_begin_recv(soap) || soap_get___tempuri__ToolingTimes(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__ToolingTimes(struct soap *soap, const char *URL, struct __tempuri__ToolingTimes *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___tempuri__ToolingTimes(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___tempuri__ToolingTimes(struct soap *soap, struct __tempuri__ToolingTimes *p)
{
	if (soap_read___tempuri__ToolingTimes(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tempuri__GetDocCode_DEFINED
#define SOAP_TYPE___tempuri__GetDocCode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__GetDocCode(struct soap*, struct __tempuri__GetDocCode *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__GetDocCode(struct soap*, const struct __tempuri__GetDocCode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__GetDocCode(struct soap*, const char*, int, const struct __tempuri__GetDocCode *, const char*);
SOAP_FMAC3 struct __tempuri__GetDocCode * SOAP_FMAC4 soap_in___tempuri__GetDocCode(struct soap*, const char*, struct __tempuri__GetDocCode *, const char*);
SOAP_FMAC1 struct __tempuri__GetDocCode * SOAP_FMAC2 soap_instantiate___tempuri__GetDocCode(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__GetDocCode * soap_new___tempuri__GetDocCode(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__GetDocCode(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__GetDocCode * soap_new_req___tempuri__GetDocCode(
	struct soap *soap)
{
	struct __tempuri__GetDocCode *_p = soap_new___tempuri__GetDocCode(soap);
	if (_p)
	{	soap_default___tempuri__GetDocCode(soap, _p);
	}
	return _p;
}

inline struct __tempuri__GetDocCode * soap_new_set___tempuri__GetDocCode(
	struct soap *soap,
	_tempuri__GetDocCode *tempuri__GetDocCode)
{
	struct __tempuri__GetDocCode *_p = soap_new___tempuri__GetDocCode(soap);
	if (_p)
	{	soap_default___tempuri__GetDocCode(soap, _p);
		_p->tempuri__GetDocCode = tempuri__GetDocCode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__GetDocCode(struct soap*, const struct __tempuri__GetDocCode *, const char*, const char*);

inline int soap_write___tempuri__GetDocCode(struct soap *soap, struct __tempuri__GetDocCode const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___tempuri__GetDocCode(soap, p), 0) || soap_put___tempuri__GetDocCode(soap, p, "-tempuri:GetDocCode", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__GetDocCode(struct soap *soap, const char *URL, struct __tempuri__GetDocCode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__GetDocCode(soap, p), 0) || soap_put___tempuri__GetDocCode(soap, p, "-tempuri:GetDocCode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__GetDocCode(struct soap *soap, const char *URL, struct __tempuri__GetDocCode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__GetDocCode(soap, p), 0) || soap_put___tempuri__GetDocCode(soap, p, "-tempuri:GetDocCode", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__GetDocCode * SOAP_FMAC4 soap_get___tempuri__GetDocCode(struct soap*, struct __tempuri__GetDocCode *, const char*, const char*);

inline int soap_read___tempuri__GetDocCode(struct soap *soap, struct __tempuri__GetDocCode *p)
{
	if (p)
	{	soap_default___tempuri__GetDocCode(soap, p);
		if (soap_begin_recv(soap) || soap_get___tempuri__GetDocCode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__GetDocCode(struct soap *soap, const char *URL, struct __tempuri__GetDocCode *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___tempuri__GetDocCode(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___tempuri__GetDocCode(struct soap *soap, struct __tempuri__GetDocCode *p)
{
	if (soap_read___tempuri__GetDocCode(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tempuri__GetDate_DEFINED
#define SOAP_TYPE___tempuri__GetDate_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__GetDate(struct soap*, struct __tempuri__GetDate *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__GetDate(struct soap*, const struct __tempuri__GetDate *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__GetDate(struct soap*, const char*, int, const struct __tempuri__GetDate *, const char*);
SOAP_FMAC3 struct __tempuri__GetDate * SOAP_FMAC4 soap_in___tempuri__GetDate(struct soap*, const char*, struct __tempuri__GetDate *, const char*);
SOAP_FMAC1 struct __tempuri__GetDate * SOAP_FMAC2 soap_instantiate___tempuri__GetDate(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__GetDate * soap_new___tempuri__GetDate(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__GetDate(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__GetDate * soap_new_req___tempuri__GetDate(
	struct soap *soap)
{
	struct __tempuri__GetDate *_p = soap_new___tempuri__GetDate(soap);
	if (_p)
	{	soap_default___tempuri__GetDate(soap, _p);
	}
	return _p;
}

inline struct __tempuri__GetDate * soap_new_set___tempuri__GetDate(
	struct soap *soap,
	_tempuri__GetDate *tempuri__GetDate)
{
	struct __tempuri__GetDate *_p = soap_new___tempuri__GetDate(soap);
	if (_p)
	{	soap_default___tempuri__GetDate(soap, _p);
		_p->tempuri__GetDate = tempuri__GetDate;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__GetDate(struct soap*, const struct __tempuri__GetDate *, const char*, const char*);

inline int soap_write___tempuri__GetDate(struct soap *soap, struct __tempuri__GetDate const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___tempuri__GetDate(soap, p), 0) || soap_put___tempuri__GetDate(soap, p, "-tempuri:GetDate", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__GetDate(struct soap *soap, const char *URL, struct __tempuri__GetDate const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__GetDate(soap, p), 0) || soap_put___tempuri__GetDate(soap, p, "-tempuri:GetDate", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__GetDate(struct soap *soap, const char *URL, struct __tempuri__GetDate const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___tempuri__GetDate(soap, p), 0) || soap_put___tempuri__GetDate(soap, p, "-tempuri:GetDate", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__GetDate * SOAP_FMAC4 soap_get___tempuri__GetDate(struct soap*, struct __tempuri__GetDate *, const char*, const char*);

inline int soap_read___tempuri__GetDate(struct soap *soap, struct __tempuri__GetDate *p)
{
	if (p)
	{	soap_default___tempuri__GetDate(soap, p);
		if (soap_begin_recv(soap) || soap_get___tempuri__GetDate(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__GetDate(struct soap *soap, const char *URL, struct __tempuri__GetDate *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___tempuri__GetDate(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___tempuri__GetDate(struct soap *soap, struct __tempuri__GetDate *p)
{
	if (soap_read___tempuri__GetDate(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__Login_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__Login_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__Login(struct soap*, _tempuri__Login *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__Login(struct soap*, const char *, int, _tempuri__Login *const*, const char *);
SOAP_FMAC3 _tempuri__Login ** SOAP_FMAC4 soap_in_PointerTo_tempuri__Login(struct soap*, const char*, _tempuri__Login **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__Login(struct soap*, _tempuri__Login *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__Login ** SOAP_FMAC4 soap_get_PointerTo_tempuri__Login(struct soap*, _tempuri__Login **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__GetPower_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__GetPower_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__GetPower(struct soap*, _tempuri__GetPower *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__GetPower(struct soap*, const char *, int, _tempuri__GetPower *const*, const char *);
SOAP_FMAC3 _tempuri__GetPower ** SOAP_FMAC4 soap_in_PointerTo_tempuri__GetPower(struct soap*, const char*, _tempuri__GetPower **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__GetPower(struct soap*, _tempuri__GetPower *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__GetPower ** SOAP_FMAC4 soap_get_PointerTo_tempuri__GetPower(struct soap*, _tempuri__GetPower **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__GetDept_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__GetDept_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__GetDept(struct soap*, _tempuri__GetDept *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__GetDept(struct soap*, const char *, int, _tempuri__GetDept *const*, const char *);
SOAP_FMAC3 _tempuri__GetDept ** SOAP_FMAC4 soap_in_PointerTo_tempuri__GetDept(struct soap*, const char*, _tempuri__GetDept **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__GetDept(struct soap*, _tempuri__GetDept *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__GetDept ** SOAP_FMAC4 soap_get_PointerTo_tempuri__GetDept(struct soap*, _tempuri__GetDept **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__SetExMail_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__SetExMail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__SetExMail(struct soap*, _tempuri__SetExMail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__SetExMail(struct soap*, const char *, int, _tempuri__SetExMail *const*, const char *);
SOAP_FMAC3 _tempuri__SetExMail ** SOAP_FMAC4 soap_in_PointerTo_tempuri__SetExMail(struct soap*, const char*, _tempuri__SetExMail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__SetExMail(struct soap*, _tempuri__SetExMail *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__SetExMail ** SOAP_FMAC4 soap_get_PointerTo_tempuri__SetExMail(struct soap*, _tempuri__SetExMail **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__DocAdd_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__DocAdd_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__DocAdd(struct soap*, _tempuri__DocAdd *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__DocAdd(struct soap*, const char *, int, _tempuri__DocAdd *const*, const char *);
SOAP_FMAC3 _tempuri__DocAdd ** SOAP_FMAC4 soap_in_PointerTo_tempuri__DocAdd(struct soap*, const char*, _tempuri__DocAdd **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__DocAdd(struct soap*, _tempuri__DocAdd *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__DocAdd ** SOAP_FMAC4 soap_get_PointerTo_tempuri__DocAdd(struct soap*, _tempuri__DocAdd **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__ItemsAdd_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__ItemsAdd_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__ItemsAdd(struct soap*, _tempuri__ItemsAdd *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__ItemsAdd(struct soap*, const char *, int, _tempuri__ItemsAdd *const*, const char *);
SOAP_FMAC3 _tempuri__ItemsAdd ** SOAP_FMAC4 soap_in_PointerTo_tempuri__ItemsAdd(struct soap*, const char*, _tempuri__ItemsAdd **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__ItemsAdd(struct soap*, _tempuri__ItemsAdd *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__ItemsAdd ** SOAP_FMAC4 soap_get_PointerTo_tempuri__ItemsAdd(struct soap*, _tempuri__ItemsAdd **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__AnDonTest_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__AnDonTest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__AnDonTest(struct soap*, _tempuri__AnDonTest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__AnDonTest(struct soap*, const char *, int, _tempuri__AnDonTest *const*, const char *);
SOAP_FMAC3 _tempuri__AnDonTest ** SOAP_FMAC4 soap_in_PointerTo_tempuri__AnDonTest(struct soap*, const char*, _tempuri__AnDonTest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__AnDonTest(struct soap*, _tempuri__AnDonTest *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__AnDonTest ** SOAP_FMAC4 soap_get_PointerTo_tempuri__AnDonTest(struct soap*, _tempuri__AnDonTest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__AnDonCall_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__AnDonCall_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__AnDonCall(struct soap*, _tempuri__AnDonCall *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__AnDonCall(struct soap*, const char *, int, _tempuri__AnDonCall *const*, const char *);
SOAP_FMAC3 _tempuri__AnDonCall ** SOAP_FMAC4 soap_in_PointerTo_tempuri__AnDonCall(struct soap*, const char*, _tempuri__AnDonCall **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__AnDonCall(struct soap*, _tempuri__AnDonCall *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__AnDonCall ** SOAP_FMAC4 soap_get_PointerTo_tempuri__AnDonCall(struct soap*, _tempuri__AnDonCall **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__AnDon_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__AnDon_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__AnDon(struct soap*, _tempuri__AnDon *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__AnDon(struct soap*, const char *, int, _tempuri__AnDon *const*, const char *);
SOAP_FMAC3 _tempuri__AnDon ** SOAP_FMAC4 soap_in_PointerTo_tempuri__AnDon(struct soap*, const char*, _tempuri__AnDon **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__AnDon(struct soap*, _tempuri__AnDon *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__AnDon ** SOAP_FMAC4 soap_get_PointerTo_tempuri__AnDon(struct soap*, _tempuri__AnDon **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__LineInventoryReturn_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__LineInventoryReturn_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__LineInventoryReturn(struct soap*, _tempuri__LineInventoryReturn *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__LineInventoryReturn(struct soap*, const char *, int, _tempuri__LineInventoryReturn *const*, const char *);
SOAP_FMAC3 _tempuri__LineInventoryReturn ** SOAP_FMAC4 soap_in_PointerTo_tempuri__LineInventoryReturn(struct soap*, const char*, _tempuri__LineInventoryReturn **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__LineInventoryReturn(struct soap*, _tempuri__LineInventoryReturn *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__LineInventoryReturn ** SOAP_FMAC4 soap_get_PointerTo_tempuri__LineInventoryReturn(struct soap*, _tempuri__LineInventoryReturn **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__LineInventoryUpdate_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__LineInventoryUpdate_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__LineInventoryUpdate(struct soap*, _tempuri__LineInventoryUpdate *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__LineInventoryUpdate(struct soap*, const char *, int, _tempuri__LineInventoryUpdate *const*, const char *);
SOAP_FMAC3 _tempuri__LineInventoryUpdate ** SOAP_FMAC4 soap_in_PointerTo_tempuri__LineInventoryUpdate(struct soap*, const char*, _tempuri__LineInventoryUpdate **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__LineInventoryUpdate(struct soap*, _tempuri__LineInventoryUpdate *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__LineInventoryUpdate ** SOAP_FMAC4 soap_get_PointerTo_tempuri__LineInventoryUpdate(struct soap*, _tempuri__LineInventoryUpdate **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__LineInventory_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__LineInventory_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__LineInventory(struct soap*, _tempuri__LineInventory *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__LineInventory(struct soap*, const char *, int, _tempuri__LineInventory *const*, const char *);
SOAP_FMAC3 _tempuri__LineInventory ** SOAP_FMAC4 soap_in_PointerTo_tempuri__LineInventory(struct soap*, const char*, _tempuri__LineInventory **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__LineInventory(struct soap*, _tempuri__LineInventory *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__LineInventory ** SOAP_FMAC4 soap_get_PointerTo_tempuri__LineInventory(struct soap*, _tempuri__LineInventory **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__WorkOrder_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__WorkOrder_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__WorkOrder(struct soap*, _tempuri__WorkOrder *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__WorkOrder(struct soap*, const char *, int, _tempuri__WorkOrder *const*, const char *);
SOAP_FMAC3 _tempuri__WorkOrder ** SOAP_FMAC4 soap_in_PointerTo_tempuri__WorkOrder(struct soap*, const char*, _tempuri__WorkOrder **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__WorkOrder(struct soap*, _tempuri__WorkOrder *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__WorkOrder ** SOAP_FMAC4 soap_get_PointerTo_tempuri__WorkOrder(struct soap*, _tempuri__WorkOrder **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__ToolingTimes_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__ToolingTimes_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__ToolingTimes(struct soap*, _tempuri__ToolingTimes *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__ToolingTimes(struct soap*, const char *, int, _tempuri__ToolingTimes *const*, const char *);
SOAP_FMAC3 _tempuri__ToolingTimes ** SOAP_FMAC4 soap_in_PointerTo_tempuri__ToolingTimes(struct soap*, const char*, _tempuri__ToolingTimes **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__ToolingTimes(struct soap*, _tempuri__ToolingTimes *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__ToolingTimes ** SOAP_FMAC4 soap_get_PointerTo_tempuri__ToolingTimes(struct soap*, _tempuri__ToolingTimes **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__GetDocCode_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__GetDocCode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__GetDocCode(struct soap*, _tempuri__GetDocCode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__GetDocCode(struct soap*, const char *, int, _tempuri__GetDocCode *const*, const char *);
SOAP_FMAC3 _tempuri__GetDocCode ** SOAP_FMAC4 soap_in_PointerTo_tempuri__GetDocCode(struct soap*, const char*, _tempuri__GetDocCode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__GetDocCode(struct soap*, _tempuri__GetDocCode *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__GetDocCode ** SOAP_FMAC4 soap_get_PointerTo_tempuri__GetDocCode(struct soap*, _tempuri__GetDocCode **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__GetDate_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__GetDate_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__GetDate(struct soap*, _tempuri__GetDate *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__GetDate(struct soap*, const char *, int, _tempuri__GetDate *const*, const char *);
SOAP_FMAC3 _tempuri__GetDate ** SOAP_FMAC4 soap_in_PointerTo_tempuri__GetDate(struct soap*, const char*, _tempuri__GetDate **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__GetDate(struct soap*, _tempuri__GetDate *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__GetDate ** SOAP_FMAC4 soap_get_PointerTo_tempuri__GetDate(struct soap*, _tempuri__GetDate **, const char*, const char*);
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#define soap_instantiate__QName soap_instantiate_string


#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__QName(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (soap_read__QName(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_string(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (soap_read_string(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

/* End of soapH.h */
